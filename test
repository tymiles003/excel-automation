
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(xtable)
library(readr)
library(knitr)
library(shinydashboard)
library(shinythemes)
library(htmlTable)
library(data.table)
library(mailR)
library(DT)
library(sqldf)
library(dplyr)
library(password)
library(shinyWidgets)
library(shinydashboardPlus)
library(shinyTime)
library(plotly)
library(ggplot2)
library(hrbrthemes)
library(ggpubr)
library(timevis)
library(kableExtra)
library(tidyr)
library(gtools)
library(tableHTML)

plot.new()

#signup form
fields_signup_p<-c("signup_id","signup_lan","signup_pass1","signup_pass2")

################### Sourcing ############################

#Source importing steps
source("Imports/Import_meta.R") #Import metadata, recommendations file, etc.


#Source Functions used in the app
source("Functions/Functions.R")


#Source UI codes
source("UI_Codes/Login_page_ui.R") #Used as login_page_ui

source("UI_Codes/Forgot_password_ui.R") #Used as forgot_password_ui

source("UI_Codes/Sign_up_page_ui.R") #Used as sign_up_page_ui

source("UI_Codes/Admin_sign_in_page_ui.R") #Used as admin_login_page_ui

source("UI_Codes/load_to_hadoop_page_ui.R")

source("UI_Codes/Admin_approval_page_ui.R") #Used as admin_approval_ui

source("UI_Codes/Home_page_ui.R")

source("UI_Codes/Raise_new_incident_ui.R") #Used as Raise_inc_tab

source("UI_Codes/Update_CRT_tab_ui.R") #Used as Update_CRT_tab

source("UI_Codes/All_inc_tab_ui.R") #Used as All_inc_tab

source("UI_Codes/Audit_trail_tab_ui.R") #Used as Audit_trail_tab

source("UI_Codes/Site_imt_tab.R") 

source("UI_Codes/Site_nr_tab.R") 

source("UI_Codes/Site_rp_tab.R")

source("UI_Codes/Summary_tab.R")

source("UI_Codes/Sit_rep_tab.R")

source("UI_Codes/Close_incidents_tab_ui.R")

#Source Server codes
#source("Server_Codes/Sign_up_page_server.R")


########################## UI code ##########################
ui <- fluidPage(
  
  
  shinyjs::useShinyjs(),
  
  login_page_ui, #UI code for this present in Codes/Login_page_ui.R
  
  shinyjs::hidden(
    sign_up_page_ui 
  ),
  shinyjs::hidden(
    admin_login_page_ui 
  ),
  shinyjs::hidden(
    forgot_password_ui
  ),
  
  shinyjs::hidden(
    admin_approval_ui 
  ),
  
  shinyjs::hidden(
    load_to_hadoop_page_ui 
  ),
  shinyjs::hidden(div(id="UI_page",
                      dashboardPage(skin = "blue",
                                    dashboardHeader(title =
                                                      tagList(
                                                        tags$span(class = "logo-mini", "IRM"),
                                                        tags$span(class = "logo-lg", "Incident Response Management")),
                                                    tags$li(class = "dropdown",
                                                            tags$style(".main-header {max-height: 100px}"),
                                                            tags$style(".main-header .logo {height: 100px}")),
                                                    titleWidth = 380,
                                                    tags$li(a(href = 'http://www.company.com',img(src = 'BG logo2.png',title = "British gas",height = "80px"),
                                                              style = "padding-top:0px; padding-bottom:0px;"),class = "dropdown"),
                                                    tags$li(actionLink("logout", label = "", icon = icon("power-off")), class = "dropdown")),
                                    
                                    dashboardSidebar(width = 320,
                                                     tags$style(
                                                       ".sidebar-menu {margin-top:50px}"),
                                                     sidebarMenu(
                                                    tags$li(class="header", p("OVERVIEW",style="font-size: 15px; font-family: 'BG Flame'")), 
                                                     menuItem(tabName = "Home_page", "Home",icon = icon("home")),
                                                     menuItem(tabName = "Summary", "Summary",icon = icon("wpforms")),
                                                    
                                                     
                                                     tags$li(class="header", p("NEW INCIDENT",style="font-size: 15px; font-family: 'BG Flame'")),
                                                     menuItem(tabName = "Raise_inc", "Raise incident",icon = icon("file outline")),
                                                     
                                                     tags$li(class="header", p("UPDATE",style="font-size: 15px; font-family: 'BG Flame'")),
                                                     menuItem(tabName = "CRT_mn", "CRT",icon = icon("edit outline")),
                                                     menuItem(tabName = "Site_rep", "Situation Reports",icon = icon("child")),
                                                     menuItem(tabName = "Site_imt_mn", "Site/IMT",icon = icon("user plus")),
                                                     menuItem(tabName = "Site_rp_mn", "Resource & planning",icon = icon("users")),
                                                     menuItem(tabName = "NR_mn", "National Resilience",icon = icon("child")),
                                                    menuItem("Level 1A", icon = icon("envelope"), badgeLabel = "coming soon", badgeColor = "green"),
                                                    
                                                     tags$li(class="header", p("CLOSE",style="font-size: 15px; font-family: 'BG Flame'")),
                                                     #menuItem(tabName = "All_inc", "All incidents",icon = icon("table")),
                                                     menuItem(tabName = "Close_inc", "Close incidents",icon = icon("close icon")),
                                                     
                                                     tags$li(class="header", p("AUDIT TRAIL",style="font-size: 15px; font-family: 'BG Flame'")),
                                                     menuItem(tabName = "Audit_inc", " Audit trail",icon = icon("wpforms"))
                                                     
                                                    
                                    )
                                    ),
                      
                      dashboardBody(
                        tags$script(HTML("$('body').addClass('sidebar-mini');")),#line added for sidebar minimizing
                        tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")
                        ),
                        
                        tabItems(
                          home_page_tab,
                          Raise_inc_tab, #UI code for this present in Codes/Raise_new_incident_ui.R
                          Update_CRT_tab,  
                          Site_imt_tab,
                          Site_nr_tab,
                          Site_rp_tab,
                          All_inc_tab,
                          Site_repetition_tab,
                          Audit_trail_tab,
                          Summary_tab,
                          Close_incidents_tab
                        )))
  )))


####################### Server Codes ###############################

server <- function(session,input, output) {
  
  
  output$picture<-renderImage({
    return(list(src = "www//Capture.png",contentType = "image/png",alt = "Banner"))}, 
    deleteFile = FALSE) #where the src is wherever you have the picture
  
  ###### session user info ######
  session_user<-reactiveValues()
  
  #Sign-up page
  observeEvent(input$signup_link, {
    shinyjs::disable("signup_link")
    shinyjs::disable("admin_login")
    shinyjs::disable("Login")
    
    shinyjs::show("Signup_page")
    shinyjs::hide("Login_page")
    
    shinyjs::enable("signup_link")
    shinyjs::enable("admin_login")
    shinyjs::enable("Login")
  })
  
  #Login Page
  observeEvent(input$signup_but, {
    

    shinyjs::disable("signup_but")
    shinyjs::disable("back_signin_p")
    
    shinyjs::show("Login_page")
    shinyjs::hide("Signup_page")
    
    shinyjs::enable("signup_but")
    shinyjs::enable("back_signin_p")
    
  })
  
  #back to sign-in from sign up page
  observeEvent(input$back_signin_p, {
    shinyjs::show("Login_page")
    shinyjs::hide("Signup_page")
  })
  
  #admin login
  observeEvent(input$admin_login, {
    shinyjs::disable("signup_link")
    shinyjs::disable("admin_login")
    shinyjs::disable("Login")
    
    shinyjs::show("Admin_Login_page")
    shinyjs::hide("Login_page")
    
    shinyjs::enable("signup_link")
    shinyjs::enable("admin_login")
    shinyjs::enable("Login")
  })
  
  # Admin login back to login page
  observeEvent(input$back_signin2_p, {
    shinyjs::disable("back_signin2_p")
    shinyjs::disable("Admin_login_p")
    
    shinyjs::show("Login_page")
    shinyjs::hide("Admin_Login_page")
    
    shinyjs::enable("back_signin2_p")
    shinyjs::enable("Admin_login_p")
  })
  
  #Forgot password
  observeEvent(input$get_pass,{
    shinyjs::show("Forgot_pass_page")
    shinyjs::hide("Login_page")
    
  })
  
  
  #Load data tp hadoop login
  observeEvent(input$hadoop_login,{
    shinyjs::show("load_to_hadoop_page")
    shinyjs::hide("Admin_Login_page")
  })
  
  ##### Hadoop admin access   ######
  observeEvent(input$Hadoop_login_p,{
  if ((input$hadoop_login_id=="test" & input$hadoop_login_pass=="test")){
    
    # #upload code
    # signup_data<-readRDS("Signup_data.Rda")
    # upload_to_hadoop<-signup_data
    # 
    # upload_to_hadoop$Signup_password<-unlist(upload_to_hadoop$Signup_password)
    # 
    # myConn <- DBI::dbConnect(odbc::odbc(),"doxhttphive")
    # 
    # 
    # 
    # dbGetQuery(myConn, "SET hive.execution.engine=tez;")
    # #dbGetQuery(myConn, "SET tez.queue.name=sas;")
    # 
    # dbSendQuery(myConn, sprintf('USE %s;', "analytics_rca"))
    # 
    # myDBs <- DBI::dbGetQuery(myConn, "drop table if exists analytics_rca.bcp_signup_data;")
    # 
    # myConn %>% dbWriteTable("bcp_signup_data", upload_to_hadoop, append=TRUE)  
    # 
    # myConn %>% dbDisconnect()
    # 
    # showModal(modalDialog(title = "Upload successful!","Success"))
    
    shinyjs::show("download_data_")
    
    updateTextInput(session,inputId = "hadoop_login_id", value ="")
    updateTextInput(session,inputId = "hadoop_login_pass", value ="")
  }
    else
    {shinyjs::hide("download_data_")
      showModal(modalDialog(title = "You don't have sufficient rights!","Error"))
      
      }
  })
  
  #log out download data
  observeEvent(input$Hadoop_logout_p,{shinyjs::hide("download_data_")})
  
  #download code
  output$download_signup_data <- downloadHandler(
    filename = function() {
      "Signup_data.csv"
    },
    content = function(file) {
      signup_data<-readRDS("Signup_data.Rda")
      signup_data$Signup_email_ID<-unlist(signup_data$Signup_email_ID)
      
      signup_data$Signup_lan_ID<-unlist(signup_data$Signup_lan_ID)
      signup_data$Signup_password<-unlist(signup_data$Signup_password)
      
      write.csv(signup_data,file, row.names = FALSE)
    })
  
  
  
  
  output$download_crt_site <- downloadHandler(
    filename = function() {
      "CRT_site_data.csv"
    },
    content = function(file) {
    crt_site<-loadData_crt_site()
    write.csv(crt_site,file, row.names = FALSE)
    })
  
  output$download_crt_comms <- downloadHandler(
    filename = function() {
      "CRT_comms_data.csv"
    },
    content = function(file) {
      crt_comms<-loadData_crt_comms()
      write.csv(crt_comms,file, row.names = FALSE)
    })
  
  output$download_crt_ops <- downloadHandler(
    filename = function() {
      "CRT_ops_data.csv"
    },
    content = function(file) {
      crt_ops<-loadData_crt_ops()
      write.csv(crt_ops,file, row.names = FALSE)
    })
  
  output$download_imt <- downloadHandler(
    filename = function() {
      "IMT_data.csv"
    },
    content = function(file) {
      imt_data<-loadData_site_imt()
      write.csv(imt_data,file, row.names = FALSE)
    })
  
  output$download_nr <- downloadHandler(
    filename = function() {
      "NR_data.csv"
    },
    content = function(file) {
      nr_data<-loadData_site_nr()
      write.csv(nr_data,file, row.names = FALSE)
    })
  
  output$download_sit_rep <- downloadHandler(
    filename = function() {
      "Sit_rep_data.csv"
    },
    content = function(file) {
      sit_rep<-loadData_site_rep()
      write.csv(sit_rep,file, row.names = FALSE)
    })
  
  output$download_rp4 <- downloadHandler(
    filename = function() {
      "RP_data_step4.csv"
    },
    content = function(file) {
      rp_data4<-loadData_site_rp_step4()
      write.csv(rp_data4,file, row.names = FALSE)
    })
  
  output$download_rp5 <- downloadHandler(
    filename = function() {
      "RP_data_step5.csv"
    },
    content = function(file) {
      rp_data5<-loadData_site_rp_step5()
      write.csv(rp_data5,file, row.names = FALSE)
    })
  
  output$download_rp6 <- downloadHandler(
    filename = function() {
      "RP_data_step6.csv"
    },
    content = function(file) {
      rp_data6<-loadData_site_rp_step6()
      write.csv(rp_data6,file, row.names = FALSE)
    })
  
  output$download_rp7 <- downloadHandler(
    filename = function() {
      "RP_data_step7.csv"
    },
    content = function(file) {
      rp_data7<-loadData_site_rp_step7()
      write.csv(rp_data7,file, row.names = FALSE)
    })
  
  #Back to Login Page from Forgot Password
  observeEvent(input$back_signin3_p, {
    shinyjs::disable("back_signin3_p")
    shinyjs::disable("get_pass_p")
    
    shinyjs::show("Login_page")
    shinyjs::hide("Forgot_pass_page")
    
    shinyjs::enable("back_signin3_p")
    shinyjs::enable("get_pass_p")
  })
  
  #Back to Login Page from Load to hadoop page
  observeEvent(input$back_signin4_p, {
    shinyjs::disable("back_signin4_p")
    shinyjs::disable("Hadoop_login_p")
    
    shinyjs::show("Admin_Login_page")
    shinyjs::hide("load_to_hadoop_page")
    
    shinyjs::enable("back_signin4_p")
    shinyjs::enable("Hadoop_login_p")
    
    updateTextInput(session,inputId = "hadoop_login_id", value ="")
    updateTextInput(session,inputId = "hadoop_login_pass", value ="")
    shinyjs::hide("download_data_")
    
  })
  
  ######################## Forgot password ###########################
  observeEvent(input$get_pass_p,{
    shinyjs::disable("get_pass_p")
    
    updateTextInput(session,inputId = "pass_signup_id", value ="")
    
    signup_data<-readRDS("Signup_data.Rda")
    match_row_p=match(tolower(input$pass_signup_id),tolower(signup_data$Signup_email_ID),nomatch =0)
    if (match_row_p!=0) {
      pass_match_p=signup_data$Signup_password[match_row_p]
      showModal(modalDialog(title = "Password sent!","Your password has been sent on the registered Email ID."))
      
      #Send email
      get_pass_sender <- "zz_sm6496@centrica.com" # Replace with a valid address
      get_pass_recipients <- input$pass_signup_id
      get_pass_html_body <- paste0("<html><head>
                                 <style>
                                 body{font-family:Calibri, sans-serif;}
                                 table{border-left:1px solid #000000;border-top:1px solid #000000;}
                                 table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                                 table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                                 </style>
                                 </head><body><p>Hi,<br>",
                                   "Please find your password for login-in to BCP Tool.<br><br>
                                 Password: ",pass_match_p,
                                   "<br><br>
                                 Thanks,<br>BCP Team</p></body></html>")
      get_pass_email <- send.mail(from = get_pass_sender,
                                  to = get_pass_recipients,
                                  subject="Forgot Password- BCP Tool",
                                  body = get_pass_html_body,
                                  smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                                  authenticate = FALSE,
                                  html = TRUE,
                                  send = FALSE)
      get_pass_email$send()
      
    }
    else
    {
      showModal(modalDialog(title = "Check Email!","The Email ID you entered is invalid."))
    }
    shinyjs::enable("get_pass_p")
  })
  

  
  
  #################### Login to portal #################
  
  observeEvent(input$Login,{
    signup_data<-readRDS("Signup_data.Rda")
    
    session_user$Data<-tolower(input$login_id)
    
    updateTextInput(session,inputId = "login_id", value ="")
    updateTextInput(session,inputId = "login_pass", value ="")
    
  
    #print(session_user$Data)
    match_row_p=match(tolower(input$login_id),tolower(signup_data$Signup_email_ID),nomatch =0)
    pass_match_p=signup_data$Signup_password[match_row_p]
    user_details_p=signup_data[match_row_p,]
    
    # login_user_email_p=input$login_id
    
    if (match_row_p!=0){
      if (input$login_pass==pass_match_p){
        if (length(which(user_details_p=="Yes"))!=0) {
          #saveRDS(input$login_id,"Current_user.Rda")
          shinyjs::disable("signup_link")
          shinyjs::disable("admin_login")
          shinyjs::disable("Login")
          shinyjs::hide("Login_page")
          shinyjs::show("UI_page") 
          
          
          #Modify CRT access
          CRT_mod_access_p<-as.character(signup_data[match_row_p,4])
          if ((CRT_mod_access_p=="Yes")){
            
            shinyjs::hide("CRT_mod_log")
            shinyjs::show("CRT_mod_pg") 
            
          }
         
          
          #Site/IMT access
          Site_imt_access_p<-as.character(signup_data[match_row_p,5])
          if ((Site_imt_access_p=="Yes")){
            shinyjs::hide("IMT_mod_log")
            shinyjs::show("IMT_mod_pg") 
          }
          
          #Site/RnP access
          Site_rp_access_p<-as.character(signup_data[match_row_p,6])
          if ((Site_rp_access_p=="Yes")){
            shinyjs::hide("RP_mod_log")
            shinyjs::show("RP_mod_pg") 
          }
          
          #Site/NR access
          Site_nr_access_p<-as.character(signup_data[match_row_p,7])
          if ((Site_nr_access_p=="Yes")){
            shinyjs::hide("NR_mod_log")
            shinyjs::show("NR_mod_pg") 
          }
          
          #All incidents access
          all_INC_access_p<-as.character(signup_data[match_row_p,8])
          if ((all_INC_access_p=="Yes")){
            shinyjs::hide("all_inc_log")
            shinyjs::show("all_inc_pg") 
          }
          
          # Audit trail access
          audit_access_p<-as.character(signup_data[match_row_p,9])
          if ((audit_access_p=="Yes")){
            shinyjs::hide("audit_log")
            shinyjs::show("audit_pg") 
          }
          
          # Close incidents access
          close_inc_access_p<-as.character(signup_data[match_row_p,10])
          if ((close_inc_access_p=="Yes")){
            shinyjs::hide("Close_mod_log")
            shinyjs::show("Close_mod_pg") 
          }
          
          # Sit rep access
          sit_rep_access_p<-as.character(signup_data[match_row_p,14])
          if ((sit_rep_access_p=="Yes")){
            shinyjs::hide("Sit_rep_mod_log")
            shinyjs::show("Sit_rep_mod_pg") 
          }
          
          shinyjs::enable("signup_link")
          shinyjs::enable("admin_login")
          shinyjs::enable("Login")
        }
        else {
          showModal(modalDialog(title = "User doesn't have access to any page.","ERROR"))
        }
      }
      else{showModal(modalDialog(title = "Invalid Password!","ERROR"))}
    }
    else{showModal(modalDialog(title = "Invalid Email!","ERROR"))}
    
  })
  
  
  #admin login
  observeEvent(input$Admin_login_p,{
    if ((input$admin_login_id=="admin") & (input$admin_login_pass=="admin")){
      shinyjs::hide("Admin_Login_page")
      shinyjs::show("Admin_UI_page") 
    }
    else {
      showModal(modalDialog(title = "Incorrect username/password","ERROR"))
    }
    updateTextInput(session,inputId = "admin_login_id", value ="")
    updateTextInput(session,inputId = "admin_login_pass", value ="")
  })
  
  
  # logout
  observeEvent(input$logout, {
    shinyjs::hide("UI_page") 
    shinyjs::show("Login_page")
    
    # Reset all pages to original form so that the access can be checked again
    #Audit trail
    shinyjs::show("audit_log")
    shinyjs::hide("audit_pg")
    
    #CRT mod page
    shinyjs::show("CRT_mod_log")
    shinyjs::hide("CRT_mod_pg")
    shinyjs::hide("add_site_form")
    shinyjs::hide("amend_site_form")
    shinyjs::hide("ammend_comms_form")
    shinyjs::hide("crt_ops_form")
    updateAwesomeRadio(session, "Add_or_amend_or_comms_or_ops", label = "Select action:", 
                       choices = c("Add Site", "Amend Site", "Amend Comms", "Amend Operational Details"),
                       status = "primary",selected="")
    
    #IMT mod page
    shinyjs::show("IMT_mod_log")
    shinyjs::hide("IMT_mod_pg")
    
    #NR mod page
    shinyjs::show("NR_mod_log")
    shinyjs::hide("NR_mod_pg")
    
    #All incidents page
    shinyjs::show("all_inc_log")
    shinyjs::hide("all_inc_pg")
    
    #RP mod page
    shinyjs::show("RP_mod_log")
    shinyjs::hide("RP_mod_pg") 
    
    #Close incidents page
    shinyjs::show("Close_mod_log")
    shinyjs::hide("Close_mod_pg") 
    
    #Sit rep page
    shinyjs::show("Sit_rep_mod_log")
    shinyjs::hide("Sit_rep_mod_pg") 
  })
  
  #Admin logout
  observeEvent(input$logout_admin, {
    shinyjs::hide("Admin_UI_page") 
    shinyjs::show("Admin_Login_page")
  })
  
  
  
  ######################## Sign up to Portal ###########################
  
  approval_data<-reactiveValues()
  approval_data$Data<-readRDS(file = "Signup_data.Rda")
  
  observeEvent(input$signup_but, {
    shinyjs::disable("signup_but")
    
    y<-data.table(
      Signup_email_ID=c(input$signup_id),
      Signup_lan_ID=c(input$signup_lan),
      Signup_password=password(n=10,special=c("@","#","$","&","*")),
      CRT=c(''),
      Site_IMT=c(''),
      Sit_rep=c(''),
      Resource_and_planning=c(''),
      National_resilience=c(''),
      All_incidents=c(''),
      Audit_trail=c(''),
      Close_incident=c(''),
      Admin=c(''),
      Requested_on=format(Sys.time(), "%Y%m%d-%H%M%OS"),
      Last_change_dt=format(Sys.time(), "%Y%m%d-%H%M%OS")
    )
    
    write.csv(y,"data_y.csv")
    
    #Checks in email
    isValidEmail <- function(x) {
      grepl("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>", as.character(x), ignore.case=TRUE)
    }
    if (isValidEmail(y$Signup_email_ID)) {
      if (tolower(y$Signup_email_ID) %in% tolower(unique(approval_data$Data$Signup_email_ID))){
        showModal(modalDialog(title = "Email id already registered","Account already exists!"))
      }
      
      else if (length(grep("britishgas.co.uk|centrica.com",tolower(y$Signup_email_ID)))==1){
        approval_data$Data<-rbind(approval_data$Data,y,fill=TRUE)
        saveRDS(approval_data$Data,file="Signup_data.Rda")
        showModal(modalDialog(title = "Sign up successful!","A confirmation email has been sent."))
        
        #Send email
        signup_sender <- "zz_sm6496@centrica.com" # Replace with a valid address
        signup_recipients <- c(y$Signup_email_ID)  #,"zz_sm6496@centrica.com","rahul.dhawan@centrica.com")
        signup_html_body <- paste0("<html><head>
                                   <style>
                                   body{font-family:Calibri, sans-serif;}
                                   table{border-left:1px solid #000000;border-top:1px solid #000000;}
                                   table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                                   table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                                   </style>
                                   </head><body><p>Hi,<br><br>Your sign up is successful.",
                                   "We are sending below your password for your reference.<br><br>
                                   Password: ",y$Signup_password,
                                   "<br><br>You can login after you receive approval message.<br><br>
                                   Thanks,<br>BCP Team</p></body></html>")
        signup_email <- send.mail(from = signup_sender,
                                  to = signup_recipients,
                                  subject="Sign up successful- BCP Tool",
                                  body = signup_html_body,
                                  smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                                  authenticate = FALSE,
                                  html = TRUE,
                                  send = FALSE)
        signup_email$send()
      }
      else {showModal(modalDialog(title = "Not a valid Email ID","ERROR"))}
    }
    else {showModal(modalDialog(title = "Incorrect email","ERROR"))}
    
    updateTextInput(session,inputId = "signup_id", value ="")
    updateTextInput(session,inputId = "signup_lan", value ="")
    shinyjs::enable("signup_but")
    
    }
    
  )
  
  
  ####################### Admin approval page ##########################
  
  #manage access requests-pankaj
  output$Main_table_access<-renderDataTable({
    z_access_pending<-approval_data$Data
    z_access_pending<-select(z_access_pending,-c("Signup_password"))
    
    z_access_pending[["Actions"]]<-
      paste0('
             <div class="btn-group" role="group" aria-label="Basic example">
             <button type="button" class="btn btn-secondary delete" id=approve_',1:nrow(z_access_pending),'>Grant access</button><br><br>
             </div>
             ')
    datatable(z_access_pending,options = list(dom = 'ftpli',scrollX=TRUE),rownames = FALSE,
              escape=F)})
  
  observeEvent(input$lastClick,
               {
                 if (input$lastClickId%like%"approve")
                 {
                   selected_row=as.numeric(gsub("approve_","",input$lastClickId))
                   old_row=approval_data$Data[selected_row]
                   
                   grant_access_modal<-reactive(fluidPage(
                     
                     h3(strong("Grant/revoke access for users"),align="center"),
                     hr(),
                     
                     fluidRow(column(6,paste0("User email ID: ",old_row$Signup_email_ID))),
                     hr(),
                     fluidRow(column(6,paste0("User lan ID: ",old_row$Signup_lan_ID))),
                     hr(),
                     
                     fluidRow(column(6,selectInput("CRT_acc","CRT (raise/amend):",c("", "Yes","No"),selected = old_row$CRT))),
                     fluidRow(column(6,selectInput("Site_IMT_acc","Site/IMT:",c("", "Yes","No"),selected = old_row$Site_IMT))),
                     fluidRow(column(6,selectInput("Resource_and_planning_acc","Resource and planning:",c("", "Yes","No"),selected = old_row$Resource_and_planning))),
                     fluidRow(column(6,selectInput("National_resilience_acc","National resilience:",c("", "Yes","No"),selected = old_row$National_resilience))),
                     fluidRow(column(6,selectInput("All_incidents_acc","All incidents:",c("", "Yes","No"),selected = old_row$All_incidents))),
                     fluidRow(column(6,selectInput("Audit_trail_acc","Audit trail:",c("", "Yes","No"),selected = old_row$Audit_trail))),
                     fluidRow(column(6,selectInput("Close_incident_acc","Close incident:",c("", "Yes","No"),selected = old_row$Close_incident))),
                     fluidRow(column(6,selectInput("Admin_acc","Admin access:",c("", "Yes","No"),selected = old_row$Admin))),
                     fluidRow(column(6,selectInput("Sit_rep_acc","Situation report:",c("", "Yes","No"),selected = old_row$Sit_rep))),
                     
                     hr(),
                     
                     actionButton("access_approved","Confirm changes"),
                     
                     tags$script(HTML("$(document).on('click', '#save_changes', function () {
                                      var list_value=[]
                                      for (i = 0; i < $( '.new_input' ).length; i++)
                                      {
                                      list_value.push($( '.new_input' )[i].value)
                                      }
                                      Shiny.onInputChange('newValue', list_value)
                 });"))))
                   showModal(modalDialog(grant_access_modal(),easyClose=TRUE))
                 }})
  
  
  observeEvent(input$access_approved, {
    shinyjs::disable("access_approved")
    
    selected_row=as.numeric(gsub("approve_","",input$lastClickId))
    old_row=approval_data$Data[selected_row]

    approval_data$Data[selected_row]<-data.table(
      Signup_email_ID=c(old_row$Signup_email_ID),
      Signup_lan_ID=c(old_row$Signup_lan_ID),
      Signup_password=c(old_row$Signup_password),
      CRT=c(input$CRT_acc),
      Site_IMT=c(input$Site_IMT_acc),
      
      Resource_and_planning=c(input$Resource_and_planning_acc),
      National_resilience=c(input$National_resilience_acc),
      All_incidents=c(input$All_incidents_acc),
      Audit_trail=c(input$Audit_trail_acc),
      Close_incident=c(input$Close_incident_acc),
      Admin=c(input$Admin_acc),
      
      Requested_on=c(old_row$Requested_on),
      Last_change_dt=format(Sys.time(), "%Y%m%d-%H%M%OS"),
      Sit_rep=c(input$Sit_rep_acc)
    )

    
    saveRDS(approval_data$Data,"Signup_data.Rda")
    removeModal()
    
    user_access_summary <- htmlTable(approval_data$Data[selected_row], rnames = FALSE)
    
    
    
    ################ Approval mail #################
    approval_sender <- "zz_sm6496@centrica.com" # Replace with a valid address "Rahul.Dhawan@centrica.com"
    approval_recipients <- c(old_row$Signup_email_ID) #,"abhiram.patankar@centrica.com","zz_sm6496@centrica.com","Rahul.Dhawan@centrica.com" )
    approval_html_body <- paste0("<html><head>
                               <style>
                               body{font-family:Calibri, sans-serif;}
                               table{border-left:1px solid #000000;border-top:1px solid #000000;}
                               table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                               table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                               </style>
                               </head><body><p>Hi,<br><br>Success!<br>You can now sign-in into the incident response tool.<br>",
                                 "You have access to the following tabs- ",
                                 user_access_summary,
                                 "Link: https://azsu-p-app-026.azure.uk.centricaplc.com:3939/connect/#/apps/231/access",
                                 "<br> <br>
                               Thanks, <br> Business assurance team</p></body></html>")
    approval_email <- send.mail(from = approval_sender,
                                to = approval_recipients,
                                subject="BCP tool approval",
                                body = approval_html_body,
                                smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                                authenticate = FALSE,
                                html = TRUE,
                                send = FALSE)
    approval_email$send()
    
    
    shinyjs::enable("access_approved")
  }
  )
  
  ###################### New incident page  ####################
  
  #### Modify dropdowns according to the site selected
  updatebusarea<-function(session){
    req(input$Site)
    business_filter<-sqldf(paste0("select * from Recommendations where site = '",input$Site,"'"))
    updateAwesomeCheckboxGroup(session,inputId = "Bus_Ar",label="Business Area",choices=c(unique(business_filter$Business_Area)))}
  observeEvent(input$Site,updatebusarea(session))  
  
  updateproarea1<-function(session){
    req(input$Site)
    process_filter_a<-sqldf(paste0("select * from Recommendations where site = '",input$Site,"'"))
    updateAwesomeCheckboxGroup(session,inputId = "pro_Ar",label="Process Area", choices=c(unique(process_filter_a$Process)))}
  observeEvent(input$Site,updateproarea1(session))
  
  updateproarea<-function(session){
    req(input$Bus_Ar)
    process_filter_a<-sqldf(paste0("select * from Recommendations where site = '",input$Site,"'"))
    process_filter<- process_filter_a %>% filter(Business_Area %in% input$Bus_Ar)
    updateAwesomeCheckboxGroup(session,inputId = "pro_Ar", label="Process Area",choices=c(unique(process_filter$Process)))}
  observeEvent(input$Bus_Ar,updateproarea(session))
  
  #Get recommendations
  observeEvent(input$get_reco,{
    if (input$get_reco=="Show"){
      shinyjs::show("Get_reco_new_inc")}
    else if 
    (input$get_reco=="Hide") { 
      shinyjs::hide("Get_reco_new_inc")}
  })
  
  #Show details for conn required
  observeEvent(input$comm_req,{
    if (input$comm_req==TRUE){
      shinyjs::show("comm_requ_details")}
    else if 
    (input$comm_req==FALSE) {
      shinyjs::hide("comm_requ_details")}
  })
  
  #other sys req
  observeEvent(input$systems,{
    if ('Other' %in% input$systems==TRUE){
      shinyjs::show("other_sys_req")}
    else {
      shinyjs::hide("other_sys_req")
    }
  })
  
  observeEvent(input$facilities,{
    if ('Other' %in% input$facilities==TRUE){
      shinyjs::show("other_fac_req")}
    else {
      shinyjs::hide("other_fac_req")
    }
  })
  
  observeEvent(input$operational_call,{
    if (input$operational_call==TRUE){
      shinyjs::show("ops_call_details")}
    else {
      
      shinyjs::hide("ops_call_details")
    }
  })
  
  
  
  #Disable Add site button if selections have not been made
  observe({
    mandatoryFilled <-
      vapply(fieldsMandatory,
             function(x) {
               !is.null(input[[x]]) && input[[x]] != ""
             },
             logical(1))
    mandatoryFilled <- all(mandatoryFilled)
    shinyjs::toggleState(id = "addsite", condition = mandatoryFilled)
  })    
  
  
  
  
  #Disable Submit button if no sites have been addded to the incident
  observe({
    if (count(subset(vals$Data,Site!=""))>0) {
      shinyjs::enable("submit")
    } else {
      shinyjs::disable("submit")
    }
  })
  
  
  
  #saveData function
  saveData <- function(session) {

    time_final<-format(Sys.time(), "%Y%m%d-%H%M%OS")
    vals$Data$Date_time<-time_final
    write.csv(x = vals$Data, file = paste0("Data_crt_site/Mydata_site_",format(Sys.time(), "%Y%m%d-%H%M%OS"),".csv"))
  }

  
  #Make All incidents data a reactive data
  all_INC_data<-reactiveValues()
  all_INC_data$Data<-loadData_crt_site()
  
  
  #action to take when add site button is pressed
  vals<-reactiveValues()
  vals$Data<-data.table(
    Site=c(''),
    Business_area=c(''),
    Process=c(''),
    Description=c(''),
    Teams=c(''),
    People=c(''),
    Customer_contact=c(''),
    Systems=c(''),
    Systems_other=c(''),
    Facilities=c(''),
    Facilities_other=c(''),
    Vulnerable_customers=c('')
  )
 
  observeEvent(input$addsite,{
    shinyjs::disable(("addsite"))
    
    add_site_info<-data.table(
      Site=c(input$Site),
      Business_area=c(paste(input$Bus_Ar,collapse="-")),
      Process=c(paste(input$pro_Ar, collapse="-")),
      Description=c(paste(input$desc)),
      Teams=c(paste(input$eng_team, collapse="-")),
      People=c(paste(input$People)),
      Customer_contact=c(paste(input$cust_cont, collapse="-")),
      
      Systems=c(ifelse('Other' %in% input$systems==TRUE,paste(append(input$systems,input$other_system),collapse="-"),paste(input$systems,collapse="-"))),
      Systems_other=c(ifelse('Other' %in% input$systems==TRUE,paste(input$other_system),c(''))),
      
      Facilities=c(ifelse('Other' %in% input$facilities==TRUE,paste(append(input$facilities,input$other_fac),collapse="-"),paste(input$facilities,collapse="-"))),
      Facilities_other=c(ifelse('Other' %in% input$facilities==TRUE,paste(input$other_fac),c(''))),
      Vulnerable_customers=c(input$vuln_cust)
    )
    
    vals$Data<-rbind(add_site_info,vals$Data,fill=TRUE)
    
    vals$Data<-subset(vals$Data,Site!="")
    
    #display details of added site below
    output$tempSite<-renderUI({
      fluidPage(
        h3(strong("The below site/s will be added to the incident")),
        hr(),
        column(12,dataTableOutput("Main_table")),
        tags$script(HTML('$(document).on("click", "input", function () {
                         var checkboxes = document.getElementsByName("row_selected");
                         var checkboxesChecked = [];
                         for (var i=0; i<checkboxes.length; i++) {
                         if (checkboxes[i].checked) {
                         checkboxesChecked.push(checkboxes[i].value);
                         }
                         }
                         Shiny.onInputChange("checked_rows",checkboxesChecked);
          })')),
        tags$script("$(document).on('click', '#Main_table button', function () {
                        Shiny.onInputChange('lastClickId',this.id);
                        Shiny.onInputChange('lastClick', Math.random())
          });"))
    })
    shinyjs::reset("form")
    shinyjs::enable(("addsite"))
  })
  
  
  
  output$Main_table<-renderDataTable({
    DT=vals$Data
    DT<-sqldf("select Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Facilities,Vulnerable_customers from DT")
    #print(DT)
    DT[["Actions"]]<-
      paste0('
             <div class="btn-group" role="group" aria-label="Basic example">
             <button type="button" class="btn btn-secondary delete" id=delete_',1:nrow(vals$Data),'>Delete</button>
             </div>
             ')
    
    datatable(DT, escape=F, options=list(scrollX=TRUE))})
  
  
  observeEvent(input$lastClick,
               {
                 if (input$lastClickId%like%"delete")
                 {
                   row_to_del=as.numeric(gsub("delete_","",input$lastClickId))
                   vals$Data=vals$Data[-row_to_del]
                 }
               }) 
  
  
  # Get recommendations
  output$reco_new<-DT::renderDataTable(
    Recommendations %>% filter (Recommendations$Business_Area %in% unlist(strsplit(as.character(vals$Data$Business_area),"-")) & 
                                  Recommendations$Process %in% unlist(strsplit(as.character(vals$Data$Process),"-")) & 
                                  Recommendations$Site %in% unlist(strsplit(as.character(vals$Data$Site),"-"))),
    editable=FALSE,
    options = list(scrollX=TRUE),escape=F)
  

  
  
  
  ######################### Submit new Incident ########################
  observeEvent(input$submit, {
    
    shinyjs::disable("submit")
    shinyjs::show("submit_msg")
    
    #Get max INC available to assign new INC for the current submission
    All_data<-loadData_crt_site()
    lat_INC<-max(All_data$INC,na.rm = TRUE)
    vals$Data$INC<-lat_INC+1
    current_user_p<-session_user$Data
    
    vals$Data$Changed<-c('')
    vals$Data$Is_current<-1
    
    vals$Data$User<-current_user_p
    
    crt_comms<-data.table(
      INC=vals$Data$INC,
      Comms_required=c(input$comm_req),
      Incident_number=ifelse(input$comm_req==FALSE,c(''),c(input$inc_no)),
      SLT=ifelse(input$comm_req==FALSE,c('FALSE'),c(input$head_comm)),
      IMT=ifelse(input$comm_req==FALSE,c('FALSE'),c(input$imt)),
      People_comms=ifelse(input$comm_req==FALSE,c('FALSE'),c(input$people_comms)),
      Operations_invoked=ifelse(input$comm_req==FALSE,c('FALSE'),c(input$operations_invok)),
      Changed=vals$Data$Changed,
      Is_current=vals$Data$Is_current,
      Date_time=format(Sys.time()+10, "%Y%m%d-%H%M%OS"),
      User=vals$Data$User)
    write_csv(crt_comms[1],path=paste0("Data_crt_comms/Mydata_comms_",format(Sys.time()+10, "%Y%m%d-%H%M%OS"),".csv"))
    
    crt_ops<-data.table(
      INC=vals$Data$INC,
      Operational_call=c(input$operational_call),
      Date_op=ifelse(input$operational_call=='FALSE',c(''),c(paste(input$enter_date))),
      Time_op=ifelse(input$operational_call=='FALSE',c(paste(Sys.Date())),c(format(input$enter_time,"%H:%M"))), 
      Time_op1=ifelse(input$operational_call==FALSE,c(paste(Sys.Date())),c(paste(input$enter_time))),
      Changed=vals$Data$Changed,
      Is_current= vals$Data$Is_current,
      Date_time=format(Sys.time()+12, "%Y%m%d-%H%M%OS"),
      User=vals$Data$User)
    write_csv(crt_ops[1],path = paste0("Data_crt_ops/Mydata_ops_",format(Sys.time()+12, "%Y%m%d-%H%M%OS"),".csv"))
    
    comms1=subset(crt_comms[1],select=-c(Changed,Is_current,User,Date_time))
    ops1=subset(crt_ops[1],select=-c(Time_op1,Changed,Is_current,User,Date_time))
    
    crt_site_temp<-subset(vals$Data,select=-c(Systems_other,Facilities_other))
    comms_ops<-merge(comms1,ops1,by="INC")
    #comms_ops_site<-merge(crt_site,comms_ops,by="INC")
    comms_ops_site<-sqldf("select a.*,b.Comms_required,b.Incident_number,b.SLT,b.IMT,b.People_comms,b.Operations_invoked,
                          b.Operational_call,b.Date_op,b.Time_op from crt_site_temp a left join comms_ops b on a.INC=b.INC")
    
    #Send email for new incident
    sender <- "zz_sm6496@centrica.com" # Replace with a valid address
    recipients <- current_user_p # Replace with one or more valid addresses
    
    # Convert the data frame into an HTML Table
    y <- htmlTable(comms_ops_site  %>% select(-User,-INC,-Changed,-Is_current) , rnames = FALSE)
    
    crt_info_new <- comms_ops_site
    crt_new_open_tm<-format(Sys.time()+10, "%Y-%m-%d %H:%M:%OS")
    #   as.Date(substr(crt_comms_open_tm,1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_comms_open_tm,10,15),format="%H%M%S") ,"<br><br>
    # Define body of email
    html_body <- paste0('<html><head>
                        <style>
                        body{font-family:BG Flame, sans-serif;}
                        table{border-left:0.1px solid #000000;border-top:0.1px solid #000000;width: 1000px;}
                        table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        img {width: 1000px;}
                        </style>
                        </head><body><table>
                         
                         
                        <tr><td><img src=\"https://azsu-p-app-026.azure.uk.centricaplc.com:3939/content/230/_w_13f9edc3/new_incident.jpg\"></td></tr>',
                        "<tr><td><br>
                        <b>INC: </b>",paste0(vals$Data$INC[1]),"<br><br>
                        <b>Site Impacted: </b>",paste0(vals$Data$Site,collapse="-"),"<br><br>
                        <b>Business Area Impacted: </b>",paste0(vals$Data$Business_area,collapse="-"),"<br><br>
                        <b>Process Area Impacted: </b>",paste0(vals$Data$Process,collapse="-"),"<br><br>
                        <b>Teams Impacted: </b>",paste0(vals$Data$Teams,collapse="-"),"<br><br>
                        <b>Incident Description: </b>",paste0(vals$Data$Description,collapse="-"),"<br><br>
                        <b>Last update to the incident: </b> Customer Response Team has added a new incident. Below are the details of the new incident. <br><br>",y," <br>
                         <b>Incident open date: </b>",crt_new_open_tm," ","<br><br>
                         <b>Incident latest update date: </b>",crt_new_open_tm," ","<br><br>
                         <b>Last user to update BCP: </b>",paste0(vals$Data$User[1],collapse="-"),"<br><br>
                        
                        </td></tr>
                        
                        
                        </table></body></html>")
    
    email_new_inc <- send.mail(from = sender,
                               to = recipients,
                               subject=paste0("Incident ",vals$Data$INC[1]," | New | ",session_user$Data),
                               body = html_body,
                               smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                               authenticate = FALSE,
                               # inline=TRUE,
                               html = TRUE,
                               send = FALSE)
    email_new_inc$send()
    
    
    
    
    shinyjs::hide("error")
    
    tryCatch({
      
      
      saveData(formData())
      
      all_INC_data$Data<-loadData_crt_site()

      shinyjs::reset("form")
      shinyjs::hide("form")
      
    },
    error = function(err) {
      shinyjs::html("error_msg", err$message)
      shinyjs::show(id = "error", anim = TRUE, animType = "fade")
    },
    finally = {
      shinyjs::enable("submit")
      shinyjs::hide("submit_msg")
    })
    
    
    #### empty table for site IMT/NR/RP- New Inc #####
    vals2_imt$Data<-data.table(
      INC=c(vals$Data$INC),
      Site=c(vals$Data$Site),
      Who_is_impacted=c(''),
      Estimated_volume_of_users_impacted=c(''),
      Root_cause=c(''),
      Timescales_for_recovery=c(''),
      IMT=c(''),
      Comms=c(''),
      Site_continuity=c(''),
      Description=c(''),
      Changed_imt=c(''),
      Is_current_imt=1,

      Date_time_imt=format(Sys.time(), "%Y%m%d-%H%M%OS")
    )
    # write IMT table
    write_csv(vals2_imt$Data, path = paste0("Data_site_IMT/IMT_Mydata", format(Sys.time(), "%Y%m%d-%H%M%S"), ".csv"))
    
    # empty table for site NR- New Inc
    vals3_nr$Data<-data.table(
      INC=c(vals$Data$INC),
      Site=c(vals$Data$Site),
      Action_required=c(''),
      Sungard_required=c(''),
      Sungard_available=c(''),
      Sungard_accessible=c(''),
      Escalation_required=c(''),
      Escalated_to=c(''),
      Comments=c(''),
      Changed_nr=c(''),
      Is_current_nr=1,

      Date_time_nr=format(Sys.time(), "%Y%m%d-%H%M%OS")
      
    )
    # write NR table
    write_csv(vals3_nr$Data, path = paste0("Data_site_NR/NR_Mydata", format(Sys.time(), "%Y%m%d-%H%M%S"), ".csv"))
    
    # enmpty table for RnP- New Inc
    Recommendations_rp <- Recommendations %>% filter (Recommendations$Business_Area %in% unlist(strsplit(as.character(vals$Data$Business_area),"-")) &
                                                        Recommendations$Process %in% unlist(strsplit(as.character(vals$Data$Process),"-")) &
                                                        Recommendations$Site %in% unlist(strsplit(as.character(vals$Data$Site),"-")))
    vals4_rp_step4$Data<-data.table(
      INC_rp=c(vals$Data$INC),
      Site_rp=c(Recommendations_rp$Site),
      Business_area_rp=c(Recommendations_rp$Business_Area),
      Process_rp=c(Recommendations_rp$Process),
      Team_name_rp=c(Recommendations_rp$`Team Name`),
      Priority_rp=c(Recommendations_rp$`Priority rating`),
      BG_site_rp=c(Recommendations_rp$`Confirmed BG site synergy`),
      Third_party_rp=c(Recommendations_rp$`3rd party site synergy`),
      Timescale_rp=c(''),
      IVR_messaging=c(''),
      Online_messaging=c(''),
      Line_closure=c(''),
      Line_closed_Free_Text=c(''),
      Call_routing=c(''),
      BG_site_rp_new=c(''),
      Third_Party_new=c(''),
      Changed_rp=c(''),
      Is_current_rp=1,
  
      Date_time_rp=format(Sys.time(), "%Y%m%d-%H%M%OS")
    )
    write_csv(vals4_rp_step4$Data, path = paste0("Data_site_RP/RP_Mydata", format(Sys.time(), "%Y%m%d-%H%M%S"), ".csv"))
    
    
    
    
    #Reset everything to original Null state
    vals$Data<-data.table(
      INC=0,
      Site=c(''),
      Business_area=c(''),
      Process=c(''),
      Description=c(''),
      Teams=c(''),
      People=c(''),
      Customer_contact=c(''),
      Systems=c(''),
      Systems_other=c(''),
      Facilities=c(''),
      Facilities_other=c(''),
      Vulnerable_customers=c(''))
    
    crt_comms<-data.table(
      INC=0,
      Comms_required=c(''),
      Incident_number=c(''),
      SLT=c(''),
      IMT=c(''),
      People_comms=c(''),
      Operations_invoked=c(''))
    
    crt_ops<-data.table(
      INC=0,
      Operational_call=c(''),
      Date_op=c(''),
      Time_op=c(''),
      Time_op1=c(''))
    
    updateTimeInput(session,"enter_time",value="2019-09-09 BST")
    
    output$tempSite<-renderUI({
      fluidPage(
        tags$script(HTML('$(document).on("click", "input", function () {
                         var checkboxes = document.getElementsByName("row_selected");
                         var checkboxesChecked = [];
                         for (var i=0; i<checkboxes.length; i++) {
                         if (checkboxes[i].checked) {
                         checkboxesChecked.push(checkboxes[i].value);
                         }
                         }
                         Shiny.onInputChange("checked_rows",checkboxesChecked);
          })')),
        tags$script("$(document).on('click', '#Main_table button', function () {
                        Shiny.onInputChange('lastClickId',this.id);
                        Shiny.onInputChange('lastClick', Math.random())
          });"))
    })
    
    All_data<-loadData_crt_site()
    lat_INC<-max(All_data$INC,na.rm = TRUE)
    sendSweetAlert(
      session = session,
      title = "Success !!",
      text = paste("Incident number ",lat_INC,"raised!"),
      type = "success"
    )
    
    #updateTimeInput(session,"enter_time",value="2019-09-09 BST")
    # 
    crt_data$Data<-loadData_crt_site()
    imt_data$Data<-loadData_site_imt()
    nr_data$Data<-loadData_site_nr()
   
    
    shinyjs::reset("form")
    shinyjs::show("form")
    shinyjs::reset("form1")
    shinyjs::show("form1")
    
    updateProgressBar(session = session, id = "crt_invol", value = length(unique(loadData_crt_site()$INC))*100/length(unique(loadData_crt_site()$INC)))
    updateProgressBar(session = session, id = "sit_rep_invol", value = length(unique(loadData_site_rep()$INC))*100/length(unique(loadData_crt_site()$INC)))
    updateProgressBar(session = session, id = "site_invol", value = count_imt_involvement()*100/length(unique(loadData_crt_site()$INC)))
    updateProgressBar(session = session, id = "rp_invol", value = count_rp_involvement()*100/length(unique(loadData_crt_site()$INC)))
    updateProgressBar(session = session, id = "nr_invol", value = count_nr_involvement()*100/length(unique(loadData_crt_site()$INC)))
  })
  
  
  
  
  #All incidents recorded
  output$All_inc <- DT::renderDataTable(
    #filter(all_INC_data$Data,Is_current==1) ,rownames=FALSE,options=list(scrollX=TRUE,autowidth=TRUE)) 
    all_INC_data$Data[,-1],rownames=FALSE,options=list(scrollX=TRUE,autowidth=TRUE)) 
  
  #Download data
  output$downloaddata <- downloadHandler(
    filename = function() {
      "All_incidents.csv"
    },
    content = function(file) {
      write.csv(loadData_new(),file, row.names = FALSE)
    })
  
  
  ####################### Update CRT #####################
  
  #Refresh incident numbers in CRT modifications
  
  observeEvent(input$Refresh_btn,{
    updateSelectInput(session,inputId = "CRT_mod_inc",label="Enter incident number:",
                      choices=c("",unique(all_INC_data$Data$INC)),selected="")
  })
  
  #check for closed incidents
  observeEvent(input$CRT_mod_inc,{
    req(input$CRT_mod_inc)
    All_data_mod<-loadData_crt_site()
    All_data_mod<-sqldf(paste0("select 
                               * from All_data_mod where INC = '",input$CRT_mod_inc,"'","and Is_current=1"))
    
    if (!is.na(All_data_mod$Status[1]))   
    {
      updateSelectInput(session,inputId = "CRT_mod_inc",label="Enter incident number:",
                       choices=c("",unique(all_INC_data$Data$INC)),selected="")
      sendSweetAlert(
        session = session,
        title = "Warning !!!",
        text = paste("Incident has been closed."),
        type = "warning"
      )}
  })
 
  
  ####### Add or amend or comms or ops radio button ##########
  observeEvent(input$Add_or_amend_or_comms_or_ops,{

    
    if (input$Add_or_amend_or_comms_or_ops=="Add Site") {
      shinyjs::show("add_site_form")
      shinyjs::hide("amend_site_form")
      shinyjs::hide("ammend_comms_form")
      shinyjs::hide("crt_ops_form")
    }
    else if (input$Add_or_amend_or_comms_or_ops=="Amend Site") {
      shinyjs::hide("add_site_form")
      shinyjs::show("amend_site_form")
      shinyjs::hide("ammend_comms_form")
      shinyjs::hide("crt_ops_form")
    }
    else if (input$Add_or_amend_or_comms_or_ops=="Amend Comms") {
      shinyjs::hide("add_site_form")
      shinyjs::hide("amend_site_form")
      shinyjs::show("ammend_comms_form")
      shinyjs::hide("crt_ops_form")
    }
    else if (input$Add_or_amend_or_comms_or_ops=="Amend Operational Details") {
      shinyjs::hide("add_site_form")
      shinyjs::hide("amend_site_form")
      shinyjs::hide("ammend_comms_form")
      shinyjs::show("crt_ops_form")
    }
    
  # else
  # {shinyjs::hide("IMT_mod_pg")
  #   shinyjs::show("IMT_mod_log") }
  }
  )
  
  
  
  ### Add site to existing incident

  
  #Modify business area dropdowns
  updatebusarea_crt_add<-function(session){
    req(input$Site_add)
    business_filter<-sqldf(paste0("select * from Recommendations where site = '",input$Site_add,"'"))
    updateAwesomeCheckboxGroup(session,inputId = "Bus_Ar_add",label="Business Area:",choices=c(unique(business_filter$Business_Area)))}
  observeEvent(input$Site_add,updatebusarea_crt_add(session))  
  
  updateproarea1_crt_add<-function(session){
    req(input$Site_add)
    process_filter_a<-sqldf(paste0("select * from Recommendations where site = '",input$Site_add,"'"))
    updateAwesomeCheckboxGroup(session,inputId = "pro_Ar_add",label="Process Area:", choices=c(unique(process_filter_a$Process)))}
  observeEvent(input$Site_add,updateproarea1_crt_add(session))
  
  updateproarea_crt_add<-function(session){
    req(input$Bus_Ar_add)
    process_filter_a<-sqldf(paste0("select * from Recommendations where site = '",input$Site_add,"'"))
    process_filter<- process_filter_a %>% filter(Business_Area %in% input$Bus_Ar_add)
    updateAwesomeCheckboxGroup(session,inputId = "pro_Ar_add", label="Process Area:",choices=c(unique(process_filter$Process)))}
  observeEvent(input$Bus_Ar_add,updateproarea_crt_add(session))
  
  
  #### Disable Add site button if selections have not been made
  observe({
    mandatoryFilled_crt_add <-
      vapply(fieldsMandatory_crt_add,
             function(x) {
               !is.null(input[[x]]) && input[[x]] != ""
             },
             logical(1))
    mandatoryFilled_crt_add <- all(mandatoryFilled_crt_add)
    shinyjs::toggleState(id = "addsite_add", condition = mandatoryFilled_crt_add)
  })    
  
  #other sys req- add site
  observeEvent(input$systems_add,{
    if ('Other' %in% input$systems_add==TRUE){
      shinyjs::show("other_sys_req_add")}
    else {
      shinyjs::hide("other_sys_req_add")
    }
  })
  
  #other fac req- add site
  observeEvent(input$facilities_add,{
    if ('Other' %in% input$facilities_add==TRUE){
      shinyjs::show("other_fac_req_add")}
    else {
      shinyjs::hide("other_fac_req_add")
    }
  })
  
  #### Disable Submit button if no sites have been addded to the incident
  observe({
    if (count(subset(vals_crt_add$Data,Site!=""))>0) {
      shinyjs::enable("submit_add")
    } else {
      shinyjs::disable("submit_add")
    }
  })
  
  #### Hide Add button if no INC have been selected
  observe({
    if (input$CRT_mod_inc!="") {
      shinyjs::show("addsite_add")
    } else {
      shinyjs::hide("addsite_add")
    }
  })
  
  #save new site function
  saveData_crt_add <- function(session) {
    time_final<-format(Sys.time(), "%Y%m%d-%H%M%OS")
    vals_crt_add$Data$Date_time<-time_final
    write_csv(x = vals_crt_add$Data, path = paste0("Data_crt_site/Mydata_site_",time_final,".csv"))}
  
  
  
  vals_crt_add<-reactiveValues()
  vals_crt_add$Data<-data.table(
    Site=c(''),
    Business_area=c(''),
    Process=c(''),
    Description=c(''),
    Teams=c(''),
    People=c(''),
    Customer_contact=c(''),
    Systems=c(''),
    Systems_other=c(''),
    Facilities=c(''),
    Facilities_other=c(''),
    Vulnerable_customers=c('')
  )
  
  observeEvent(input$addsite_add,{
    shinyjs::disable(("addsite_add"))
    
    add_site_info<-data.table(
      Site=c(input$Site_add),
      Business_area=c(paste(input$Bus_Ar_add,collapse="-")),
      Process=c(paste(input$pro_Ar_add, collapse="-")),
      Description=c(paste(input$desc_add)),
      Teams=c(paste(input$eng_team_add, collapse="-")),
      People=c(paste(input$People_add)),
      Customer_contact=c(paste(input$cust_cont_add, collapse="-")),
      
      Systems=c(ifelse('Other' %in% input$systems_add==TRUE,paste(append(input$systems_add,input$other_system_add),collapse="-"),paste(input$systems_add,collapse="-"))),
      Systems_other=c(ifelse('Other' %in% input$systems_add==TRUE,paste(input$other_system_add),c(''))),
      Facilities=c(ifelse('Other' %in% input$facilities_add==TRUE,paste(append(input$facilities_add,input$other_fac_add),collapse="-"),paste(input$facilities_add,collapse="-"))),
      Facilities_other=c(ifelse('Other' %in% input$facilities_add==TRUE,paste(input$other_fac_add),c(''))),
      Vulnerable_customers=c(input$vuln_cust_add))
    
    vals_crt_add$Data<-rbind(add_site_info,vals_crt_add$Data,fill=TRUE)
    vals_crt_add$Data<-subset(vals_crt_add$Data,Site!="")
    
    
    #display details of added site below
    output$tempSite_add<-renderUI({
      fluidPage(
        h3(strong("The below site/s will be added to the incident")),
        hr(),
        column(12,dataTableOutput("Main_table_crt_add")),
        tags$script(HTML('$(document).on("click", "input", function () {
                         var checkboxes = document.getElementsByName("row_selected");
                         var checkboxesChecked = [];
                         for (var i=0; i<checkboxes.length; i++) {
                         if (checkboxes[i].checked) {
                         checkboxesChecked.push(checkboxes[i].value);
                         }
                         }
                         Shiny.onInputChange("checked_rows",checkboxesChecked);
    })')),
        tags$script("$(document).on('click', '#Main_table_crt_add button', function () {
                    Shiny.onInputChange('lastClickId',this.id);
                    Shiny.onInputChange('lastClick', Math.random())
  });"))
    })
    
    shinyjs::reset("add_site_form")
    shinyjs::enable(("addsite_add"))
  })
  
  
  output$Main_table_crt_add<-renderDataTable({
    DT=vals_crt_add$Data
    DT<-sqldf("select Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Facilities,Vulnerable_customers from DT")
    DT[["Actions"]]<-
      paste0('
             <div class="btn-group" role="group" aria-label="Basic example">
             <button type="button" class="btn btn-secondary delete" id=m_delete_',1:nrow(vals_crt_add$Data),'>Delete</button>
             </div>
             ')
    datatable(DT,
              escape=F,
              options=list(scrollX=TRUE))})
  
  
  observeEvent(input$lastClick,
               {
                 if (input$lastClickId%like%"m_delete")
                 {
                   row_to_del=as.numeric(gsub("m_delete_","",input$lastClickId))
                   vals_crt_add$Data=vals_crt_add$Data[-row_to_del]
                 }}) 
  
  
  
  ###### Add CRT sites ###############
  observeEvent(input$submit_add, {
    
    vals_crt_add$Data$INC<-input$CRT_mod_inc
    vals_crt_add$Data$Is_current<-1
    vals_crt_add$Data$Changed<-c('')
    
    vals_crt_add$Data$User<-session_user$Data
    
    
    shinyjs::disable("submit")
    shinyjs::show("submit_msg")
    shinyjs::hide("error")
    
    tryCatch({
      saveData_crt_add(formData())
      #all_INC_data$Data<-loadData_new()
      shinyjs::reset("add_site_form")
    },
    error = function(err) {
      shinyjs::html("error_msg", err$message)
      shinyjs::show(id = "error", anim = TRUE, animType = "fade")
    },
    finally = {
      shinyjs::enable("submit_add")
      shinyjs::hide("submit_msg")
    })
    
    
    
    
### empty table for site IMT/NR/RP- Amend CRT #####
    vals2_imt$Data<-data.table(
      INC=c(vals_crt_add$Data$INC),
      Site=c(vals_crt_add$Data$Site),
      Who_is_impacted=c(''),
      Estimated_volume_of_users_impacted=c(''),
      Root_cause=c(''),
      Timescales_for_recovery=c(''),
      IMT=c(''),
      Comms=c(''),
      Site_continuity=c(''),
      Description=c(''),
      Changed_imt=c(''),
      Is_current_imt=1,

      Date_time_imt=format(Sys.time(), "%Y%m%d-%H%M%OS")
    )
    # write IMT table
    write_csv(vals2_imt$Data, path = paste0("Data_site_IMT/IMT_Mydata", format(Sys.time(), "%Y%m%d-%H%M%S"), ".csv"))
    
    # empty table for site NR- Amend CRT
    vals3_nr$Data<-data.table(
      INC=c(vals_crt_add$Data$INC),
      Site=c(vals_crt_add$Data$Site),
      Action_required=c(''),
      Sungard_required=c(''),
      Sungard_available=c(''),
      Sungard_accessible=c(''),
      Escalation_required=c(''),
      Escalated_to=c(''),
      Comments=c(''),
      Changed_nr=c(''),
      Is_current_nr=1,

      Date_time_nr=format(Sys.time(), "%Y%m%d-%H%M%OS")
      
    )
    # write NR table
    write_csv(vals3_nr$Data, path = paste0("Data_site_NR/NR_Mydata", format(Sys.time(), "%Y%m%d-%H%M%S"), ".csv"))
    
    # empty table for RnP- Amend CRT
    Recommendations_rp <-Recommendations %>% 
      filter (Recommendations$Business_Area %in% unlist(strsplit(as.character(vals_crt_add$Data$Business_area),"-")) & 
                Recommendations$Process %in% unlist(strsplit(as.character(vals_crt_add$Data$Process),"-")) & 
                Recommendations$Site %in% unlist(strsplit(as.character(vals_crt_add$Data$Site),"-")))
    
    vals4_rp_step4$Data<-data.table(
      INC_rp=c(vals_crt_add$Data$INC),
      Site_rp=c(Recommendations_rp$Site),
      Business_area_rp=c(Recommendations_rp$Business_Area),
      Process_rp=c(Recommendations_rp$Process),
      Team_name_rp=c(Recommendations_rp$`Team Name`),
      Priority_rp=c(Recommendations_rp$`Priority rating`),
      BG_site_rp=c(Recommendations_rp$`Confirmed BG site synergy`),
      Third_party_rp=c(Recommendations_rp$`3rd party site synergy`),
      Timescale_rp=c(''),
      IVR_messaging=c(''),
      Online_messaging=c(''),
      Line_closure=c(''),
      Line_closed_Free_Text=c(''),
      Call_routing=c(''),
      BG_site_rp_new=c(''),
      Third_Party_new=c(''),
      Changed_rp=c(''),
      Is_current_rp=1,

      Date_time_rp=format(Sys.time(), "%Y%m%d-%H%M%OS")
    )
    write_csv(vals4_rp_step4$Data, path = paste0("Data_site_RP/RP_Mydata", format(Sys.time(), "%Y%m%d-%H%M%S"), ".csv"))
    

    
    
    
    #Send email for adding new site
    sender <- "zz_sm6496@centrica.com" # Replace with a valid address
    recipients <- session_user$Data # Replace with one or more valid addresses
    
    crt_site_add<-subset(vals_crt_add$Data,select=-c(Systems_other,Facilities_other))
    
    # Convert the data frame into an HTML Table
    y <- htmlTable(crt_site_add  %>% select(-Date_time,-User,-INC,-Changed,-Is_current) , rnames = FALSE)
    
    
    
    crt_info_add_site <- loadData_crt_site()
    crt_info_add_site<-sqldf(paste0("select * from crt_info_add_site where INC = '",input$CRT_mod_inc,"'"))
    
    crt_add_open_tm<-min(crt_info_add_site$Date_time)
    #crt_info_imt<-sqldf(paste0("select * from crt_info_imt where  is_current==",1))
    crt_info_add_site<-sqldf(paste0("select * from crt_info_add_site where INC = '",input$CRT_mod_inc,"' and is_current==",1))
    # Define body of email
    html_body <- paste0('<html><head>
                        <style>
                        body{font-family:BG Flame, sans-serif;}
                        table{border-left:0.1px solid #000000;border-top:0.1px solid #000000;width: 1000px;}
                        table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        img {width: 1000px;}
                        </style>
                        </head><body><table>
                         
                        <tr><td><img src=\"https://azsu-p-app-026.azure.uk.centricaplc.com:3939/content/230/_w_13f9edc3/update.jpg\"></td></tr>',
                        "<tr><td><br>
                         <b>INC: </b>",paste0(unique(crt_info_add_site$INC),collapse="|"),"<br><br>
                         <b>Site impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_add_site$Site,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Business area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_add_site$Business_area,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Process area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_add_site$Process,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Teams impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_add_site$Teams,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Incident Description: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_add_site$Description,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>

                        <b>Last update to the incident: </b>Customer Response Team has added the following site to the incident.<br><br>",y,"
                        <br><br>

                         <b>Incident open date: </b>",as.Date(substr(crt_add_open_tm[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_add_open_tm[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last updated date: </b>",as.Date(substr(crt_site_add$Date_time[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_site_add$Date_time[1],10,15),format="%H%M%S") ,"<br><br>
                        <b>Last user to update BCP: </b>",paste0(crt_site_add$User[1]),"<br><br>

                        </td></tr></table></body></html>

                       "
                        
    )
    
    
    email_site_add <- send.mail(from = sender,
                                to = recipients,
                                subject=paste0("Incident ",crt_info_add_site$INC[1]," | Add | ",session_user$Data),
                                body = html_body,
                                smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                                authenticate = FALSE,#inline=TRUE,
                                html = TRUE,
                                send = FALSE)
    email_site_add$send()
    
    
    
    
    
    output$tempSite_crt_add<-renderUI({
      fluidPage(
        tags$script(HTML('$(document).on("click", "input", function () {
                         var checkboxes = document.getElementsByName("row_selected");
                         var checkboxesChecked = [];
                         for (var i=0; i<checkboxes.length; i++) {
                         if (checkboxes[i].checked) {
                         checkboxesChecked.push(checkboxes[i].value);
                         }
                         }
                         Shiny.onInputChange("checked_rows",checkboxesChecked);
          })')),
        tags$script("$(document).on('click', '#Main_table button', function () {
                        Shiny.onInputChange('lastClickId',this.id);
                        Shiny.onInputChange('lastClick', Math.random())
          });"))
    })
    
    this_inc<-vals_crt_add$Data$INC
    sendSweetAlert(
      session = session,
      title = "Success !!",
      text = paste("Site added for Incident number ",this_inc[1]," !"),
      type = "success"
    )
    
    #Reset everything to original Null state
    vals_crt_add$Data<-data.table(
      INC=c(''),
      Site=c(''),
      Business_area=c(''),
      Process=c(''),
      Description=c(''),
      Teams=c(''),
      People=c(''),
      Customer_contact=c(''),
      Systems=c(''),
      Systems_other=c(''),
      Facilities=c(''),
      Facilities_other=c(''),
      Vulnerable_customers=c('')
    )
    
    #output$tempSite_crt_add<-renderUI(uiOutput("tempSite_add"))
    output$tempSite_add<-renderUI({
      fluidPage(
        
        tags$script(HTML('$(document).on("click", "input", function () {
                         var checkboxes = document.getElementsByName("row_selected");
                         var checkboxesChecked = [];
                         for (var i=0; i<checkboxes.length; i++) {
                         if (checkboxes[i].checked) {
                         checkboxesChecked.push(checkboxes[i].value);
                         }
                         }
                         Shiny.onInputChange("checked_rows",checkboxesChecked);
    })')),
        tags$script("$(document).on('click', '#Main_table_crt_add button', function () {
                    Shiny.onInputChange('lastClickId',this.id);
                    Shiny.onInputChange('lastClick', Math.random())
  });"))})
    

   crt_data$Data<-loadData_crt_site()
    
    shinyjs::reset("add_site_form")
    shinyjs::reset("CRT_mod_pg")
  })
  
  
################## Amend CRT Site    ################
  vals2<-reactiveValues()
  vals2$Data<-data.table(
    INC=c(NA),
    Site=c(''),
    Business_area=c(''),
    Process=c(''),
    Description=c(''),
    Teams=c(''),
    People=c(''),
    Customer_contact=c(''),
    Systems=c(''),
    Systems_other=c(''),
    Facilities=c(''),
    Facilities_other=c(''),
    Vulnerable_customers=c(''),
    Changed=c('')
    
  )
  
  observeEvent(input$CRT_mod_inc,{
    req(input$CRT_mod_inc)
    
    vals2$Data<-data.table(
      INC=c(NA),
      Site=c(''),
      Business_area=c(''),
      Process=c(''),
      Description=c(''),
      Teams=c(''),
      People=c(''),
      Customer_contact=c(''),
      Systems=c(''),
      Systems_other=c(''),
      Facilities=c(''),
      Facilities_other=c(''),
      Vulnerable_customers=c(''),
      Changed=c('')
      
    )
    
    All_data_mod_CRT<-loadData_crt_site()
    All_data_mod_CRT<-sqldf(paste0("select * from All_data_mod_CRT where INC = '",input$CRT_mod_inc,"' and is_current==",1))
    All_data_mod_CRT<-sqldf(paste0("select INC,Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Systems_other,
                                   Facilities,Facilities_other,Vulnerable_customers from All_data_mod_CRT "))
    vals2$Data<-rbind(All_data_mod_CRT,vals2$Data,fill=TRUE)
    vals2$Data<-subset(vals2$Data,Site!="")
    updateSwitchInput(session,inputId = "Vulnerable_customers_amend", value=All_data_mod_CRT$Vulnerable_customers)
    
    
    all_data_crt_comms <-loadData_crt_comms()
    all_data_crt_comms<-sqldf(paste0("select * from all_data_crt_comms where INC = '",input$CRT_mod_inc,"' and is_current=",1))
    
    updateSwitchInput(session,inputId = "comm_req_amend_com", value =all_data_crt_comms$Comms_required)
    updateTextInput(session,inputId = "inc_no_amend_com", value =all_data_crt_comms$Incident_number)
    updateSwitchInput(session,inputId = "head_comm_amend_com", value=all_data_crt_comms$SLT)
    updateSwitchInput(session,inputId = "imt_amend_com", value=all_data_crt_comms$IMT)
    updateSwitchInput(session,inputId = "people_comms_amend_com", value=all_data_crt_comms$People_comms)
    updateSwitchInput(session,inputId = "operations_invok_amend_com", value=all_data_crt_comms$Operations_invoked)

    
    all_data_crt_ops <-loadData_crt_ops()
    all_data_crt_ops<-sqldf(paste0("select * from all_data_crt_ops where INC = '",input$CRT_mod_inc,"' and is_current=",1))
    
    updateSwitchInput(session,inputId ="operational_call_amend_ops", value = all_data_crt_ops$Operational_call)
    updateDateInput(session,inputId ="enter_date_ops", value = all_data_crt_ops$Date_op)
    updateTimeInput(session,inputId ="enter_time_ops", value = all_data_crt_ops$Time_op1)
  }
  )
  
  output$CRT_inc_det<-DT::renderDataTable({
    req(input$CRT_mod_inc)
    All_data_mod_CRT<-loadData_crt_site()
    All_data_mod_CRT<-sqldf(paste0("select * from All_data_mod_CRT where INC = '",input$CRT_mod_inc,"' and is_current==",1))
    All_data_mod_CRT<-sqldf(paste0("select INC,Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Facilities,Vulnerable_customers from All_data_mod_CRT "))
    
    datatable(All_data_mod_CRT,options = list(dom = 't',scrollX=TRUE),rownames = FALSE,escape=F)}
  )
  
  output$CRT_mod_inc_det<-DT::renderDataTable({
    req(input$CRT_mod_inc)
    DT= subset(vals2$Data,select=-c(Systems_other,Facilities_other))
    DT[["Actions"]]<-
      paste0('
                <div class="btn-group" role="group" aria-label="Basic example">
                <button type="button" class="btn btn-secondary modify"id=modify_crt_',1:nrow(vals2$Data),'>Modify</button>
                </div>
                ')
    DT<-DT %>% select(Actions,everything())
    datatable(DT,options = list(dom = 't',scrollX=TRUE),rownames = FALSE,
              escape=F)}
  )
  
  #Disable CRT_changes button if selections have not been made
  observe({
    mandatoryFilled <-
      vapply(fieldsMandatory_amend_site,
             function(x) {
               !is.null(input[[x]]) && input[[x]] != ""
             },
             logical(1))
    mandatoryFilled <- all(mandatoryFilled)
    shinyjs::toggleState(id = "CRT_changes", condition = mandatoryFilled)
  })  
  
  #disable submit button###################
  observeEvent(input$CRT_mod_inc,{

    # shinyjs::disable("CRT_changes_final")
    if (input$CRT_mod_inc=="")   
    {shinyjs::disable("CRT_changes_final")
      shinyjs::disable("CRT_changes_final_amend_com")
      shinyjs::disable("CRT_changes_final_amend_ops")
      } 
    else 
    {shinyjs::enable("CRT_changes_final")
      shinyjs::enable("CRT_changes_final_amend_com")
      shinyjs::enable("CRT_changes_final_amend_ops")}
  })
  
  #other fac req- amend site
  observeEvent(input$facilities_amend,{
    if ('Other' %in% input$facilities_amend==TRUE){
      shinyjs::show("other_fac_amend")}
    else {
      shinyjs::hide("other_fac_amend")
    }
  })
  
  #other fac req- amend site
  observeEvent(input$systems_amend,{
    if ('Other' %in% input$systems_amend==TRUE){
      shinyjs::show("other_system_amend")}
    else {
      shinyjs::hide("other_system_amend")
    }
  })
  
  #Pop-up box for Inputs
  observeEvent(input$lastClick,
               {
                 if (input$lastClickId%like%"modify_crt")
                 {
                   selected_row=as.numeric(gsub("modify_crt_","",input$lastClickId))
                   old_row=vals2$Data[selected_row]
                   
                   my_input_crt<-reactive(fluidPage(
                     h3(strong("Edit Existing Site Details"),align="center"),
                     hr(),
                     
                     fluidRow(column(6,paste0("INC: ",old_row$INC)),

                     column(6,paste0("Site: ",old_row$Site))),

                     fluidRow(column(6,paste0("Business area: ",old_row$Business_area)),

                     column(6,paste0("Process area: ",old_row$Process))),
                      hr(),
                     fluidRow(column(6,textAreaInput("desc_amend","Description:",value=old_row$Description,height = 200,width=550))),


                     fluidRow(column(12,h3("Edit engagement:"))),
                     fluidRow(column(12,awesomeCheckboxGroup("Teams_amend","Teams:",c("Site", "Resource & Planning", "National resilience"),
                                                           selected = unlist(strsplit(as.character(old_row$Teams),"-")),inline = TRUE))),
                     
                     hr(),
                     fluidRow(column(12,h3("Edit impact of the incident:"))),
                     fluidRow(column(12,textInput("People_amend","People (Volume)",value=old_row$People))),
                     fluidRow(column(6,awesomeCheckboxGroup(
                       inputId = "cust_cont_amend",
                       label = "Customer contact",
                       choices = c("Inbound","Outbound", "Webchat", "Social Media",'Email','Other'),
                       selected = unlist(strsplit(as.character( old_row$Customer_contact),"-")))),

                       column(6,fluidRow(column(12,awesomeCheckboxGroup(
                         inputId = "systems_amend",
                         label = "Systems",
                         choices = c('No systems impacted',"BG Online", "Agent Workbench", "Trilliant Phase 3 Head End","SMART PAYGE",'BGSM Metering Application',
                                     'Engineer Workbench','WMIS','MVW/GVW','BGR & BGS SAP CRM','BGR & BGS Billing SAP','Call Delivery (shared)',
                                     'SMART Industry Integration Hub','Taskforce','Other'),
                         selected =  unlist(strsplit(as.character(old_row$Systems),"-"))
                       ))),
                       fluidRow(column(12,textInput("other_system_amend","Enter other system",
                                                    value=old_row$Systems_other
                       ))))),
                     fluidRow(column(6,fluidRow(column(12,awesomeCheckboxGroup(
                       inputId = "facilities_amend",
                       label = "Facilities",
                       choices = c('No facilities impacted',"Fire Evacuation", "Electricity outage", "Catering issues",'Water supply issues','Ice / snow on walkways and carparks',
                                   'Damage to the building','Safety / Security alarm malfunctions','Gas explosion / escape','Bomb threat / security alert',
                                   'Flooding','Other'),
                       selected =  unlist(strsplit(as.character(old_row$Facilities),"-"))
                     ))),
                     fluidRow(column(12,textInput("other_fac_amend","Enter other facility",
                                                  value=old_row$Facilities_other
                     )))),
                     column(6,
                            selectInput("Vulnerable_customers_amend","Vulnerable customers",c(TRUE,FALSE),selected = old_row$Vulnerable_customers))),
                            # switchInput(
                            #   inputId = "Vulnerable_customers_amend",
                            #   label = "Vulnerable customers",
                            #   value = old_row$Vulnerable_customers,
                            #   onLabel = "Yes",
                            #   offLabel = "No",
                            #   onStatus = "primary",
                            #   offStatus = "danger"
                            # ))),

                     actionBttn(
                       inputId = "CRT_changes",
                       label = "Save changes",
                       style = "unite",
                       color = "primary"),
                     
                     tags$script(HTML("$(document).on('click', '#save_changes', function () {
                                      var list_value=[]
                                      for (i = 0; i < $( '.new_input' ).length; i++)
                                      {
                                      list_value.push($( '.new_input' )[i].value)
                                      }
                                      Shiny.onInputChange('newValue', list_value)
                 });"))
                   )
                   )
                   
                   showModal(modalDialog(my_input_crt(),easyClose=TRUE) )
                   x<-old_row$INC
                 }})

  
  observeEvent(input$CRT_changes,{
    selected_row=as.numeric(gsub("modify_crt_","",input$lastClickId))
    old_row=vals2$Data[selected_row]

    vals2$Data[selected_row]<-data.table(
      INC=c(old_row$INC),
      Site=c(old_row$Site),
      Business_area=c(old_row$Business_area),
      Process=c(old_row$Process),
      Description=c(input$desc_amend),
      Teams=c(paste0(input$Teams_amend,collapse="-")),
      People=c(input$People_amend),
      Customer_contact=c(paste0(input$cust_cont_amend,collapse="-")),

      Systems=c(ifelse('Other' %in% input$systems_amend==TRUE,paste(append(input$systems_amend,input$other_system_amend),collapse="-"),paste(input$systems_amend,collapse="-"))),
      Systems_other=c(ifelse('Other' %in% input$systems_amend==TRUE,paste(input$other_system_amend),c(''))),
      
      Facilities=c(ifelse('Other' %in% input$facilities_amend==TRUE,paste(append(input$facilities_amend,input$other_fac_amend),collapse="-"),paste(input$facilities_amend,collapse="-"))),
      Facilities_other=c(ifelse('Other' %in% input$facilities_amend==TRUE,paste(input$other_fac_amend),c(''))),
      
      Vulnerable_customers=c(input$Vulnerable_customers_amend),
      Changed=c('Yes')
    )

    removeModal()
  })
  
  # #Ask for short description of the changes made by the user
  # observeEvent(input$Confirm_CRT_mod,{
  #   req(input$CRT_mod_inc)
  #   
  #   changes_details_crt<-reactive(fluidPage(
  #     h3(strong("Please give a short description of the changes"),align="center"),
  #     hr(),
  #     fluidRow(column(6,textAreaInput("changes_desc_crt","Desciption: ",width = 200))),
  #     hr(),
  #     actionButton("CRT_changes_final","Submit")))
  #   showModal(modalDialog(changes_details_crt(),easyClose=TRUE) )
  # })
  
  observeEvent(input$CRT_changes_final,{
    req(input$CRT_mod_inc)
    removeModal()
    
    All_data_mod_CRT<-loadData_crt_site()
    All_data_mod_CRT<-sqldf(paste0("select * from All_data_mod_CRT where INC = '",input$CRT_mod_inc,"' and is_current==",1))
    All_data_mod_CRT<-sqldf(paste0("select INC, Site, Business_area, Process, Description, Teams, People, Customer_contact, Systems, Systems_other,
                                   Facilities, Facilities_other, Vulnerable_customers, Date_time, User  from All_data_mod_CRT "))
    
    #Set the is_current flag to 0 for the older entries
    temp_data<-vals2$Data
    vals2$Data<-sqldf("select * from temp_data where Changed='Yes'")
    temp_data<-vals2$Data
    
    All_data_mod_CRT<-sqldf(paste0("select a.*,case when length(b.Site)>1 then 0 else 1 end as Is_current  from All_data_mod_CRT as a left join temp_data as b on a.Site=b.Site"))
    
    old_dttm<-sqldf("select distinct Date_time as Date_time from All_data_mod_CRT ")
    for (i in unique(old_dttm$Date_time)){
      test2<-sqldf(paste0("select * from All_data_mod_CRT where Date_time='",i,"'"))
      write_csv(test2,path=paste0("Data_crt_site/Mydata_site_",i,".csv"))
    }
    
    #Write the new entries to the data
    vals2$Data$Date_time<-format(Sys.time(), "%Y%m%d-%H%M%OS")
    vals2$Data$Is_current<-1
    #vals2$Data$Change_details_crt<-c(input$changes_desc_crt)
    vals2$Data$User<-session_user$Data
    write_csv(x = vals2$Data, path = paste0("Data_crt_site/Mydata_site_",format(Sys.time(), "%Y%m%d-%H%M%OS"),".csv"))
    all_INC_data$Data<-loadData_crt_site()
    
    this_inc<-vals2$Data$INC
    sendSweetAlert(
      session = session,
      title = "Success !!",
      text = paste("Site details amended for Incident Number ",this_inc[1]," !"),
      type = "success"
    )
    
    #crt_data$Data<- loadData_crt_site()
    shinyjs::reset("CRT_mod_pg")
    
    #Send email for amending CRT details
    sender <- "zz_sm6496@centrica.com" # Replace with a valid address
    recipients <- session_user$Data # Replace with one or more valid addresses
    
    crt_site_amend<-subset(vals2$Data,select=-c(Systems_other,Facilities_other))
    
    # Define body of email
    y <- htmlTable(crt_site_amend  %>% select(-Date_time,-User,-INC,-Changed,-Is_current) , rnames = FALSE)
    
    crt_info_amend <- loadData_crt_site()
    crt_info_amend<-sqldf(paste0("select * from crt_info_amend where INC = '",input$CRT_mod_inc,"'"))
    
    crt_amend_open_tm<-min(crt_info_amend$Date_time)
    #crt_info_imt<-sqldf(paste0("select * from crt_info_imt where  is_current==",1))
    crt_info_amend<-sqldf(paste0("select * from crt_info_amend where INC = '",input$CRT_mod_inc,"' and is_current==",1))
    # Define body of email
    html_body <- paste0('<html><head>
                        <style>
                        body{font-family:BG Flame, sans-serif;}
                        table{border-left:0.1px solid #000000;border-top:0.1px solid #000000;width: 1000px;}
                        table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        img {width: 1000px;}
                        </style>
                        </head><body><table>
                         
                        <tr><td><img src=\"https://azsu-p-app-026.azure.uk.centricaplc.com:3939/content/230/_w_13f9edc3/update.jpg\"></td></tr>',
                        "<tr><td><br>
                         <b>INC: </b>",paste0(unique(crt_info_amend$INC),collapse="|"),"<br><br>
                         <b>Site impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_amend$Site,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Business area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_amend$Business_area,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Process area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_amend$Process,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Teams impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_amend$Teams,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Incident Description: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_amend$Description,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>

                        <b>Last update to the incident: </b>Customer Response Team has amended the following site to the incident.<br><br>",y,"
                        <br><br>

                         <b>Incident open date: </b>",as.Date(substr(crt_amend_open_tm[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_amend_open_tm[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last updated date: </b>",as.Date(substr(crt_site_amend$Date_time[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_site_amend$Date_time[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last user to update BCP: </b>",paste0(crt_site_amend$User[1]),"<br><br>

                        </td></tr></table></body></html>

                       "
                        
    )
    
    
    email_crt <- send.mail(from = sender,
                           to = recipients,
                           subject=paste0("Incident ",crt_site_amend$INC[1]," | Update | ",session_user$Data),
                           body = html_body,
                           smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                           authenticate = FALSE,
                           #inline=TRUE,
                           html = TRUE,
                           send = FALSE)
    email_crt$send()
    
    
    crt_data$Data<-loadData_crt_site()
    
    
    
    
  })
  

################## Amend CRT Comms ################
  
  #Show details for conn required
  observeEvent(input$comm_req_amend_com,{
    if (input$comm_req_amend_com==TRUE){
      shinyjs::show("comm_requ_details_amend_com")}
    else if 
    (input$comm_req_amend_com==FALSE) {
      shinyjs::hide("comm_requ_details_amend_com")}
  })
  
  observeEvent(input$Refresh_btn,{
    updateSelectInput(session,inputId = "CRT_mod_inc",label="Enter incident number:",
                      choices=c("",unique(all_INC_data$Data$INC)),selected="")
  })
  
  
  observeEvent(input$CRT_changes_final_amend_com,{
    req(input$CRT_mod_inc)
    #load old row for coms and change is current to 0 and save
    all_data_crt_comms <-loadData_crt_comms()
    all_data_crt_comms<-sqldf(paste0("select * from all_data_crt_comms where INC = '",input$CRT_mod_inc,"' and is_current=",1))
    
    # if (length(all_data_crt_comms$is_current)>=1) { 
    all_data_crt_comms$Is_current <- c(0)
    write.csv(all_data_crt_comms, file = paste0("Data_crt_comms/Mydata_comms_", all_data_crt_comms$Date_time, ".csv"),row.names = FALSE)
    
    crt_comms<-data.table(
      INC=input$CRT_mod_inc,
      Comms_required=c(input$comm_req_amend_com),
      Incident_number=ifelse(input$comm_req_amend_com==FALSE,c(''),c(input$inc_no_amend_com)),
      SLT=ifelse(input$comm_req_amend_com==FALSE,c(FALSE),c(input$head_comm_amend_com)),
      IMT=ifelse(input$comm_req_amend_com==FALSE,c(FALSE),c(input$imt_amend_com)),
      People_comms=ifelse(input$comm_req_amend_com==FALSE,c(FALSE),c(input$people_comms_amend_com)),
      Operations_invoked=ifelse(input$comm_req_amend_com==FALSE,c(FALSE),c(input$operations_invok_amend_com)),
      #Changed=c('Yes'),
      Is_current=c(1),
      User=session_user$Data,
      Date_time = format(Sys.time(), "%Y%m%d-%H%M%OS"))
    write_csv(crt_comms,path=paste0("Data_crt_comms/Mydata_comms_",format(Sys.time(), "%Y%m%d-%H%M%OS"),".csv"))
    
    #showModal(modalDialog(title = "Amend Comms.","SUCCESS"))
    this_inc<-input$CRT_mod_inc
    sendSweetAlert(
      session = session,
      title = "Success !!",
      text = paste("Comms details amended for Incident Number ",this_inc," !"),
      type = "success"
    )
    

    
    #Send email for amending CRT details
    sender <- "zz_sm6496@centrica.com" # Replace with a valid address
    recipients <- session_user$Data # Replace with one or more valid addresses
    
    # Convert the data frame into an HTML Table
    #y <- htmlTable(crt_comms, rnames = FALSE)
    
    
    y <- htmlTable(crt_comms  %>% select(-Date_time,-User,-INC,-Is_current) , rnames = FALSE)
    
    
    crt_info_comms <- loadData_crt_site()
    crt_info_comms<-sqldf(paste0("select * from crt_info_comms where INC = '",input$CRT_mod_inc,"'"))
    
    
    crt_comms_open_tm<-min(crt_info_comms$Date_time)
    #crt_info_imt<-sqldf(paste0("select * from crt_info_imt where  is_current==",1))
    crt_info_comms<-sqldf(paste0("select * from crt_info_comms where INC = '",input$CRT_mod_inc,"' and is_current==",1))
    # Define body of email
    html_body <- paste0('<html><head>
                        <style>
                        body{font-family:BG Flame, sans-serif;}
                        table{border-left:0.1px solid #000000;border-top:0.1px solid #000000;width: 1000px;}
                        table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        img {width: 1000px;}
                        </style>
                        </head><body><table>
                         
                        <tr><td><img src=\"https://azsu-p-app-026.azure.uk.centricaplc.com:3939/content/230/_w_13f9edc3/update.jpg\"></td></tr>',
                        "<tr><td><br>
                         <b>INC: </b>",paste0(unique(crt_info_comms$INC),collapse="|"),"<br><br>
                         <b>Site impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_comms$Site,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Business area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_comms$Business_area,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Process area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_comms$Process,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Teams impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_comms$Teams,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Incident Description: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_comms$Description,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                        
                        <b>Last update to the incident: </b>Customer Response Team has amended the following incident.  <br><br>",y,"
                        <br><br>
                         
                         <b>Incident open date: </b>",as.Date(substr(crt_comms_open_tm[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_comms_open_tm[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last updated date: </b>",as.Date(substr(crt_comms$Date_time,1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_comms$Date_time,10,15),format="%H%M%S") ,"<br><br>
                         <b>Last user to update BCP: </b>",paste0(crt_comms$User,collapse="-"),"<br><br>
                     
                        </td></tr></table></body></html>

                       "
                        
    )
    
    print("check")
    email_crt_comms <- send.mail(from = sender,
                                 to = recipients,
                                 subject=paste0("Incident ",crt_comms$INC[1]," | Update | ",session_user$Data),
                                 
                                 body = html_body,
                                 smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                                 authenticate = FALSE,
                                 html = TRUE,
                                 send = FALSE)
    email_crt_comms$send()
    shinyjs::reset("ammend_comms_form")
    shinyjs::reset("CRT_mod_pg")
    
    crt_data_comms$Data<-loadData_crt_comms()
    
    
  })
  
  
################## Amend CRT Ops #########################   
  
  observeEvent(input$operational_call_amend_ops,{
    if (input$operational_call_amend_ops==TRUE){
      shinyjs::show("ops_call_details_ops")}
    else {
      #updateTimeInput(session,"enter_time",value="2019-09-09 BST")
      shinyjs::hide("ops_call_details_ops")
    }
  })
  
  observeEvent(input$Refresh_btn,{
    updateSelectInput(session,inputId = "CRT_mod_inc",label="Enter incident number:",
                      choices=c("",unique(all_INC_data$Data$INC)),selected="")
  })
  
  
  observeEvent(input$CRT_changes_final_amend_ops,{
    req(input$CRT_mod_inc)
    #load old row for coms and change is current to 0 and save
    all_data_crt_ops <-loadData_crt_ops()
    all_data_crt_ops<-sqldf(paste0("select * from all_data_crt_ops where INC = '",input$CRT_mod_inc,"' and is_current=",1))
    
    # if (length(all_data_crt_comms$is_current)>=1) { 
    all_data_crt_ops$Is_current <- c(0)
    write.csv(all_data_crt_ops, file = paste0("Data_crt_ops/Mydata_ops_", all_data_crt_ops$Date_time, ".csv"),row.names = FALSE)
    #  }
    
    crt_ops<-data.table(
      INC=input$CRT_mod_inc,
      Operational_call=c(input$operational_call_amend_ops),
      Date_op=ifelse(input$operational_call_amend_ops=='FALSE',c(''),c(paste(input$enter_date_ops))),
      Time_op=ifelse(input$operational_call_amend_ops=='FALSE',c(paste(Sys.Date())),c(format(input$enter_time_ops,"%H:%M"))),
      Time_op1=ifelse(input$operational_call_amend_ops=='FALSE',c(paste(Sys.Date())),c(paste(input$enter_time_ops))),
      #Changed=c('Yes'),
      Is_current=c(1),
      User=session_user$Data,
      Date_time = format(Sys.time(), "%Y%m%d-%H%M%OS"))
      write_csv(crt_ops,path = paste0("Data_crt_ops/Mydata_ops_",format(Sys.time(), "%Y%m%d-%H%M%OS"),".csv"))
    
      #showModal(modalDialog(title = "Amend Ops.","SUCCESS"))
      this_inc<-input$CRT_mod_inc
      sendSweetAlert(
        session = session,
        title = "Success !!",
        text = paste("Operations details amended for Incident Number ",this_inc," !"),
        type = "success"
      )
      # shinyjs::reset("CRT_mod_pg")
      crt_ops1<-data.table(
        INC=input$CRT_mod_inc,
        Operational_call=c(input$operational_call_amend_ops),
        Date_op=ifelse(input$operational_call_amend_ops=='FALSE',c(''),c(paste(input$enter_date_ops))),
        Time_op=ifelse(input$operational_call_amend_ops=='FALSE',c(''),c(format(input$enter_time_ops,"%H:%M"))),
        Is_current=c(1),
        User=session_user$Data,
        Date_time = format(Sys.time(), "%Y%m%d-%H%M%OS"))
   
      #Send email for amending CRT details
      sender <- "zz_sm6496@centrica.com" # Replace with a valid address
      recipients <- session_user$Data # Replace with one or more valid addresses
      
      # Convert the data frame into an HTML Table
      #
      
      y <- htmlTable(crt_ops1  %>% select(-Date_time,-User,-INC,-Is_current) , rnames = FALSE)
      
      crt_info_ops <- loadData_crt_site()
      crt_info_ops<-sqldf(paste0("select * from crt_info_ops where INC = '",input$CRT_mod_inc,"'"))
      
      crt_ops_open_tm<-min(crt_info_ops$Date_time)
      #crt_info_imt<-sqldf(paste0("select * from crt_info_imt where  is_current==",1))
      crt_info_ops<-sqldf(paste0("select * from crt_info_ops where INC = '",input$CRT_mod_inc,"' and is_current==",1))
      # Define body of email
      html_body <- paste0('<html><head>
                        <style>
                        body{font-family:BG Flame, sans-serif;}
                        table{border-left:0.1px solid #000000;border-top:0.1px solid #000000;width: 1000px;}
                        table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        img {width: 1000px;}
                        </style>
                        </head><body><table>
                         
                        <tr><td><img src=\"https://azsu-p-app-026.azure.uk.centricaplc.com:3939/content/230/_w_13f9edc3/update.jpg\"></td></tr>',
                          "<tr><td><br>
                         <b>INC: </b>",paste0(unique(crt_info_ops$INC),collapse="|"),"<br><br>
                         <b>Site impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_ops$Site,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Business area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_ops$Business_area,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Process area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_ops$Process,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Teams impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_ops$Teams,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Incident Description: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_ops$Description,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                        
                        <b>Last update to the incident: </b>Customer Response Team Operations has updated the following incident.  <br><br>",y,"
                        <br><br>
                         
                         <b>Incident open date: </b>",as.Date(substr(crt_ops_open_tm[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_ops_open_tm[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last updated date: </b>",as.Date(substr(crt_ops1$Date_time,1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_ops1$Date_time,10,15),format="%H%M%S") ,"<br><br>
                         <b>Last user to update BCP: </b>",paste0(crt_ops1$User,collapse="-"),"<br><br>
                     
                        </td></tr></table></body></html>

                       "
                          
      )
      
      
      email_crt_ops <- send.mail(from = sender,
                                 to = recipients,
                                 subject=paste0("Incident ",crt_ops1$INC[1]," | Update | ",session_user$Data),
                                 body = html_body,
                                 smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                                 authenticate = FALSE,
                                 html = TRUE,
                                 send = FALSE)
      email_crt_ops$send()
      
      shinyjs::reset("crt_ops_form")
      shinyjs::reset("CRT_mod_pg")
      
      crt_data_ops$Data<-loadData_crt_ops()
      
      
      
      
  })
  
  
  
  ######################## Situation Report- Add or Amend ################################### 
  
  observeEvent(input$Refresh_btn_site_rep,{
    updateSelectInput(session,inputId = "inc_site_rep",label="Enter incident number:",
                      choices=c("",unique(loadData_crt_site()$INC)),selected="")
  })

  #check for closed incidents
  observeEvent(input$inc_site_rep,{
    req(input$inc_site_rep)
    All_data_mod<-loadData_crt_site()
    All_data_mod<-sqldf(paste0("select
                               * from All_data_mod where INC = '",input$inc_site_rep,"'","and Is_current=1"))

    if (!is.na(All_data_mod$Status[1]))
    {
      updateSelectInput(session,inputId = "inc_site_rep",label="Enter incident number:",
                        choices=c("",unique(loadData_crt_site()$INC)),selected="")
      sendSweetAlert(
        session = session,
        title = "Warning !!!",
        text = paste("Incident has been closed."),
        type = "warning"
      )}
  })
  
  #### Disable add button if selections have not been made
  observe({
    MandatoryFilled_sit_rep <-
      vapply(fieldsMandatory_sit_rep,
             function(x) {
               ifelse(x=="enter_date_sit",  !is.na(input[[x]]) && input[[x]]!=0 && length(input[[x]]) !=0 , !is.null(input[[x]]) && input[[x]] != "" )
               #!is.null(input[[x]]) && input[[x]] != "" 
             },
             logical(1))
    MandatoryFilled_sit_rep <- all(MandatoryFilled_sit_rep)
    
    #Check if dates have been populated
   shinyjs::toggleState(id = "add_sit_rep", condition = MandatoryFilled_sit_rep)
  })
  
  ### Disable submit button if no changes have been made
  observe({
    req(input$inc_site_rep)
    MandatoryFilled_sit_rep_modify <- ifelse(nrow(values_sit_rep$Data %>% filter(values_sit_rep$Data$changed_sit_rep == "Yes"))>0,TRUE,FALSE)
    MandatoryFilled_sit_rep_modify <- all(MandatoryFilled_sit_rep_modify)
    shinyjs::toggleState(id = "save_sit_rep", condition = MandatoryFilled_sit_rep_modify)
  })
  
  output$Site_rep_inc_det<-DT::renderDataTable({
    req(input$inc_site_rep)
    All_data_mod_CRT1<-loadData_crt_site()
    All_data_mod_CRT1<-sqldf(paste0("select * from All_data_mod_CRT1 where INC = '",input$inc_site_rep,"' and is_current=",1))
    All_data_mod_CRT1<-sqldf(paste0("select INC,Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Facilities,Vulnerable_customers  from All_data_mod_CRT1 "))
    datatable(All_data_mod_CRT1,options = list(dom = 't',scrollX=TRUE),rownames = FALSE,escape=F)}
  )
  
  values_sit_rep<-reactiveValues()
  
  update_site_sit_rep<-function(session){
    req(input$inc_site_rep)
    all_sit_rep_data3<-loadData_crt_site()
    site_filter<-sqldf(paste0("select * from all_sit_rep_data3 where INC = '",input$inc_site_rep,"'"))
    updatePickerInput(session,inputId = "Site_sit_rep",label="Site",choices=c("All Sites",unique(site_filter$Site))
    )}
  observeEvent(input$inc_site_rep,update_site_sit_rep(session))  
  
  # Observe event for change in incident number
  observeEvent(input$inc_site_rep,{
    #filter site rep data where is current =1 mydata1
    all_data_sit_rep1 <-loadData_site_rep()
    all_data_sit_rep1<-sqldf(paste0("select * from all_data_sit_rep1 where INC_sit_rep = '",input$inc_site_rep,"' and is_current=",1))

    values_sit_rep$Data<-sqldf(paste0("select *,'' as changed_sit_rep,'' as add_flag_sit_rep,'' as amend_flag_sit_rep from all_data_sit_rep1 
                                      where INC_sit_rep = '",input$inc_site_rep,"' and is_current=",1)) 
    values_sit_rep$Data<-data.table(values_sit_rep$Data)
    values_sit_rep$Data <- subset(values_sit_rep$Data,select=c(INC_sit_rep,Chairperson,Date,Time,Summary,Updates,Date_time_si,Site,Owner,Action,
                                                               Status,Updates2,is_current,Line_number,changed_sit_rep,add_flag_sit_rep,amend_flag_sit_rep))
    values_sit_rep$Data$changed_sit_rep<-as.character(values_sit_rep$Data$changed_sit_rep) #change abhi

    
    all_data_sit_rep_latest_dtstamp<-sqldf(paste0("select * from all_data_sit_rep1 where INC_sit_rep = '",input$inc_site_rep,"' and is_current=",1, " order by Date_time_si DESC limit 1"))
    if (nrow(all_data_sit_rep_latest_dtstamp)==0){
      updateTextInput(session,inputId = "site_rep_ChairPerson_", value ="")
      updateDateInput(session,inputId = "enter_date_sit", value=as.Date.character(Sys.Date(),"%Y-%m-%d"))
      updateTimeInput(session,inputId = "enter_time_sit", value=strptime(x="00:00",format="%H:%M"))
      updateTextAreaInput(session,inputId = "site_rep_summary_", value="")
      updateTextAreaInput(session,inputId = "site_rep_updates_", value="")
    }
    else {
      updateTextInput(session,inputId = "site_rep_ChairPerson_", value =all_data_sit_rep_latest_dtstamp$Chairperson)
      updateDateInput(session,inputId = "enter_date_sit", value=as.Date.character(all_data_sit_rep_latest_dtstamp$Date,"%Y-%m-%d"))
      updateTimeInput(session,inputId = "enter_time_sit", value=strptime(x=all_data_sit_rep_latest_dtstamp$Time,format="%H:%M"))
      updateTextAreaInput(session,inputId = "site_rep_summary_", value=all_data_sit_rep_latest_dtstamp$Summary)
      updateTextAreaInput(session,inputId = "site_rep_updates_", value=all_data_sit_rep_latest_dtstamp$Updates)
    }
  })
  
  
  observeEvent(input$add_sit_rep,{
    req(input$inc_site_rep)
    
    All_data_sit_rep3<-loadData_site_rep()
    All_data_sit_rep4 <- sqldf(paste0("select * from All_data_sit_rep3 where INC_sit_rep = '",input$inc_site_rep,"' and is_current=",1))
    lat_INC_sit_rep<-ifelse(nrow(All_data_sit_rep4)>=1,max(All_data_sit_rep4$Line_number,na.rm = TRUE),0) #change abhi

   
    add_sit_rep<-data.table(
      INC_sit_rep = c(input$inc_site_rep),
      Chairperson = c(input$site_rep_ChairPerson_),
      Date = c(format(input$enter_date_sit,"%Y-%m-%d")),
      Time = c(format(input$enter_time_sit,"%H:%M")),
      Summary = c(input$site_rep_summary_),
      Updates = c(input$site_rep_updates_),
      Date_time_si = format(Sys.time(), "%Y%m%d-%H%M%OS"),
      Site = c(input$Site_sit_rep),
      Owner = c(input$site_rep_owner1),
      Action = c(input$site_rep_action1),
      Status = c(input$site_rep_summary1),
      Updates2 = c(input$site_rep_updates1),
      is_current = c(1),
      Line_number = max(lat_INC_sit_rep+1,values_sit_rep$Data$Line_number+1),
      changed_sit_rep=c("Yes"),
      add_flag_sit_rep=c(1),
      amend_flag_sit_rep=c(0)
    )

    
    
    values_sit_rep$Data<-rbind(add_sit_rep,values_sit_rep$Data,fill=TRUE)
    values_sit_rep$Data<-subset(values_sit_rep$Data,Chairperson!="")
    values_sit_rep$Data$changed_sit_rep<-as.character(values_sit_rep$Data$changed_sit_rep) #change abhi

    #shinyjs::reset("sit_rep_form2")
    updateTextInput(session,inputId = "site_rep_owner1", value ="")
    updateTextInput(session,inputId = "site_rep_action1", value ="")
    updateTextInput(session,inputId = "site_rep_updates1", value ="")
    updatePickerInput(session,inputId = "site_rep_summary1",label="Status of situation",c('Open','Closed','In Progress'))
    })
  
  #display details of added situation below
  output$temp_sit_rep<-renderUI({
    
    if (nrow(values_sit_rep$Data)==0) {
      fluidPage(
        p("No Sit Reps present for this incident",style="font-family: 'BG Flame';font-weight: bold"))
    }
    else {
    fluidPage(
      fluidRow(column(11,p("The below situation/s will be added to the incident: ",style="font-family: 'BG Flame';font-weight: bold")),
               column(1,downloadButton("downloaddata_sit_reps","Download",style="background-color: #4472c4;color:#ffffff"))),
      hr(),
      column(12,dataTableOutput("Main_table_sit_rep")),
      tags$script(HTML('$(document).on("click", "input", function () {
                         var checkboxes = document.getElementsByName("row_selected");
                         var checkboxesChecked = [];
                         for (var i=0; i<checkboxes.length; i++) {
                         if (checkboxes[i].checked) {
                         checkboxesChecked.push(checkboxes[i].value);
                         }
                         }
                         Shiny.onInputChange("checked_rows",checkboxesChecked);
          })')),
      tags$script("$(document).on('click', '#Main_table_sit_rep button', function () {
                        Shiny.onInputChange('lastClickId2',this.id);
                        Shiny.onInputChange('lastClick2', Math.random())
          });"))}
  })
  
  output$Main_table_sit_rep<-renderDataTable({
    req(input$inc_site_rep)
    
    all_data_sit_rep2 <-values_sit_rep$Data
    DT_sit_rep=sqldf("select INC_sit_rep, Line_number as Action_number, Site, Owner, Action, Status, Updates2, Chairperson, Date, Time, 
                      Date_time_si from all_data_sit_rep2")
    DT_sit_rep[["Actions1"]]<-
      paste0('
                <div class="btn-group" role="group" aria-label="Basic example">
                <button type="button" class="btn btn-secondary modify" id=save_sit_rep_',1:nrow(DT_sit_rep),'>Modify</button>
                </div>
                ')
    DT_sit_rep<-DT_sit_rep %>% select(Actions1,everything())
    datatable(DT_sit_rep,
              escape=F,
              options=list(scrollX=TRUE),
              rownames=FALSE)})
  
  #Download data- sit reps
  output$downloaddata_sit_reps <- downloadHandler(
    filename = function() {
      paste("Sit_Reps for INC",input$inc_site_rep,".csv")
    },
    content = function(file) {
      all_data_sit_rep2 <-values_sit_rep$Data
      DT_sit_rep=sqldf("select INC_sit_rep, Line_number as Action_number, Site, Owner, Action, Status, Updates2, Chairperson, Date, Time, Summary, Updates, 
                      Date_time_si from all_data_sit_rep2")
      write.csv(DT_sit_rep,file, row.names = FALSE)
    })
  
  observeEvent(input$lastClick2,
               {
                 if (input$lastClickId2 %like% "m_delete_sit_rep_")
                 { 
                   row_to_del=as.numeric(gsub("m_delete_sit_rep_","",input$lastClickId2))
                   values_sit_rep$Data=values_sit_rep$Data[-row_to_del]
                 }})
  

  
  observeEvent(input$lastClick2,
               {
                 req(input$inc_site_rep)
                 if (input$lastClickId2%like%"save_sit_rep_")
                 {
                   site_filter1 <- loadData_crt_site()
                   site_filter1 <- sqldf(paste0("select * from site_filter1 where INC = '",input$inc_site_rep,"'"))
   
                   selected_row=as.numeric(gsub("save_sit_rep_","",input$lastClickId2))
                   old_row_sit_rep=values_sit_rep$Data[selected_row]

                   my_input_sit_rep<-reactive(fluidPage(
                     h3(strong("Edit existing sit rep details"),align="center"),
                     hr(),
                     fluidRow(column(6,paste0("INC : ",old_row_sit_rep$INC_sit_rep)),
                              column(6,paste0("Chairperson : ",old_row_sit_rep$Chairperson))),
                     
                     fluidRow(column(6,paste0("Date : ",old_row_sit_rep$Date)),
                              column(6,paste0("Time : ",old_row_sit_rep$Time))),hr(),
                     
                     fluidRow(column(12,paste0("Summary : ",value=old_row_sit_rep$Summary))),hr(),
                     fluidRow(column(6,paste0("Updates : ",value=old_row_sit_rep$Updates))),hr(),
                     
                     fluidRow(column(6,paste0("Site : ",value=old_row_sit_rep$Site)),
                              column(6,paste0("Action : ",value=old_row_sit_rep$Action))),hr(),
                     
                     fluidRow(column(12,textInput("Owner_mod_sit_rep"," Owner:",value = old_row_sit_rep$Owner))),
                     
                     
                     fluidRow(column(12,pickerInput("Status_mod_sit_rep"," Status:",c("","Closed","Open","In Progress"),selected=old_row_sit_rep$Status))),
                     fluidRow(column(12,textAreaInput("Updates2_mod_sit_rep","Updates2 :",value=old_row_sit_rep$Updates2,height=200,width = 550))),
                     

                     actionBttn(
                       inputId = "Sit_Rep_changes",
                       label = "Save changes",
                       style = "unite",
                       color = "primary"),
                     
                     tags$script(HTML("$(document).on('click', '#save_changes', function () {
                                      var list_value=[]
                                      for (i = 0; i < $( '.new_input' ).length; i++)
                                      {
                                      list_value.push($( '.new_input' )[i].value)
                                      }
                                      Shiny.onInputChange('newValue', list_value)
                 });"))
                   )
                   )
                   showModal(modalDialog(my_input_sit_rep(),easyClose=TRUE) )
                   X<-old_row_sit_rep$INC_sit_rep
                 }
               })
  
  observeEvent(input$Sit_Rep_changes,{
    selected_row=as.numeric(gsub("save_sit_rep_","",input$lastClickId2))
    old_row_sit_rep=values_sit_rep$Data[selected_row]
    
    test_a<-data.table(
      INC_sit_rep = c(old_row_sit_rep$INC_sit_rep ),
      Chairperson = c(old_row_sit_rep$Chairperson),
      Date = c(old_row_sit_rep$Date),
      Time = c(old_row_sit_rep$Time),
      Summary = c(old_row_sit_rep$Summary),
      Updates = c(old_row_sit_rep$Updates),
      Date_time_si = format(Sys.time(), "%Y%m%d-%H%M%OS"),
      Site = c(old_row_sit_rep$Site),
      Owner = c(input$Owner_mod_sit_rep),
      Action = c(old_row_sit_rep$Action),
      Status = c(input$Status_mod_sit_rep),
      Updates2 = c(input$Updates2_mod_sit_rep),
      is_current = c(1),
      Line_number = c(old_row_sit_rep$Line_number ), #change abhi
      changed_sit_rep = c('Yes'),
      add_flag_sit_rep=c(0),
      amend_flag_sit_rep=c(1)
    )

    values_sit_rep$Data[selected_row]<-test_a
    removeModal()
  })

    
    #### new code sit rep - Abhi ####
    observeEvent(input$save_sit_rep,{
      req(input$inc_site_rep)
      
      cur_time<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      test<-values_sit_rep$Data
      add_sit_rep1<-sqldf("select * from test where changed_sit_rep='Yes'")
      
      All_data_mod_sit_rep<-loadData_site_rep()
      
      All_data_mod_sit_rep_0<-sqldf(paste0("select * from All_data_mod_sit_rep where INC_sit_rep = '",input$inc_site_rep,"' and is_current=0"))
      All_data_mod_sit_rep<-sqldf(paste0("select * from All_data_mod_sit_rep where INC_sit_rep = '",input$inc_site_rep,"' and is_current=1"))
      
      
      existing_lines<-unique(All_data_mod_sit_rep$Line_number)
      
      add_sit_rep1$amend_flag_sit_rep<-ifelse(add_sit_rep1$Line_number %in% existing_lines, add_sit_rep1$amend_flag_sit_rep,0) #rectify amend flag if someone has added and amended the action in same step
      add_sit_rep1$add_flag_sit_rep<-ifelse(!(add_sit_rep1$Line_number %in% existing_lines), 1,add_sit_rep1$add_flag_sit_rep) #rectify amend flag if someone has added and amended the action in same step

      #amend
      add_sit_rep2<-sqldf("select * from add_sit_rep1 where amend_flag_sit_rep=1 and add_flag_sit_rep=0")
      if (nrow(add_sit_rep2)>0) {
        
        
        #Change is current flag for previous data and save the files
        All_data_mod_sit_rep<-select(All_data_mod_sit_rep,-c(is_current))
        
        All_data_mod_sit_rep<-sqldf("select a.*,case when b.Line_number > 0 then 0 else 1 end as is_current from All_data_mod_sit_rep as a left join add_sit_rep2 as b on a.line_number=b.line_number")
        All_data_mod_sit_rep<-rbind(All_data_mod_sit_rep,All_data_mod_sit_rep_0)
        All_data_mod_sit_rep_0
        
        for (i in unique(All_data_mod_sit_rep$Date_time_si)) {
          
          mod_old_data<-filter(All_data_mod_sit_rep,All_data_mod_sit_rep$Date_time_si==i)
          mod_old_data$amend_flag_sit_rep<-0
          mod_old_data$add_flag_sit_rep<-0
          mod_old_data$changed_sit_rep<-NA
          write_csv( mod_old_data ,path = paste0("Data_sit_rep/Sit_rep_Mydata",i , ".csv"))
        }
        
        #Write the newly modified data
        new_sit_rep<-sqldf(paste0("select INC_sit_rep, Chairperson, Date, Time, Summary, Updates, Date_time_si, Site, Owner, Action, Status, Updates2,changed_sit_rep,
                              is_current, Line_number from add_sit_rep2"))
        
        
        new_sit_rep$User<-session_user$Data
        new_sit_rep$Date_time_si<-cur_time 
        
        new_sit_rep$amend_flag_sit_rep<-0
        new_sit_rep$add_flag_sit_rep<-0
        new_sit_rep$changed_sit_rep<-NA
        
        write_csv(new_sit_rep, path = paste0("Data_sit_rep/Sit_rep_Mydata",cur_time , ".csv"))
        
      }
      
      #add and add/amend
      add_sit_rep3<-sqldf("select * from add_sit_rep1 where add_flag_sit_rep=1 and amend_flag_sit_rep=0")
      
      if (nrow(add_sit_rep3)>0) {
        #print("add")
        add_sit_rep3$Date_time_si<-cur_time 
        add_sit_rep3$User<-session_user$Data
        
        add_sit_rep3$amend_flag_sit_rep<-0
        add_sit_rep3$add_flag_sit_rep<-0
        add_sit_rep3$changed_sit_rep<-NA
        
        #If someone is adding and amending different actions in the same step then add the amended line to new line data 
        if(exists('new_sit_rep')) {
          if(nrow(new_sit_rep)>0) {
            add_sit_rep3<-rbind(add_sit_rep3,new_sit_rep)
          }
        }
        
        
        write_csv(add_sit_rep3, path = paste0("Data_sit_rep/Sit_rep_Mydata",cur_time , ".csv"))
        
      }
   
    
      
   
 
      
      #Send email for add sit rep details
      sender <- "zz_sm6496@centrica.com" # Replace with a valid address
      recipients <-  session_user$Data # Replace with one or more valid addresses
      
      # Convert the data frame into an HTML Table
      y <- htmlTable(add_sit_rep1 %>% select(-Date_time_si,-INC_sit_rep,-changed_sit_rep,-is_current,-add_flag_sit_rep,-amend_flag_sit_rep,-Summary,-Updates), rnames = FALSE)
      
      
      # Convert the data frame into an HTML Table
      #    y <- htmlTable(vals3_nr$Data  %>% select(-Date_time_nr,-User,-INC,-Changed_nr,-Is_current_nr) , rnames = FALSE)
      
      crt_info_sit_rep <- loadData_crt_site()
      crt_info_sit_rep<-sqldf(paste0("select * from crt_info_sit_rep where INC = '",input$inc_site_rep,"'"))
      
      crt_sit_open_tm<-min(crt_info_sit_rep$Date_time)
      #crt_info_imt<-sqldf(paste0("select * from crt_info_imt where  is_current==",1))
      crt_info_sit_rep<-sqldf(paste0("select * from crt_info_sit_rep where INC = '",input$inc_site_rep,"' and is_current==",1))
      # Define body of email
      html_body <- paste0('<html><head>
                        <style>
                        body{font-family:BG Flame, sans-serif;}
                        table{border-left:0.1px solid #000000;border-top:0.1px solid #000000;width: 1000px;}
                        table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        img {width: 1000px;}
                        </style>
                        </head><body><table>
                         
                        <tr><td><img src=\"https://azsu-p-app-026.azure.uk.centricaplc.com:3939/content/230/_w_13f9edc3/update.jpg\"></td></tr>',
                          "<tr><td><br>
                         <b>INC: </b>",paste0(unique(crt_info_sit_rep$INC),collapse="|"),"<br><br>
                         <b>Site impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_sit_rep$Site,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Business area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_sit_rep$Business_area,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Process area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_sit_rep$Process,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Teams impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_sit_rep$Teams,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Incident Description: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_sit_rep$Description,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                        
                        <b>Last update to the incident: </b>Latest update provided by Situation report-  <br> <br> Update - ",paste0(unique(as.list(unlist(strsplit(paste0(add_sit_rep1$Updates,collapse = '-'),'-')))) ,collapse=' | '),"<br> <br> Summary - ",
                          paste0(unique(as.list(unlist(strsplit(paste0(add_sit_rep1$Summary,collapse = '-'),'-')))) ,collapse=' | '),
                          "<br><br>",y,"
                        <br>
                         
                         <b>Incident open date: </b>",as.Date(substr(crt_sit_open_tm[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_sit_open_tm[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last updated date: </b>",as.Date(substr(add_sit_rep1$Date_time_si[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(add_sit_rep1$Date_time_si[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last user to update BCP: </b>",paste0(session_user$Data,collapse="-"),"<br><br>
                     
                        </td></tr></table></body></html>

                       "
                          
      )
      
      
      email_sit_rep <- send.mail(from = sender,
                                 to = recipients,
                                 subject=paste0("Incident ",crt_info_sit_rep$INC[1]," | Update | ",session_user$Data),
                                 body = html_body,
                                 smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                                 authenticate = FALSE,
                                 #inline=TRUE,
                                 html = TRUE,
                                 send = FALSE)
      email_sit_rep$send()
      
      
      shinyjs::reset("sit_rep_form1")
      shinyjs::reset("sit_rep_form2")
      shinyjs::reset("sit_rep_form3")
      
      sendSweetAlert(
        session = session,
        title = "Success !!",
        text = paste("Actions Added"),
        type = "success"
      )
      
      sit_reps_data$Data<-loadData_site_rep()
      updateProgressBar(session = session, id = "sit_rep_invol", value = length(unique(loadData_site_rep()$INC))*100/length(unique(loadData_crt_site()$INC)))
      
      
      
      
    })
    
  
  #########################  Amend Site IMT  ################################
  
  vals2_imt<-reactiveValues()
  
  vals2_imt$Data<-data.table(
    INC=c(NA),
    Site=c(NA),
    Who_is_impacted=c(''),
    Estimated_volume_of_users_impacted=c(''),
    Root_cause=c(''),
    Timescales_for_recovery=c(''),
    IMT=c(''),
    Comms=c(''),
    Site_continuity=c(''),
    Description=c(''),
    Changed_imt=c(''),
    Is_current_imt=c(''),
    Date_time_imt=c('')
  )
  
  observeEvent(input$IMT_mod_inc,{
    req(input$IMT_mod_inc)
    
    vals2_imt$Data<-data.table(
      INC=c(NA),
      Site=c(NA),
      Who_is_impacted=c(''),
      Estimated_volume_of_users_impacted=c(''),
      Root_cause=c(''),
      Timescales_for_recovery=c(''),
      IMT=c(''),
      Comms=c(''),
      Site_continuity=c(''),
      Description=c(''),
      Changed_imt=c(''),
      Is_current_imt=c(''),
      Date_time_imt=c('')
    )
    All_data_mod_IMT<-loadData_site_imt()
    write.csv(All_data_mod_IMT,"test.csv")
    All_data_mod_IMT<-sqldf(paste0("select * from All_data_mod_IMT where INC ='",input$IMT_mod_inc,"' and Is_current_imt=",1))
    All_data_mod_IMT<-sqldf(paste0("select INC,Site,Who_is_impacted,Estimated_volume_of_users_impacted,Root_cause,Timescales_for_recovery,IMT,
                                        Comms,Site_continuity,Description  from All_data_mod_IMT"))
    vals2_imt$Data<-rbind(All_data_mod_IMT,vals2_imt$Data,fill=TRUE)
    vals2_imt$Data<-subset(vals2_imt$Data,Site!="")})
  
  
  observeEvent(input$Refresh_btn_site_imt,{
    updateSelectInput(session,inputId = "IMT_mod_inc",label="Enter incident number:",
                      choices=c("",unique(all_INC_data$Data$INC)),selected="")
  })
  
  #check for closed incidents
  observeEvent(input$IMT_mod_inc,{
    req(input$IMT_mod_inc)
    All_data_mod<-loadData_crt_site()
    All_data_mod<-sqldf(paste0("select 
                               * from All_data_mod where INC = '",input$IMT_mod_inc,"'","and Is_current=1"))
    
    if (!is.na(All_data_mod$Status[1]))   
    {
      updateSelectInput(session,inputId = "IMT_mod_inc",label="Enter incident number:",
                        choices=c("",unique(all_INC_data$Data$INC)),selected="")
      sendSweetAlert(
        session = session,
        title = "Warning !!!",
        text = paste("Incident has been closed."),
        type = "warning"
      )}
  })
  
  #view IMT details
  output$CRT_inc_det1<-DT::renderDataTable({
    req(input$IMT_mod_inc)
    All_data_mod_CRT_1<-loadData_crt_site()
    All_data_mod_CRT_1<-sqldf(paste0("select * from All_data_mod_CRT_1 where INC = '",input$IMT_mod_inc,"' and is_current==",1))
    All_data_mod_CRT_1<-sqldf(paste0("select INC,Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Facilities,Vulnerable_customers from All_data_mod_CRT_1 "))
    
    datatable(All_data_mod_CRT_1,options = list(dom = 't',scrollX=TRUE),rownames = FALSE,escape=F)}
  )
  
  
  
  #Disable IMT_changes button if selections have not been made
  observe({
    mandatoryFilled_site_imt <-
      vapply(fieldsMandatory_site_imt,
             function(x) {
               !is.null(input[[x]]) && input[[x]] != ""
             },
             logical(1))
    mandatoryFilled_site_imt <- all(mandatoryFilled_site_imt)
    shinyjs::toggleState(id = "IMT_changes", condition = mandatoryFilled_site_imt)
  })  
  

  ### Disable submit button if no changes have been made
  observe({
    req(input$IMT_mod_inc)
    MandatoryFilled_imt_modify <- ifelse(nrow(vals2_imt$Data %>% filter(vals2_imt$Data$Changed_imt == "Yes"))>0,TRUE,FALSE)
    MandatoryFilled_imt_modify <- all(MandatoryFilled_imt_modify)
    shinyjs::toggleState(id = "Confirm_IMT_mod", condition = MandatoryFilled_imt_modify)
  })
  
  #Amend IMT details
  output$IMT_mod_inc_det<-DT::renderDataTable({
    req(input$IMT_mod_inc)
    DT_IMT<-vals2_imt$Data[,-c("Changed_imt","Is_current_imt","Date_time_imt")]
    DT_IMT[["Actions"]]<-
      paste0('
                <div class="btn-group" role="group" aria-label="Basic example">
                <button type="button" class="btn btn-secondary modify" id=modify_imt_',1:nrow(vals2_imt$Data),'>Update</button>
                </div>
                ')
    DT_IMT<-DT_IMT %>% select(Actions,everything())
    datatable(DT_IMT,options = list(dom = 't',scrollX=TRUE),rownames = FALSE,
              escape=F)}
  )
  
  
  observeEvent(input$lastClick,
               {
                 if (input$lastClickId%like%"modify_imt_")
                 {
                   selected_row=as.numeric(gsub("modify_imt_","",input$lastClickId))
                   old_row_imt=vals2_imt$Data[selected_row]
                   
                   my_input_imt<-reactive(fluidPage(
                     h3(strong("Edit Existing Site Details"),align="center"),
                     hr(),
                     fluidRow(column(6,paste0("INC : ",old_row_imt$INC)),
                              column(6,paste0("Site : ",old_row_imt$Site))),
                     hr(),
                     fluidRow(column(6,
                                     awesomeCheckboxGroup(
                                       inputId = "Who_is_impacted",
                                       label = "Who is impacted",
                                       choices = c("People","Engineers","Others"),inline = TRUE, 
                                       selected =  unlist(strsplit(as.character(old_row_imt$Who_is_impacted),"-"))
                                     ))),
                     hr(),
                     fluidRow(column(6,numericInput("Estimated_volume_of_users_impacted","Estimated volume of users impacted ",value =old_row_imt$Estimated_volume_of_users_impacted ))),
                     fluidRow(column(6,textAreaInput("Root_cause","Root Cause",value=old_row_imt$Root_cause,height=200,width = 550))),
                     #hr(),
                     fluidRow(column(6,pickerInput(
                       inputId = "Timescales_for_recovery",
                       label = "Timescales for Recovery",
                       choices = c('','0-1 hrs','2-4 hrs',' 4-6 hrs','6+ hrs'),selected=old_row_imt$Timescales_for_recovery)),
                       column(6,pickerInput(
                         inputId = "IMT",
                         label = "IMT",
                         choices = c('','Informed','Not Informed','Stood Up'),selected=old_row_imt$IMT))),
                     hr(),
                     fluidRow(column(6,pickerInput(
                       inputId = "Comms",
                       label = "Comms",
                       choices = c('','Yes','No','Not currently necesaary'),selected=old_row_imt$Comms),
                     ),
                        column(6,awesomeCheckboxGroup(
                                       inputId = "Site_continuity",
                                       label = "Site Continuity",
                                       choices = c("TL Cascade","Site Informed","Employee line updated ","On standby","Invoked","N/A"),
                                       selected =  unlist(strsplit(as.character(old_row_imt$Site_continuity),"-"))
                                       # status = "success"
                                     ))),
                     hr(),
                     fluidRow(column(6,textAreaInput("Description","Description: ",value =old_row_imt$Description,height = 200,width=550))),
                     
                     hr(),
                     
                     actionBttn(
                       inputId = "IMT_changes",
                       label = "Save changes",
                       style = "unite",
                       color = "primary"),
                     
                     tags$script(HTML("$(document).on('click', '#save_changes', function () {
                                      var list_value=[]
                                      for (i = 0; i < $( '.new_input' ).length; i++)
                                      {
                                      list_value.push($( '.new_input' )[i].value)
                                      }
                                      Shiny.onInputChange('newValue', list_value)
                 });"))
                   )
                   )
                   showModal(modalDialog(my_input_imt(),easyClose=TRUE) )
                   X<-old_row_imt$INC
                 }
               })
  
  observeEvent(input$IMT_changes,{
    selected_row=as.numeric(gsub("modify_imt_","",input$lastClickId))
    old_row_imt=vals2_imt$Data[selected_row]
    
    vals2_imt$Data[selected_row]<-data.table(
      INC=c(old_row_imt$INC),
      Site=c(old_row_imt$Site),
      Who_is_impacted=c(paste0(input$Who_is_impacted,collapse = "-")),
      Estimated_volume_of_users_impacted=c(input$Estimated_volume_of_users_impacted),
      Root_cause=c(input$Root_cause),
      Timescales_for_recovery=c( input$Timescales_for_recovery),
      IMT=c(input$IMT),
      Comms=c(input$Comms),
      Site_continuity=c(paste0(input$Site_continuity,collapse = "-")),
      Description=c(input$Description),
      Changed_imt=c('Yes'),
      Is_current_imt=c(''),
      Date_time_imt=c(''))
    
    removeModal()
  })
  
  # Ask for short description of the changes made by the user
  observeEvent(input$Confirm_IMT_mod,{
    req(input$IMT_mod_inc)
    
    All_data_mod_IMT<-loadData_site_imt()
    All_data_mod_IMT<-sqldf(paste0("select * from All_data_mod_IMT where INC = '",input$IMT_mod_inc,"' and Is_current_imt==1"))
    All_data_mod_IMT<-sqldf(paste0("select INC,Site,Who_is_impacted,Estimated_volume_of_users_impacted,Root_cause,Timescales_for_recovery,IMT,
                                   Comms,Site_continuity,Description,Date_time_imt,User  from All_data_mod_IMT"))
    
    temp_data_imt<-vals2_imt$Data
    vals2_imt$Data<-sqldf("select * from temp_data_imt where Changed_imt='Yes'")
    temp_data_imt<-vals2_imt$Data
    All_data_mod_IMT<-sqldf(paste0("select a.*,case when length(b.Site)>1 then 0 else 1 end as Is_current_imt  from All_data_mod_IMT as a left join temp_data_imt as b on a.Site=b.Site"))
    
    old_dttm_imt<-sqldf("select distinct Date_time_imt from All_data_mod_IMT ")
    #old entries
    for (i in unique(old_dttm_imt$Date_time_imt)){
      test2<-sqldf(paste0("select * from All_data_mod_IMT where Date_time_imt='",i,"'"))
      write_csv(test2,path=paste0("Data_site_IMT/IMT_Mydata",i,".csv"))
    }
    
    #Write the new entries to the data
    vals2_imt$Data$Date_time_imt<-format(Sys.time(), "%Y%m%d-%H%M%OS")
    vals2_imt$Data$Is_current_imt<-1
    vals2_imt$Data$User<-session_user$Data
    # vals2_imt$Data$Change_details_imt<-c(input$changes_desc_imt)
    vals2_imt$Data$User<-session_user$Data
    write_csv(x = vals2_imt$Data, path = paste0("Data_site_IMT/IMT_Mydata",format(Sys.time(), "%Y%m%d-%H%M%OS"),".csv"))
    
    shinyjs::reset("IMT_mod_pg")
    
    sendSweetAlert(
      session = session,
      title = "Success !!",
      text = paste("Site Details Modified"),
      type = "success"
    )

    #Send email for amending Site IMT details
    sender <- "zz_sm6496@centrica.com" # Replace with a valid address
    recipients <- session_user$Data # Replace with one or more valid addresses
    
    # Convert the data frame into an HTML Table
    y <- htmlTable(vals2_imt$Data  %>% select(-Date_time_imt,-User,-INC,-Changed_imt,-Is_current_imt,-Description) , rnames = FALSE)
    
    crt_info_imt <- loadData_crt_site()
    crt_info_imt<-sqldf(paste0("select * from crt_info_imt where INC = '",input$IMT_mod_inc,"'"))
    
    crt_imt_open_tm<-min(crt_info_imt$Date_time)
    #crt_info_imt<-sqldf(paste0("select * from crt_info_imt where  is_current==",1))
    crt_info_imt<-sqldf(paste0("select * from crt_info_imt where INC = '",input$IMT_mod_inc,"' and is_current==",1))
    # Define body of email
    html_body <- paste0('<html><head>
                        <style>
                        body{font-family:BG Flame, sans-serif;}
                        table{border-left:0.1px solid #000000;border-top:0.1px solid #000000;width: 1000px;}
                        table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        img {width: 1000px;}
                        </style>
                        </head><body><table>
                         
                        <tr><td><img src=\"https://azsu-p-app-026.azure.uk.centricaplc.com:3939/content/230/_w_13f9edc3/update.jpg\"></td></tr>',
                        "<tr><td><br><br>

                         <b>INC: </b>",paste0(unique(crt_info_imt$INC),collapse="|"),"<br><br>
                         <b>Site impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_imt$Site,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Business area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_imt$Business_area,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Process area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_imt$Process,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Teams impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_imt$Teams,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Incident Description: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_imt$Description,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                        
                        <b>Last update to the incident: </b>","Last update provided by Incident Management team: ", paste0(unique(as.list(unlist(strsplit(paste0(vals2_imt$Data$Description,collapse = '-'),'-')))) ,collapse=' | ') ,"<br><br>",y,"<br>
                         
                         <b>Incident open date: </b>",as.Date(substr(crt_imt_open_tm[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_imt_open_tm[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last updated date: </b>",as.Date(substr(vals2_imt$Data$Date_time[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(vals2_imt$Data$Date_time[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last user to update BCP: </b>",paste0(vals2_imt$Data$User[1]),"<br><br>
                     </td></tr>
                        </table></body></html>

                       "
                        
    )
    
    
    email_imt <- send.mail(from = sender,
                           to = recipients,
                           subject=paste0("Incident ",vals2_imt$Data$INC[1]," | Update | ",session_user$Data),
                           body = html_body,
                           smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                           authenticate = FALSE,
                           #inline=TRUE,
                           html = TRUE,
                           send = FALSE)
    email_imt$send()
    
    
    imt_data$Data<-loadData_site_imt()
    updateProgressBar(session = session, id = "site_invol", value = count_imt_involvement()*100/length(unique(loadData_crt_site()$INC)))
    
    
    
  })
  
  
  ########################## Amend Site NR ################################
  
  vals3_nr<-reactiveValues()
  vals3_nr$Data<-data.table(
    INC=c(NA),
    Site=c(NA),
    Action_required=c(''),
    Sungard_required=c(''),
    Sungard_available=c(''),
    Sungard_accessible=c(''),
    Escalation_required=c(''),
    Escalated_to=c(''),
    Comments=c(''),
    Changed_nr=c(''),
    Is_current_nr=c(''),
    Date_time_nr=c('')
    
  )
  
  observeEvent(input$NR_mod_inc,{
    req(input$NR_mod_inc)
    
    vals3_nr$Data<-data.table(
      INC=c(NA),
      Site=c(NA),
      Action_required=c(''),
      Sungard_required=c(''),
      Sungard_available=c(''),
      Sungard_accessible=c(''),
      Escalation_required=c(''),
      Escalated_to=c(''),
      Comments=c(''),
      Changed_nr=c(''),
      Is_current_nr=c(''),
      Date_time_nr=c('')
      
    )
    All_data_mod_NR<-loadData_site_nr()
    All_data_mod_NR<-sqldf(paste0("select * from All_data_mod_NR where INC ='",input$NR_mod_inc,"' and Is_current_nr=",1))
    All_data_mod_NR<-sqldf(paste0("select INC,Site,Action_required,Sungard_required,Sungard_available,
                                  Sungard_accessible,Escalation_required,Escalated_to,Comments from All_data_mod_NR"))
    
    vals3_nr$Data<-rbind(All_data_mod_NR,vals3_nr$Data,fill=TRUE)
    vals3_nr$Data<-subset(vals3_nr$Data,Site!="")})
  
  
  observeEvent(input$Refresh_btn_nr,{
    updateSelectInput(session,inputId = "NR_mod_inc",label="Enter Incident number",
                      choices=c("",unique(all_INC_data$Data$INC)),selected="")
  })
  
  #check for closed incidents
  observeEvent(input$NR_mod_inc,{
    req(input$NR_mod_inc)
    All_data_mod<-loadData_crt_site()
    All_data_mod<-sqldf(paste0("select 
                               * from All_data_mod where INC = '",input$NR_mod_inc,"'","and Is_current=1"))
    
    if (!is.na(All_data_mod$Status[1]))   
    {
      updateSelectInput(session,inputId = "NR_mod_inc",label="Enter Incident number",
                        choices=c("",unique(all_INC_data$Data$INC)),selected="")
      sendSweetAlert(
        session = session,
        title = "Warning !!!",
        text = paste("Incident has been closed."),
        type = "warning"
      )}
  })
  
  #view NR details
  output$CRT_inc_det2<-DT::renderDataTable({
    req(input$NR_mod_inc)
    All_data_mod_CRT<-loadData_crt_site()
    All_data_mod_CRT<-sqldf(paste0("select * from All_data_mod_CRT where INC = '",input$NR_mod_inc,"' and is_current==",1))
    All_data_mod_CRT<-sqldf(paste0("select INC,Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Facilities,Vulnerable_customers from All_data_mod_CRT "))
    
    datatable(All_data_mod_CRT,options = list(dom = 't',scrollX=TRUE),rownames = FALSE,escape=F)}
  )
  
  
  #Disable NR_changes button if selections have not been made
  observe({
    mandatoryFilled_site_nr <-
      vapply(fieldsMandatory_site_nr,
             function(x) {
               !is.null(input[[x]]) && input[[x]] != ""
             },
             logical(1))
    mandatoryFilled_site_nr <- all(mandatoryFilled_site_nr)
    shinyjs::toggleState(id = "NR_changes", condition = mandatoryFilled_site_nr)
  })  

  
  ### Disable submit button if no changes have been made
  observe({
    req(input$NR_mod_inc)
    MandatoryFilled_nr_modify <- ifelse(nrow(vals3_nr$Data %>% filter(vals3_nr$Data$Changed_nr == "Yes"))>0,TRUE,FALSE)
    MandatoryFilled_nr_modify <- all(MandatoryFilled_nr_modify)
    shinyjs::toggleState(id = "Confirm_NR_mod", condition = MandatoryFilled_nr_modify)
  })
  
  
  
  #Amend NR details
  output$NR_mod_inc_det<-DT::renderDataTable({
    req(input$NR_mod_inc)
    DT_NR<-vals3_nr$Data[,-c("Changed_nr","Is_current_nr","Date_time_nr")]
    
    DT_NR[["Actions"]]<-
      paste0('
                <div class="btn-group" role="group" aria-label="Basic example">
                <button type="button" class="btn btn-secondary modify" id=modify_nr_',1:nrow(vals3_nr$Data),'>Modify</button>
                </div>
                ')
    DT_NR<-DT_NR %>% select(Actions,everything())
    datatable(DT_NR,options = list(dom = 't',scrollX=TRUE),rownames = FALSE,
              escape=F)}
  )
  
  observeEvent(input$lastClick,
               {
                 if (input$lastClickId%like%"modify_nr_")
                 {
                   selected_row=as.numeric(gsub("modify_nr_","",input$lastClickId))
                   old_row_nr=vals3_nr$Data[selected_row]
                   
                   my_input_nr<-reactive(fluidPage(
                     h3(strong("Edit Existing NR Details"),align="center"),
                     hr(),
                     fluidRow(column(6,paste0("INC : ",old_row_nr$INC)),
                              column(6,paste0("Site : ",old_row_nr$Site))),
                     
                     hr(),
                     fluidRow(column(6,selectInput("Action_required","Actions Required:",c("",unique(form_options$Options)),selected=old_row_nr$Action_required)),
                              column(6,selectInput("Sungard_required","Sungard Required:",c("","Yes","No","On Standby"),selected=old_row_nr$Sungard_required))),
                     
                     fluidRow(column(6,selectInput("Sungard_available","Sungard available:",c("","Yes","No"),selected=old_row_nr$Sungard_available)),
                              column(6,selectInput("Sungard_accessible","Sungard accessible:",c("","Yes","No"),selected=old_row_nr$Sungard_accessible))),
                     
                     hr(),
                     fluidRow(column(3,selectInput("Escalation_required","Escalation Required:",c("","Yes","No"),selected=old_row_nr$Escalation_required))),
                     fluidRow(column(3, textAreaInput("Escalated_to", "Escalated to:",value =old_row_nr$Escalated_to, height =200,width = 550))),
                     
                     
                     
                     fluidRow(column(12,textAreaInput("Comments", "Updates/Comments",value =old_row_nr$Comments, height =200,width = 550))),
                     

                     actionBttn(
                       inputId = "NR_changes",
                       label = "Save changes",
                       style = "unite",
                       color = "primary"),
                     
                     tags$script(HTML("$(document).on('click', '#save_changes', function () {
                                      var list_value=[]
                                      for (i = 0; i < $( '.new_input' ).length; i++)
                                      {
                                      list_value.push($( '.new_input' )[i].value)
                                      }
                                      Shiny.onInputChange('newValue', list_value)
                 });"))
                   )
                   )
                   showModal(modalDialog(my_input_nr(),easyClose=TRUE) )
                   X<-old_row_nr$INC_nr
                 }
               })
  
  
  
  observeEvent(input$Sungard_required,{
    if (input$Sungard_required=="Yes"){
      shinyjs::show("Sungard_available")
      shinyjs::show("Sungard_accessible")
      
    }
    else {
      shinyjs::hide("Sungard_available")
      shinyjs::hide("Sungard_accessible")
      updateTextInput(session, "Sungard_available","Sungard available:", "")
      updateTextInput(session, "Sungard_accessible","Sungard accessible:", "")
      
    }
  })
  
  
  observeEvent(input$Escalation_required,{
    if (input$Escalation_required=="Yes"){
      shinyjs::show("Escalated_to")
      
    }
    else {
      shinyjs::hide("Escalated_to")
      
      updateTextInput(session, "Escalated_to","Escalated to:", "")
      updateTextInput(session, "Comments","Updates/Comments", "")
      
    }
  })
  
  # updateTextInput(session, "Comments","Updates/Comments", "")
  
  
  observeEvent(input$NR_changes,{
    selected_row=as.numeric(gsub("modify_nr_","",input$lastClickId))
    old_row_nr=vals3_nr$Data[selected_row]
    
    vals3_nr$Data[selected_row]<-data.table(
      INC=c(old_row_nr$INC),
      Site=c(old_row_nr$Site),
      Action_required=c(input$Action_required),
      Sungard_required=c(input$Sungard_required),
      Sungard_available=c(input$Sungard_available),
      Sungard_accessible=c(input$Sungard_accessible),
      Escalation_required=c(input$Escalation_required),
      Escalated_to=c(input$Escalated_to),
      Comments=c(input$Comments),
      Changed_nr=c('Yes'),
      Is_current_nr=c(''),
      Date_time_nr=c('')
    )
    removeModal()
  })
  
  #Ask for short description of the changes made by the user
  observeEvent(input$Confirm_NR_mod,{
    req(input$NR_mod_inc)
    
    #   changes_details_nr<-reactive(fluidPage(
    #     h3(strong("Please give a short description of the changes"),align="center"),
    #     hr(),
    #     fluidRow(column(6,textAreaInput("changes_desc_nr","Desciption: ",width = 200))),
    #     hr(),
    #     actionButton("NR_changes_final","Submit")))
    #   showModal(modalDialog(changes_details_nr(),easyClose=TRUE) )
    # })
    # 
    # observeEvent(input$NR_changes_final,{
    #   req(input$NR_mod_inc) 
    #   removeModal()
    
    All_data_mod_NR<-loadData_site_nr()
    All_data_mod_NR<-sqldf(paste0("select * from All_data_mod_NR where INC = '",input$NR_mod_inc,"' and Is_current_nr==1"))
    All_data_mod_NR<-sqldf(paste0("select INC,Site,Action_required,Sungard_required,Sungard_available,
                                  Sungard_accessible,Escalation_required,Escalated_to,Comments,Date_time_nr,User  from All_data_mod_NR "))
    
    temp_data_nr<-vals3_nr$Data
    vals3_nr$Data<-sqldf("select * from temp_data_nr where Changed_nr='Yes'")
    temp_data_nr<-vals3_nr$Data
    All_data_mod_NR<-sqldf(paste0("select a.*,case when length(b.Site)>1 then 0 else 1 end as Is_current_nr  from All_data_mod_NR as a left join temp_data_nr as b on a.Site=b.Site"))
    
    old_dttm_nr<-sqldf("select distinct Date_time_nr from All_data_mod_NR ")
    #old entries
    for (i in unique(old_dttm_nr$Date_time_nr)){
      test2<-sqldf(paste0("select * from All_data_mod_NR where Date_time_nr='",i,"'"))
      write_csv(test2,paste0("Data_site_NR/NR_Mydata",i,".csv"))
    }
    
    #Write the new entries to the data
    vals3_nr$Data$Date_time_nr<-format(Sys.time(), "%Y%m%d-%H%M%OS")
    vals3_nr$Data$Is_current_nr<-1
    vals3_nr$Data$Change_details_nr<-c(input$changes_desc_nr)
    vals3_nr$Data$User<-session_user$Data
    write_csv(x = vals3_nr$Data, path = paste0("Data_site_NR/NR_Mydata",format(Sys.time(), "%Y%m%d-%H%M%OS"),".csv"))
    
    shinyjs::reset("NR_mod_pg")
    
    sendSweetAlert(
      session = session,
      title = "Success !!",
      text = paste("NR Details Modified"),
      type = "success"
    )

    
    sender <- "zz_sm6496@centrica.com" # Replace with a valid address
    recipients <- session_user$Data # Replace with one or more valid addresses
    
    # Convert the data frame into an HTML Table
    y <- htmlTable(vals3_nr$Data  %>% select(-Date_time_nr,-User,-INC,-Changed_nr,-Is_current_nr) , rnames = FALSE)
    
    crt_info_nr <- loadData_crt_site()
    crt_info_nr<-sqldf(paste0("select * from crt_info_nr where INC = '",input$NR_mod_inc,"'"))
    
    crt_nr_open_tm<-min(crt_info_nr$Date_time)
    #crt_info_imt<-sqldf(paste0("select * from crt_info_imt where  is_current==",1))
    crt_info_nr<-sqldf(paste0("select * from crt_info_nr where INC = '",input$NR_mod_inc,"' and is_current==",1))
    # Define body of email
    html_body <- paste0('<html><head>
                        <style>
                        body{font-family:BG Flame, sans-serif;}
                        table{border-left:0.1px solid #000000;border-top:0.1px solid #000000;width: 1000px;}
                        table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        img {width: 1000px;}
                        </style>
                        </head><body><table>
                         
                        <tr><td><img src=\"https://azsu-p-app-026.azure.uk.centricaplc.com:3939/content/230/_w_13f9edc3/update.jpg\"></td></tr>',
                        "<tr><td><br>
                         <b>INC: </b>",paste0(unique(crt_info_nr$INC),collapse="|"),"<br><br>
                         <b>Site impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_nr$Site,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Business area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_nr$Business_area,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Process area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_nr$Process,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Teams impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_nr$Teams,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Incident Description: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_nr$Description,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                        
                        <b>Last update to the incident: </b>Last update provided by National Resilience team:<br><br>",y,"
                        <br>
                         
                         <b>Incident open date: </b>",as.Date(substr(crt_nr_open_tm[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_nr_open_tm[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last updated date: </b>",as.Date(substr(vals3_nr$Data$Date_time[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(vals3_nr$Data$Date_time[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last user to update BCP: </b>",paste0(vals3_nr$Data$User[1]),"<br><br>
                     
                        </td></tr></table></body></html>

                       "
                        
    )
    
    
    email_imt <- send.mail(from = sender,
                           to = recipients,
                           subject=paste0("Incident ",vals3_nr$Data$INC[1]," | Update | ",session_user$Data),
                           body = html_body,
                           smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                           authenticate = FALSE,
                           #inline=TRUE,
                           html = TRUE,
                           send = FALSE)
    email_imt$send()
    
    updateProgressBar(session = session, id = "nr_invol", value = count_nr_involvement()*100/length(unique(loadData_crt_site()$INC)))
    nr_data$Data<-loadData_site_nr()
    
    
  })
  
  ######################## Amend Site RP ###################################  
  
  
  
  #Show details for messaging .
  observeEvent(input$msg_req_rp,{
    if (input$msg_req_rp==TRUE){
      shinyjs::show("messaging_requ_details")}
    else if
    (input$msg_req_rp==FALSE) {
      shinyjs::hide("messaging_requ_details")}
  })
  
  # observeEvent(input$msg_req_rp,{
  #   req(input$RP_mod_inc)
  #   All_data_mod_CRT_2<-loadData_site_rp_step4()
  #   All_data_mod_CRT_2<-sqldf(paste0("select rp_step4 from All_data_mod_CRT_2 where INC_rp = '",2,"' and is_current==",1))
  #   if (All_data_mod_CRT_2$rp_step4=="Yes"){
  #     shinyjs::show("messaging_requ_details")}
  #   else {
  #     shinyjs::hide("messaging_requ_details")}
  # })
  
  #Show details for telephony .
  observeEvent(input$telephony_rp,{
    if (input$telephony_rp==TRUE){
      shinyjs::show("telephony_requ_details")}
    else if 
    (input$telephony_rp==FALSE) {
      shinyjs::hide("telephony_requ_details")}
  })
  
  #Show details for webchat-step6
  observeEvent(input$webchat_rp,{
    if (input$webchat_rp==TRUE){
      shinyjs::show("webchat_requ_details")}
    else if 
    (input$webchat_rp==FALSE) {
      shinyjs::hide("webchat_requ_details")}
  })
  
  #Show details for social-step7
  observeEvent(input$social_rp,{
    if (input$social_rp==TRUE){
      shinyjs::show("social_requ_details")}
    else if 
    (input$social_rp==FALSE) {
      shinyjs::hide("social_requ_details")}
  })
  
  
  
  
  
  
  observeEvent(input$Refresh_btn_site_rp,{
    updateSelectInput(session,inputId = "RP_mod_inc",label="Enter incident number:",
                      choices=c("",unique(all_INC_data$Data$INC)),selected="")
    shinyjs::reset("messaging_requ_details")
    shinyjs::reset("telephony_requ_details")
    shinyjs::reset("webchat_requ_details")
    shinyjs::reset("social_requ_details")
    updateTextAreaInput(session,inputId="site_rp_actions_s4",value = "") 
    updateTextAreaInput(session,inputId="site_rp_actions_s5",value = "") 
    updateTextAreaInput(session,inputId="site_rp_actions_s6",value = "") 
    updateTextAreaInput(session,inputId="site_rp_actions_s7",value = "") 
  })
  
  
  
  
  output$CRT_inc_det_rp1<-DT::renderDataTable({
    req(input$RP_mod_inc)
    All_data_mod_CRT_2<-loadData_crt_site()
    All_data_mod_CRT_2<-sqldf(paste0("select * from All_data_mod_CRT_2 where INC = '",input$RP_mod_inc,"' and is_current==",1))
    All_data_mod_CRT_2<-sqldf(paste0("select INC,Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Facilities,Vulnerable_customers from All_data_mod_CRT_2 "))
    
    datatable(All_data_mod_CRT_2,options = list(dom = 't',scrollX=TRUE),rownames = FALSE,escape=F)}
  )
  
  update_variables <- reactiveValues()
  output$CRT_inc_det_rp2<-DT::renderDataTable({
    req(input$RP_mod_inc)
    All_data_mod_CRT_2<-loadData_crt_site()
    All_data_mod_CRT_2<-sqldf(paste0("select * from All_data_mod_CRT_2 where INC = '",input$RP_mod_inc,"' and is_current==",1))
    update_variables$Data<-Recommendations %>% filter (Recommendations$Business_Area %in% unlist(strsplit(as.character(All_data_mod_CRT_2$Business_area),"-")) &
                                                         Recommendations$Process %in% unlist(strsplit(as.character(All_data_mod_CRT_2$Process),"-")) &
                                                         Recommendations$Site %in% unlist(strsplit(as.character(All_data_mod_CRT_2$Site),"-")))
    
    datatable(Recommendations %>% filter (Recommendations$Business_Area %in% unlist(strsplit(as.character(All_data_mod_CRT_2$Business_area),"-")) &
                                            Recommendations$Process %in% unlist(strsplit(as.character(All_data_mod_CRT_2$Process),"-")) &
                                            Recommendations$Site %in% unlist(strsplit(as.character(All_data_mod_CRT_2$Site),"-"))),
              editable=FALSE,
              options = list(scrollX=TRUE),escape=F)
  })
  
  
  
  #update the values of reactive data
  vals4_rp_step4<-reactiveValues()
  vals4_rp_step5<-reactiveValues()
  vals4_rp_step6<-reactiveValues()
  vals4_rp_step7<-reactiveValues()
  
  
  
  
  
  
  observeEvent(input$RP_mod_inc,{
    req(input$RP_mod_inc)
    
    #check for closed incidents
    All_data_mod<-loadData_crt_site()
    All_data_mod<-sqldf(paste0("select 
                               * from All_data_mod where INC = '",input$RP_mod_inc,"'","and Is_current=1"))
    
    if (!is.na(All_data_mod$Status[1]))   
    {
      updateSelectInput(session,inputId = "RP_mod_inc",label="Enter Incident number",
                        choices=c("",unique(all_INC_data$Data$INC)),selected="")
      sendSweetAlert(
        session = session,
        title = "Warning !!!",
        text = paste("Incident has been closed."),
        type = "warning"
      )}
    
    
    
    #update data as per the incident
    all_sit_rp_data <-loadData_site_rp_step4()
    all_sit_rp_data<-sqldf(paste0("select * from all_sit_rp_data where INC_rp = '",input$RP_mod_inc,"' and is_current=",1))
    
    vals4_rp_step4$Data<-sqldf(paste0("select *,'' as changed_rp_step4,'' as add_flag_rp_step4,'' as amend_flag_rp_step4 from all_sit_rp_data 
                                      where INC_rp = '",input$RP_mod_inc,"' and is_current=",1)) 
    vals4_rp_step4$Data<-data.table(vals4_rp_step4$Data)
    vals4_rp_step4$Data <- subset(vals4_rp_step4$Data,select=c(INC_rp,Site_rp_s4,Business_area_rp_s4, Process_rp_s4, Priority_rating_rp_s4, Team_name_rp_s4, ivr_messaging_rp, ivr_msg_details, 
                                                               online_messaging_rp, online_msg_details, social_media_rp, site_rp_actions_s4,Line_number, is_current,Date_time_step4,
                                                               changed_rp_step4, add_flag_rp_step4, amend_flag_rp_step4,msg_req_rp))
    vals4_rp_step4$Data$changed_rp_step4<-as.character(vals4_rp_step4$Data$changed_rp_step4)
    
    
    
    all_sit_rp_data <-loadData_site_rp_step5()
    all_sit_rp_data<-sqldf(paste0("select * from all_sit_rp_data where INC_rp = '",input$RP_mod_inc,"' and is_current=",1))
    
    vals4_rp_step5$Data<-sqldf(paste0("select *,'' as changed_rp_step5,'' as add_flag_rp_step5,'' as amend_flag_rp_step5 from all_sit_rp_data 
                                      where INC_rp = '",input$RP_mod_inc,"' and is_current=",1)) 
    vals4_rp_step5$Data<-data.table(vals4_rp_step5$Data)
    vals4_rp_step5$Data <- subset(vals4_rp_step5$Data,select=c(INC_rp,Site_rp_s5,Business_area_rp_s5, Process_rp_s5, Priority_rating_rp_s5, Team_name_rp_s5,line_closure_rp,
                                                               lines_closed_rp,calls_diverted_from_rp, calls_diverted_to_rp,site_rp_actions_s5,Line_number,is_current,Date_time_step5,
                                                               changed_rp_step5, add_flag_rp_step5, amend_flag_rp_step5,telephony_rp))
    vals4_rp_step5$Data$changed_rp_step5<-as.character(vals4_rp_step5$Data$changed_rp_step5)
    
    
    
    all_sit_rp_data <-loadData_site_rp_step6()
    all_sit_rp_data<-sqldf(paste0("select * from all_sit_rp_data where INC_rp = '",input$RP_mod_inc,"' and is_current=",1))
    
    vals4_rp_step6$Data<-sqldf(paste0("select *,'' as changed_rp_step6,'' as add_flag_rp_step6,'' as amend_flag_rp_step6 from all_sit_rp_data 
                                      where INC_rp = '",input$RP_mod_inc,"' and is_current=",1)) 
    vals4_rp_step6$Data<-data.table(vals4_rp_step6$Data)
    vals4_rp_step6$Data <- subset(vals4_rp_step6$Data,select=c(INC_rp,Site_rp_s6,Business_area_rp_s6,Process_rp_s6,Priority_rating_rp_s6,Team_name_rp_s6,Area_impacted_rp,location_impacted_rp,fte_impacted_rp,
                                                               issue_rp,site_rp_actions_s6, Line_number,is_current,Date_time_step6,
                                                               changed_rp_step6, add_flag_rp_step6, amend_flag_rp_step6,webchat_rp))
    vals4_rp_step6$Data$changed_rp_step6<-as.character(vals4_rp_step6$Data$changed_rp_step6)
    
    
    
    all_sit_rp_data <-loadData_site_rp_step7()
    all_sit_rp_data<-sqldf(paste0("select * from all_sit_rp_data where INC_rp = '",input$RP_mod_inc,"' and is_current=",1))
    
    vals4_rp_step7$Data<-sqldf(paste0("select *,'' as changed_rp_step7,'' as add_flag_rp_step7,'' as amend_flag_rp_step7 from all_sit_rp_data 
                                      where INC_rp = '",input$RP_mod_inc,"' and is_current=",1)) 
    vals4_rp_step7$Data<-data.table(vals4_rp_step7$Data)
    vals4_rp_step7$Data <- subset(vals4_rp_step7$Data,select=c(INC_rp,Site_rp_s7,Business_area_rp_s7,Process_rp_s7,Priority_rating_rp_s7,Team_name_rp_s7,Area_impacted_rp1,location_impacted_rp1,fte_impacted_rp1,
                                                               issue_rp1,site_rp_actions_s7, Line_number,is_current,Date_time_step7,
                                                               changed_rp_step7, add_flag_rp_step7, amend_flag_rp_step7,social_rp))
    vals4_rp_step7$Data$changed_rp_step7<-as.character(vals4_rp_step7$Data$changed_rp_step7)
    
    
    
    #check for data- step 4
    if (nrow(vals4_rp_step4$Data)==0) {
      shinyjs::hide("messaging_requ_details")
      updateSwitchInput(session, inputId="msg_req_rp", value = FALSE)
    }
    else
    {
      shinyjs::show("messaging_requ_details")
      updateSwitchInput(session, inputId="msg_req_rp", value = TRUE)}
    
    #check for data- step 5
    if (nrow(vals4_rp_step5$Data)==0) {
      shinyjs::hide("telephony_requ_details")
      updateSwitchInput(session, inputId="telephony_rp", value = FALSE)
    }
    else
    {
      shinyjs::show("telephony_requ_details")
      updateSwitchInput(session, inputId="telephony_rp", value = TRUE)}
    
    #check for data- step 6
    if (nrow(vals4_rp_step6$Data)==0) {
      shinyjs::hide("webchat_requ_details")
      updateSwitchInput(session, inputId="webchat_rp", value = FALSE)
    }
    else
    {
      shinyjs::show("webchat_requ_details")
      updateSwitchInput(session, inputId="webchat_rp", value = TRUE)}
    
    #check for data- step 7
    if (nrow(vals4_rp_step7$Data)==0) {
      shinyjs::hide("social_requ_details")
      updateSwitchInput(session, inputId="social_rp", value = FALSE)
    }
    else
    {
      shinyjs::show("social_requ_details")
      updateSwitchInput(session, inputId="social_rp", value = TRUE)}
    
  })
  
  
  
  ##### RP step 4#################
  #disable add button if all fields are not filled
  observe({
    MandatoryFilled_rp_step4 <-
      vapply(fieldsMandatory_rp_step4,
             function(x) {
               ifelse(x=="Site_rp_s4",  !is.na(input[[x]]) && input[[x]]!=0 && length(input[[x]]) !=0 , !is.null(input[[x]]) && input[[x]] != "" )
               #!is.null(input[[x]]) && input[[x]] != "" 
             },
             logical(1))
    MandatoryFilled_rp_step4 <- all(MandatoryFilled_rp_step4)
    
    #Check if dates have been populated
    shinyjs::toggleState(id = "add_rp_step4", condition = MandatoryFilled_rp_step4)
  })
  
  #disable submit button if no changes have been made
  observe({
    req(input$RP_mod_inc)
    MandatoryFilled_rp_step4_modify <- ifelse(nrow(vals4_rp_step4$Data %>% filter(vals4_rp_step4$Data$changed_rp_step4 == "Yes"))>0,TRUE,FALSE)
    MandatoryFilled_rp_step4_modify <- all(MandatoryFilled_rp_step4_modify)
    shinyjs::toggleState(id = "save_rp_step4", condition = MandatoryFilled_rp_step4_modify)
  })
  
  #update drop downs- first 5 fields
  update_site_sit_rp_s4<-function(session){
    req(input$RP_mod_inc)
    all_sit_rp_data<-loadData_crt_site()
    site_filter<-sqldf(paste0("select * from all_sit_rp_data where INC = '",input$RP_mod_inc,"'"))
    updatePickerInput(session,inputId = "Site_rp_s4",label="Site",choices=c("",unique(site_filter$Site))
    )}
  observeEvent(input$RP_mod_inc,update_site_sit_rp_s4(session))  
  
  update_business_sit_rp_s4<-function(session){
    req(input$Site_rp_s4,input$RP_mod_inc)
    all_sit_rp_data1<-update_variables$Data
    business_filter<-sqldf(paste0("select * from all_sit_rp_data1 where Site='",input$Site_rp_s4,"'"))
    updatePickerInput(session,inputId = "Business_area_rp_s4",label="Business Area",choices=c("",unique(business_filter$Business_Area))
    )}
  observeEvent(input$Site_rp_s4,update_business_sit_rp_s4(session))  
  
  # updating process when site and business_area changes.
  update_process_sit_rp_s4<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s4,input$Business_area_rp_s4)
    all_sit_rp_data2<- update_variables$Data
    
    process_filter<-sqldf(paste0("select * from all_sit_rp_data2 where  Site='",input$Site_rp_s4,"'and Business_area='",input$Business_area_rp_s4,"'"))
    updatePickerInput(session,inputId = "Process_rp_s4",label="Process",choices=c("",unique(unlist(strsplit(as.character(process_filter$Process),"-"))))
    )}
  observeEvent(input$Business_area_rp_s4,update_process_sit_rp_s4(session))
  
  update_process_sit_rp_1_s4<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s4,input$Business_area_rp_s4)
    all_sit_rp_data2<- update_variables$Data
    
    process_filter<-sqldf(paste0("select * from all_sit_rp_data2 where  Site='",input$Site_rp_s4,"'and Business_area='",input$Business_area_rp_s4,"'"))
    updatePickerInput(session,inputId = "Process_rp_s4",label="Process",choices=c("",unique(unlist(strsplit(as.character(process_filter$Process),"-"))))
    )}
  observeEvent(input$Site_rp_s4,update_process_sit_rp_1_s4(session))
  
  ## updating priority when site,business and process changes.
  update_priority_sit_rp_s4<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s4,input$Business_area_rp_s4,input$Process_rp_s4)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s4,"'and Business_area='",input$Business_area_rp_s4,"'and Process='",input$Process_rp_s4,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s4",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Process_rp_s4,update_priority_sit_rp_s4(session))
  
  update_priority_sit_rp1_s4<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s4,input$Business_area_rp_s4,input$Process_rp_s4)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s4,"'and Business_area='",input$Business_area_rp_s4,"'and Process='",input$Process_rp_s4,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s4",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Business_area_rp_s4,update_priority_sit_rp1_s4(session))
  
  #
  update_priority_sit_rp2_s4<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s4,input$Business_area_rp_s4,input$Process_rp_s4)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s4,"'and Business_area='",input$Business_area_rp_s4,"'and Process='",input$Process_rp_s4,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s4",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Site_rp_s4,update_priority_sit_rp2_s4(session))
  
  ## Update teamname on site,business and process.
  
  update_teamname_sit_rp_s4<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s4,input$Business_area_rp_s4,input$Process_rp_s4)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s4,"'and Business_area='",input$Business_area_rp_s4,"'and Process='",input$Process_rp_s4,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s4",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Process_rp_s4,update_teamname_sit_rp_s4(session))
  
  update_teamname_sit_rp1_s4<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s4,input$Business_area_rp_s4,input$Process_rp_s4)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s4,"'and Business_area='",input$Business_area_rp_s4,"'and Process='",input$Process_rp_s4,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s4",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Site_rp_s4,update_teamname_sit_rp1_s4(session))
  
  update_teamname_sit_rp2_s4<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s4,input$Business_area_rp_s4,input$Process_rp_s4)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s4,"'and Business_area='",input$Business_area_rp_s4,"'and Process='",input$Process_rp_s4,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s4",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Business_area_rp_s4,update_teamname_sit_rp2_s4(session))
  
  
  
  
  
  
  
  
  
  
  #add actions- step 4
  observeEvent(input$add_rp_step4,{
    req(input$RP_mod_inc)
    
    All_data_sit_rep3<-loadData_site_rp_step4()
    All_data_sit_rep4 <- sqldf(paste0("select * from All_data_sit_rep3 where INC_rp = '",input$RP_mod_inc,"' and is_current=",1))
    lat_INC_sit_rep<-ifelse(nrow(All_data_sit_rep4)>=1,max(All_data_sit_rep4$Line_number,na.rm = TRUE),0) #change abhi
    
    add_sit_rp<-data.table(
      INC_rp = c(input$RP_mod_inc),
      Site_rp_s4 = c(input$Site_rp_s4),
      Business_area_rp_s4 = c(input$Business_area_rp_s4),
      Process_rp_s4 = c(input$Process_rp_s4),
      Priority_rating_rp_s4 = c(input$Priority_rating_rp_s4),
      Team_name_rp_s4 = c(input$Team_name_rp_s4),
      ivr_messaging_rp = c(input$ivr_messaging_rp),
      ivr_msg_details = c(input$ivr_msg_details),
      online_messaging_rp = c(input$online_messaging_rp),
      online_msg_details = c(input$online_msg_details),
      social_media_rp = c(input$social_media_rp),
      site_rp_actions_s4 = c(input$site_rp_actions_s4),
      is_current = c(1),
      Line_number = max(lat_INC_sit_rep+1,vals4_rp_step4$Data$Line_number+1),
      Date_time_step4 = format(Sys.time(), "%Y%m%d-%H%M%OS"),
      changed_rp_step4=c("Yes"),
      add_flag_rp_step4=c(1),
      amend_flag_rp_step4=c(0),
      msg_req_rp=TRUE
    )
    
    
    
    vals4_rp_step4$Data<-rbind(add_sit_rp,vals4_rp_step4$Data,fill=TRUE)
    vals4_rp_step4$Data<-subset(vals4_rp_step4$Data,Site_rp_s4!="")
    vals4_rp_step4$Data$changed_rp_step4<-as.character(vals4_rp_step4$Data$changed_rp_step4)
    
    shinyjs::reset("messaging_requ_details")
    updateTextAreaInput(session,inputId="site_rp_actions_s4",value = "") 
  })
  
  
  
  
  #display details of added rp below- step4 
  output$temp_sit_rp_step4<-renderUI({
    
    
    if (nrow(vals4_rp_step4$Data)==0) {
      fluidPage(
        p("Nothing present for this incident",style="font-family: 'BG Flame';font-weight: bold"))
    }
    else {
      fluidPage(
        fluidRow(column(11,p("The below situation/s will be added to the incident: ",style="font-family: 'BG Flame';font-weight: bold"))
        ),
        hr(),
        column(12,dataTableOutput("Main_table_sit_rp")),
        tags$script(HTML('$(document).on("click", "input", function () {
                         var checkboxes = document.getElementsByName("row_selected");
                         var checkboxesChecked = [];
                         for (var i=0; i<checkboxes.length; i++) {
                         if (checkboxes[i].checked) {
                         checkboxesChecked.push(checkboxes[i].value);
                         }
                         }
                         Shiny.onInputChange("checked_rows",checkboxesChecked);
          })')),
        tags$script("$(document).on('click', '#Main_table_sit_rp button', function () {
                        Shiny.onInputChange('lastClickId2',this.id);
                        Shiny.onInputChange('lastClick2', Math.random())
          });"))}
  })
  
  
  output$Main_table_sit_rp<-renderDataTable({
    req(input$RP_mod_inc)
    
    all_data_rp_step4 <-vals4_rp_step4$Data
    DT_sit_rp=sqldf("select INC_rp as INC, Line_number,Site_rp_s4 as Site ,Business_area_rp_s4 as Business_area, Process_rp_s4 as Process, Priority_rating_rp_s4 as Priority_rating, Team_name_rp_s4 as Team_name, ivr_messaging_rp as IVR_messaging, ivr_msg_details as IVR_messaging_details, 
                    online_messaging_rp as Online_messaging, online_msg_details as Online_messaging_details, social_media_rp as Social_media, site_rp_actions_s4 as Actions from all_data_rp_step4")
    
    
    # INC_rp,Site_rp_s4,Business_area_rp_s4, Process_rp_s4, Priority_rating_rp_s4, Team_name_rp_s4, ivr_messaging_rp, ivr_msg_details, 
    # online_messaging_rp, online_msg_details, social_media_rp, site_rp_actions_s4,Line_number, is_current,Date_time_step4,
    # changed_rp_step4, add_flag_rp_step4, amend_flag_rp_step4,msg_req_rp
    DT_sit_rp[["Actions1"]]<-
      paste0('
                <div class="btn-group" role="group" aria-label="Basic example">
                <button type="button" class="btn btn-secondary modify" id=save_rp_step4_',1:nrow(DT_sit_rp),'>Modify</button>
                </div>
                ')
    DT_sit_rp<-DT_sit_rp %>% select(Actions1,everything())
    datatable(DT_sit_rp,
              escape=F,
              options=list(scrollX=TRUE),
              rownames=FALSE)})
  
  
  #pop-up box when clicking modify
  observeEvent(input$lastClick2,
               {
                 req(input$RP_mod_inc)
                 if (input$lastClickId2%like%"save_rp_step4_")
                 {
                   site_filter1 <- loadData_crt_site()
                   site_filter1 <- sqldf(paste0("select * from site_filter1 where INC  = '",input$RP_mod_inc,"'"))
                   
                   selected_row=as.numeric(gsub("save_rp_step4_","",input$lastClickId2))
                   old_row_rp_step4=vals4_rp_step4$Data[selected_row]
                   
                   my_input_rp_step4<-reactive(fluidPage(
                     h3(strong("Edit R&P details"),align="center"),
                     hr(),
                     fluidRow(column(6,paste0("Site : ",old_row_rp_step4$Site_rp_s4)),
                              column(6,paste0("Business Area : ",old_row_rp_step4$Business_area_rp_s4))),
                     
                     fluidRow(column(6,paste0("Process : ",old_row_rp_step4$Process_rp_s4)),
                              column(6,paste0("Priority Rating : ",old_row_rp_step4$Priority_rating_rp_s4))),hr(),
                     
                     fluidRow(column(6,paste0("Team Name : ",value=old_row_rp_step4$Team_name_rp_s4)),
                              column(6,pickerInput(
                                inputId = "ivr_messaging_rp_",
                                label = "IVR_messaging",
                                choices = c("Dampening messaging invoked","Line closure messaging invoked","Drive to online service messaging invoked","Severe weather messaging invoked","Multiple messaging invoked","No IVR changes"),
                                selected = old_row_rp_step4$ivr_messaging_rp))),hr(),
                     
                     fluidRow(column(12,textInput("ivr_msg_details_"," IVR Messaging (details) :",value = old_row_rp_step4$ivr_msg_details))),
                     
                     fluidRow(column(12,
                                     pickerInput(
                                       inputId = "online_messaging_rp_",
                                       label = "Online messaging",
                                       choices = c("Applied","Not applied yet","Not required"),
                                       selected = old_row_rp_step4$online_messaging_rp))),
                     
                     fluidRow(column(12,textInput("online_msg_details_"," Online Messaging (details) :",value = old_row_rp_step4$online_msg_details))),
                     
                     fluidRow(column(12,
                                     pickerInput(
                                       inputId = "social_media_rp_",
                                       label = "Social media messaging",
                                       choices = c("Yes","No","Not Applicable"),
                                       selected = old_row_rp_step4$social_media_rp))),
                     
                     fluidRow(column(12,textAreaInput("site_rp_actions_s4_","Actions/Updates :",height=200,width = 550,value = old_row_rp_step4$site_rp_actions_s4))),
                     
                     
                     actionBttn(
                       inputId = "RP_Step4_changes",
                       label = "Save changes",
                       style = "unite",
                       color = "primary"),
                     
                     tags$script(HTML("$(document).on('click', '#save_changes', function () {
                                      var list_value=[]
                                      for (i = 0; i < $( '.new_input' ).length; i++)
                                      {
                                      list_value.push($( '.new_input' )[i].value)
                                      }
                                      Shiny.onInputChange('newValue', list_value)
                 });"))
                   )
                   )
                   showModal(modalDialog(my_input_rp_step4(),easyClose=TRUE) )
                   X<-old_row_rp_step4$INC_rp
                 }
               })
  
  
  #save changes after modifying data
  observeEvent(input$RP_Step4_changes,{
    selected_row=as.numeric(gsub("save_rp_step4_","",input$lastClickId2))
    old_row_rp_step4=vals4_rp_step4$Data[selected_row]
    
    test_a<-data.table(
      INC_rp = c(old_row_rp_step4$INC_rp),
      Site_rp_s4 = c(old_row_rp_step4$Site_rp_s4),
      Business_area_rp_s4 = c(old_row_rp_step4$Business_area_rp_s4),
      Process_rp_s4 = c(old_row_rp_step4$Process_rp_s4),
      Priority_rating_rp_s4 = c(old_row_rp_step4$Priority_rating_rp_s4),
      
      Team_name_rp_s4 = c(old_row_rp_step4$Team_name_rp_s4),
      ivr_messaging_rp = c(input$ivr_messaging_rp_),
      ivr_msg_details = c(input$ivr_msg_details_),
      online_messaging_rp = c(input$online_messaging_rp_),
      online_msg_details = c(input$online_msg_details_),
      
      social_media_rp = c(input$social_media_rp_),
      site_rp_actions_s4 = c(input$site_rp_actions_s4_),
      
      Line_number = c(old_row_rp_step4$Line_number ), #change abhi'
      is_current = c(1),
      Date_time_step4 = format(Sys.time(), "%Y%m%d-%H%M%OS"),
      changed_rp_step4 = c('Yes'),
      add_flag_rp_step4=c(0),
      
      amend_flag_rp_step4=c(1),
      msg_req_rp=TRUE
    )
    
    vals4_rp_step4$Data[selected_row]<-test_a
    
    removeModal()
  })
  
  
  
  
  
  ##### RP step 5  #################
  #disable add button if all fields are not filled
  observe({
    MandatoryFilled_rp_step5 <-
      vapply(fieldsMandatory_rp_step5,
             function(x) {
               ifelse(x=="Site_rp_s5",  !is.na(input[[x]]) && input[[x]]!=0 && length(input[[x]]) !=0 , !is.null(input[[x]]) && input[[x]] != "" )
               #!is.null(input[[x]]) && input[[x]] != "" 
             },
             logical(1))
    MandatoryFilled_rp_step5 <- all(MandatoryFilled_rp_step5)
    
    #Check if dates have been populated
    shinyjs::toggleState(id = "add_rp_step5", condition = MandatoryFilled_rp_step5)
  })
  
  #disable submit button if no changes have been made
  observe({
    req(input$RP_mod_inc)
    MandatoryFilled_rp_step5_modify <- ifelse(nrow(vals4_rp_step5$Data %>% filter(vals4_rp_step5$Data$changed_rp_step5 == "Yes"))>0,TRUE,FALSE)
    MandatoryFilled_rp_step5_modify <- all(MandatoryFilled_rp_step5_modify)
    shinyjs::toggleState(id = "save_rp_step5", condition = MandatoryFilled_rp_step5_modify)
  })
  
  #update drop downs- first 5 fields
  update_site_sit_rp_s5<-function(session){
    req(input$RP_mod_inc)
    all_sit_rp_data<-loadData_crt_site()
    site_filter<-sqldf(paste0("select * from all_sit_rp_data where INC = '",input$RP_mod_inc,"'"))
    updatePickerInput(session,inputId = "Site_rp_s5",label="Site",choices=c("",unique(site_filter$Site))
    )}
  observeEvent(input$RP_mod_inc,update_site_sit_rp_s5(session))  
  
  update_business_sit_rp_s5<-function(session){
    req(input$Site_rp_s5,input$RP_mod_inc)
    all_sit_rp_data1<-update_variables$Data
    business_filter<-sqldf(paste0("select * from all_sit_rp_data1 where Site='",input$Site_rp_s5,"'"))
    updatePickerInput(session,inputId = "Business_area_rp_s5",label="Business Area",choices=c("",unique(business_filter$Business_Area))
    )}
  observeEvent(input$Site_rp_s5,update_business_sit_rp_s5(session))  
  
  # updating process when site and business_area changes.
  update_process_sit_rp_s5<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s5,input$Business_area_rp_s5)
    all_sit_rp_data2<- update_variables$Data
    
    process_filter<-sqldf(paste0("select * from all_sit_rp_data2 where  Site='",input$Site_rp_s5,"'and Business_area='",input$Business_area_rp_s5,"'"))
    updatePickerInput(session,inputId = "Process_rp_s5",label="Process",choices=c("",unique(unlist(strsplit(as.character(process_filter$Process),"-"))))
    )}
  observeEvent(input$Business_area_rp_s5,update_process_sit_rp_s5(session))
  
  update_process_sit_rp_1_s5<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s5,input$Business_area_rp_s5)
    all_sit_rp_data2<- update_variables$Data
    
    process_filter<-sqldf(paste0("select * from all_sit_rp_data2 where  Site='",input$Site_rp_s5,"'and Business_area='",input$Business_area_rp_s5,"'"))
    updatePickerInput(session,inputId = "Process_rp_s5",label="Process",choices=c("",unique(unlist(strsplit(as.character(process_filter$Process),"-"))))
    )}
  observeEvent(input$Site_rp_s5,update_process_sit_rp_1_s5(session))
  
  ## updating priority when site,business and process changes.
  update_priority_sit_rp_s5<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s5,input$Business_area_rp_s5,input$Process_rp_s5)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s5,"'and Business_area='",input$Business_area_rp_s5,"'and Process='",input$Process_rp_s5,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s5",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Process_rp_s5,update_priority_sit_rp_s5(session))
  
  update_priority_sit_rp1_s5<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s5,input$Business_area_rp_s5,input$Process_rp_s5)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s5,"'and Business_area='",input$Business_area_rps5,"'and Process='",input$Process_rp_s5,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s5",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Business_area_rp_s5,update_priority_sit_rp1_s5(session))
  
  #
  update_priority_sit_rp2_s5<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s5,input$Business_area_rp_s5,input$Process_rp_s5)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s5,"'and Business_area='",input$Business_area_rp_s5,"'and Process='",input$Process_rp_s5,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s5",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Site_rp_s5,update_priority_sit_rp2_s5(session))
  
  ## Update teamname on site,business and process.
  
  update_teamname_sit_rp_s5<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s5,input$Business_area_rp_s5,input$Process_rp_s5)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s5,"'and Business_area='",input$Business_area_rp_s5,"'and Process='",input$Process_rp_s5,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s5",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Process_rp_s5,update_teamname_sit_rp_s5(session))
  
  update_teamname_sit_rp1_s5<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s5,input$Business_area_rp_s5,input$Process_rp_s5)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s5,"'and Business_area='",input$Business_area_rp_s5,"'and Process='",input$Process_rp_s5,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s5",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Site_rp_s5,update_teamname_sit_rp1_s5(session))
  
  update_teamname_sit_rp2_s5<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s5,input$Business_area_rp_s5,input$Process_rp_s5)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s5,"'and Business_area='",input$Business_area_rp_s5,"'and Process='",input$Process_rp_s5,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s5",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Business_area_rp_s5,update_teamname_sit_rp2_s5(session))
  
  
  
  
  
  #add actions- step 5
  observeEvent(input$add_rp_step5,{
    req(input$RP_mod_inc)
    
    All_data_sit_rep3<-loadData_site_rp_step5()
    All_data_sit_rep4 <- sqldf(paste0("select * from All_data_sit_rep3 where INC_rp = '",input$RP_mod_inc,"' and is_current=",1))
    lat_INC_sit_rep<-ifelse(nrow(All_data_sit_rep4)>=1,max(All_data_sit_rep4$Line_number,na.rm = TRUE),0) #change abhi
    
    add_sit_rp<-data.table(
      INC_rp = c(input$RP_mod_inc),
      Site_rp_s5 = c(input$Site_rp_s5),
      Business_area_rp_s5 = c(input$Business_area_rp_s5),
      Process_rp_s5 = c(input$Process_rp_s5),
      Priority_rating_rp_s5 = c(input$Priority_rating_rp_s5),
      Team_name_rp_s5 = c(input$Team_name_rp_s5),
      line_closure_rp = c(input$line_closure_rp),
      lines_closed_rp = c(input$lines_closed_rp),
      calls_diverted_from_rp = c(input$calls_diverted_from_rp),
      calls_diverted_to_rp = c(input$calls_diverted_to_rp),
      site_rp_actions_s5 = c(input$site_rp_actions_s5),
      is_current = c(1),
      Line_number = max(lat_INC_sit_rep+1,vals4_rp_step5$Data$Line_number+1),
      Date_time_step5 = format(Sys.time(), "%Y%m%d-%H%M%OS"),
      changed_rp_step5=c("Yes"),
      add_flag_rp_step5=c(1),
      amend_flag_rp_step5=c(0),
      telephony_rp=TRUE
    )
    
    #write_csv(add_sit_rp, path = paste0("Data_site_RP_step5/RP_step5_Mydata",format(Sys.time(), "%Y%m%d-%H%M%OS") , ".csv"))
    
    vals4_rp_step5$Data<-rbind(add_sit_rp,vals4_rp_step5$Data,fill=TRUE)
    vals4_rp_step5$Data<-subset(vals4_rp_step5$Data,Site_rp_s5!="")
    vals4_rp_step5$Data$changed_rp_step5<-as.character(vals4_rp_step5$Data$changed_rp_step5)
    
    shinyjs::reset("telephony_requ_details")
    updateTextAreaInput(session,inputId="site_rp_actions_s5",value = "") 
  })
  
  
  
  
  #display details of added rp below- step5
  output$temp_sit_rp_step5<-renderUI({
    
    
    if (nrow(vals4_rp_step5$Data)==0) {
      fluidPage(
        p("Nothing present for this incident",style="font-family: 'BG Flame';font-weight: bold"))
    }
    else {
      fluidPage(
        fluidRow(column(11,p("The below situation/s will be added to the incident: ",style="font-family: 'BG Flame';font-weight: bold"))
        ),
        hr(),
        column(12,dataTableOutput("Main_table_sit_rp1")),
        tags$script(HTML('$(document).on("click", "input", function () {
                         var checkboxes = document.getElementsByName("row_selected");
                         var checkboxesChecked = [];
                         for (var i=0; i<checkboxes.length; i++) {
                         if (checkboxes[i].checked) {
                         checkboxesChecked.push(checkboxes[i].value);
                         }
                         }
                         Shiny.onInputChange("checked_rows",checkboxesChecked);
          })')),
        tags$script("$(document).on('click', '#Main_table_sit_rp1 button', function () {
                        Shiny.onInputChange('lastClickId2',this.id);
                        Shiny.onInputChange('lastClick2', Math.random())
          });"))}
  })
  
  
  output$Main_table_sit_rp1<-renderDataTable({
    req(input$RP_mod_inc)
    
    all_data_rp_step5 <-vals4_rp_step5$Data
    DT_sit_rp=sqldf("select INC_rp as INC ,Line_number,Site_rp_s5 as Site ,Business_area_rp_s5 as Business_area , Process_rp_s5 as Process, Priority_rating_rp_s5 as Priority_rating, Team_name_rp_s5 as Team_name,line_closure_rp as Line_closure,
                    lines_closed_rp as Lines_closed ,calls_diverted_from_rp as Calls_diverted_from, calls_diverted_to_rp as Calls_diverted_to, site_rp_actions_s5 as Actions from all_data_rp_step5")
    
    # INC_rp,Site_rp_s5,Business_area_rp_s5, Process_rp_s5, Priority_rating_rp_s5, Team_name_rp_s5,line_closure_rp,
    # lines_closed_rp,calls_diverted_from_rp, calls_diverted_to_rp,site_rp_actions_s5,Line_number,is_current,Date_time_step5,
    # changed_rp_step5, add_flag_rp_step5, amend_flag_rp_step5,telephony_rp
    
    
    DT_sit_rp[["Actions1"]]<-
      paste0('
                <div class="btn-group" role="group" aria-label="Basic example">
                <button type="button" class="btn btn-secondary modify" id=save_rp_step5_',1:nrow(DT_sit_rp),'>Modify</button>
                </div>
                ')
    DT_sit_rp<-DT_sit_rp %>% select(Actions1,everything())
    datatable(DT_sit_rp,
              escape=F,
              options=list(scrollX=TRUE),
              rownames=FALSE)})
  
  
  #pop-up box when clicking modify
  observeEvent(input$lastClick2,
               {
                 req(input$RP_mod_inc)
                 if (input$lastClickId2%like%"save_rp_step5_")
                 {
                   site_filter1 <- loadData_crt_site()
                   site_filter1 <- sqldf(paste0("select * from site_filter1 where INC  = '",input$RP_mod_inc,"'"))
                   
                   selected_row=as.numeric(gsub("save_rp_step5_","",input$lastClickId2))
                   old_row_rp_step5=vals4_rp_step5$Data[selected_row]
                   
                   my_input_rp_step5<-reactive(fluidPage(
                     h3(strong("Edit R&P details"),align="center"),
                     hr(),
                     fluidRow(column(6,paste0("Site : ",old_row_rp_step5$Site_rp_s5)),
                              column(6,paste0("Business Area : ",old_row_rp_step5$Business_area_rp_s5))),
                     
                     fluidRow(column(6,paste0("Process : ",old_row_rp_step5$Process_rp_s5)),
                              column(6,paste0("Priority Rating : ",old_row_rp_step5$Priority_rating_rp_s5))),hr(),
                     
                     fluidRow(column(6,paste0("Team Name : ",value=old_row_rp_step5$Team_name_rp_s5)),
                              column(6,pickerInput(
                                inputId = "line_closure_rp_",
                                label = "Line Closure",
                                choices = c("Single Line closure"),
                                selected = old_row_rp_step5$line_closure_rp))),hr(),
                     
                     fluidRow(column(12,textInput("lines_closed_rp_"," Lines Closed :",value = old_row_rp_step5$lines_closed_rp))),
                     
                     
                     fluidRow(column(12,textInput("calls_diverted_from_rp_"," Calls Diverted from :",value = old_row_rp_step5$calls_diverted_from_rp))),
                     
                     fluidRow(column(12,textInput("calls_diverted_to_rp_"," Calls Diverted to :",value = old_row_rp_step5$calls_diverted_to_rp))),
                     
                     fluidRow(column(12,textAreaInput("site_rp_actions_s5_","Actions/Updates :",height=200,width = 550,value = old_row_rp_step5$site_rp_actions_s5))),
                     
                     
                     actionBttn(
                       inputId = "RP_Step5_changes",
                       label = "Save changes",
                       style = "unite",
                       color = "primary"),
                     
                     tags$script(HTML("$(document).on('click', '#save_changes', function () {
                                      var list_value=[]
                                      for (i = 0; i < $( '.new_input' ).length; i++)
                                      {
                                      list_value.push($( '.new_input' )[i].value)
                                      }
                                      Shiny.onInputChange('newValue', list_value)
                 });"))
                   )
                   )
                   showModal(modalDialog(my_input_rp_step5(),easyClose=TRUE) )
                   X<-old_row_rp_step5$INC_rp
                 }
               })
  
  
  #save changes after modifying data
  observeEvent(input$RP_Step5_changes,{
    selected_row=as.numeric(gsub("save_rp_step5_","",input$lastClickId2))
    old_row_rp_step5=vals4_rp_step5$Data[selected_row]
    
    test_a<-data.table(
      INC_rp = c(old_row_rp_step5$INC_rp),
      Site_rp_s5 = c(old_row_rp_step5$Site_rp_s5),
      Business_area_rp_s5 = c(old_row_rp_step5$Business_area_rp_s5),
      Process_rp_s5 = c(old_row_rp_step5$Process_rp_s5),
      Priority_rating_rp_s5 = c(old_row_rp_step5$Priority_rating_rp_s5),
      
      Team_name_rp_s5 = c(old_row_rp_step5$Team_name_rp_s5),
      line_closure_rp = c(input$line_closure_rp_),
      lines_closed_rp = c(input$lines_closed_rp_),
      calls_diverted_from_rp = c(input$calls_diverted_from_rp_),
      calls_diverted_to_rp = c(input$calls_diverted_to_rp_),
      
      site_rp_actions_s5 = c(input$site_rp_actions_s5_),
      
      Line_number = c(old_row_rp_step5$Line_number ), #change abhi
      is_current = c(1),
      Date_time_step5 = format(Sys.time(), "%Y%m%d-%H%M%OS"),
      changed_rp_step5 = c('Yes'),
      add_flag_rp_step5=c(0),
      
      amend_flag_rp_step5=c(1),
      telephony_rp=TRUE
      
    )
    
    vals4_rp_step5$Data[selected_row]<-test_a
    removeModal()
  })
  
  
  
  
  
  
  ##### RP step 6  #################
  #disable add button if all fields are not filled
  observe({
    MandatoryFilled_rp_step6 <-
      vapply(fieldsMandatory_rp_step6,
             function(x) {
               ifelse(x=="Site_rp_s6",  !is.na(input[[x]]) && input[[x]]!=0 && length(input[[x]]) !=0 , !is.null(input[[x]]) && input[[x]] != "" )
               #!is.null(input[[x]]) && input[[x]] != "" 
             },
             logical(1))
    MandatoryFilled_rp_step6 <- all(MandatoryFilled_rp_step6)
    
    #Check if dates have been populated
    shinyjs::toggleState(id = "add_rp_step6", condition = MandatoryFilled_rp_step6)
  })
  
  #disable submit button if no changes have been made
  observe({
    req(input$RP_mod_inc)
    MandatoryFilled_rp_step6_modify <- ifelse(nrow(vals4_rp_step6$Data %>% filter(vals4_rp_step6$Data$changed_rp_step6 == "Yes"))>0,TRUE,FALSE)
    MandatoryFilled_rp_step6_modify <- all(MandatoryFilled_rp_step6_modify)
    shinyjs::toggleState(id = "save_rp_step6", condition = MandatoryFilled_rp_step6_modify)
  })
  
  #update drop downs- first 5 fields
  update_site_sit_rp_s6<-function(session){
    req(input$RP_mod_inc)
    all_sit_rp_data<-loadData_crt_site()
    site_filter<-sqldf(paste0("select * from all_sit_rp_data where INC = '",input$RP_mod_inc,"'"))
    updatePickerInput(session,inputId = "Site_rp_s6",label="Site",choices=c("",unique(site_filter$Site))
    )}
  observeEvent(input$RP_mod_inc,update_site_sit_rp_s6(session))  
  
  update_business_sit_rp_s6<-function(session){
    req(input$Site_rp_s6,input$RP_mod_inc)
    all_sit_rp_data1<-update_variables$Data
    business_filter<-sqldf(paste0("select * from all_sit_rp_data1 where Site='",input$Site_rp_s6,"'"))
    updatePickerInput(session,inputId = "Business_area_rp_s6",label="Business Area",choices=c("",unique(business_filter$Business_Area))
    )}
  observeEvent(input$Site_rp_s6,update_business_sit_rp_s6(session))  
  
  # updating process when site and business_area changes.
  update_process_sit_rp_s6<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s6,input$Business_area_rp_s6)
    all_sit_rp_data2<- update_variables$Data
    
    process_filter<-sqldf(paste0("select * from all_sit_rp_data2 where  Site='",input$Site_rp_s6,"'and Business_area='",input$Business_area_rp_s6,"'"))
    updatePickerInput(session,inputId = "Process_rp_s6",label="Process",choices=c("",unique(unlist(strsplit(as.character(process_filter$Process),"-"))))
    )}
  observeEvent(input$Business_area_rp_s6,update_process_sit_rp_s6(session))
  
  update_process_sit_rp_1_s6<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s6,input$Business_area_rp_s6)
    all_sit_rp_data2<- update_variables$Data
    
    process_filter<-sqldf(paste0("select * from all_sit_rp_data2 where  Site='",input$Site_rp_s6,"'and Business_area='",input$Business_area_rp_s6,"'"))
    updatePickerInput(session,inputId = "Process_rp_s6",label="Process",choices=c("",unique(unlist(strsplit(as.character(process_filter$Process),"-"))))
    )}
  observeEvent(input$Site_rp_s6,update_process_sit_rp_1_s6(session))
  
  ## updating priority when site,business and process changes.
  update_priority_sit_rp_s6<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s6,input$Business_area_rp_s6,input$Process_rp_s6)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s6,"'and Business_area='",input$Business_area_rp_s6,"'and Process='",input$Process_rp_s6,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s6",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Process_rp_s6,update_priority_sit_rp_s6(session))
  
  update_priority_sit_rp1_s6<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s6,input$Business_area_rp_s6,input$Process_rp_s6)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s6,"'and Business_area='",input$Business_area_rp_s6,"'and Process='",input$Process_rp_s6,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s6",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Business_area_rp_s6,update_priority_sit_rp1_s6(session))
  
  #
  update_priority_sit_rp2_s6<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s6,input$Business_area_rp_s6,input$Process_rp_s6)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s6,"'and Business_area='",input$Business_area_rp_s6,"'and Process='",input$Process_rp_s6,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s6",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Site_rp_s6,update_priority_sit_rp2_s6(session))
  
  ## Update teamname on site,business and process.
  
  update_teamname_sit_rp_s6<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s6,input$Business_area_rp_s6,input$Process_rp_s6)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s6,"'and Business_area='",input$Business_area_rp_s6,"'and Process='",input$Process_rp_s6,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s6",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Process_rp_s6,update_teamname_sit_rp_s6(session))
  
  update_teamname_sit_rp1_s6<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s6,input$Business_area_rp_s6,input$Process_rp_s6)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s6,"'and Business_area='",input$Business_area_rp_s6,"'and Process='",input$Process_rp_s6,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s6",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Site_rp_s6,update_teamname_sit_rp1_s6(session))
  
  update_teamname_sit_rp2_s6<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s6,input$Business_area_rp_s6,input$Process_rp_s6)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s6,"'and Business_area='",input$Business_area_rp_s6,"'and Process='",input$Process_rp_s6,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s6",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Business_area_rp_s6,update_teamname_sit_rp2_s6(session))
  
  
  
  
  
  #add actions- step 6
  observeEvent(input$add_rp_step6,{
    req(input$RP_mod_inc)
    
    All_data_sit_rep3<-loadData_site_rp_step6()
    All_data_sit_rep4 <- sqldf(paste0("select * from All_data_sit_rep3 where INC_rp = '",input$RP_mod_inc,"' and is_current=",1))
    lat_INC_sit_rep<-ifelse(nrow(All_data_sit_rep4)>=1,max(All_data_sit_rep4$Line_number,na.rm = TRUE),0) #change abhi
    
    add_sit_rp<-data.table(
      INC_rp = c(input$RP_mod_inc),
      Site_rp_s6 = c(input$Site_rp_s6),
      Business_area_rp_s6 = c(input$Business_area_rp_s6),
      Process_rp_s6 = c(input$Process_rp_s6),
      Priority_rating_rp_s6 = c(input$Priority_rating_rp_s6),
      Team_name_rp_s6 = c(input$Team_name_rp_s6),
      Area_impacted_rp = c(input$Area_impacted_rp),
      location_impacted_rp = c(input$location_impacted_rp),
      fte_impacted_rp = c(input$fte_impacted_rp),
      issue_rp = c(input$issue_rp),
      site_rp_actions_s6 = c(input$site_rp_actions_s6),
      is_current = c(1),
      Line_number = max(lat_INC_sit_rep+1,vals4_rp_step6$Data$Line_number+1),
      Date_time_step6 = format(Sys.time(), "%Y%m%d-%H%M%OS"),
      changed_rp_step6=c("Yes"),
      add_flag_rp_step6=c(1),
      amend_flag_rp_step6=c(0),
      webchat_rp=TRUE
    )
    
    #write_csv(add_sit_rp, path = paste0("Data_site_RP_step6/RP_step6_Mydata",format(Sys.time(), "%Y%m%d-%H%M%OS") , ".csv"))
    
    
    vals4_rp_step6$Data<-rbind(add_sit_rp,vals4_rp_step6$Data,fill=TRUE)
    vals4_rp_step6$Data<-subset(vals4_rp_step6$Data,Site_rp_s6!="")
    vals4_rp_step6$Data$changed_rp_step6<-as.character(vals4_rp_step6$Data$changed_rp_step6)
    
    shinyjs::reset("webchat_requ_details")
    updateTextAreaInput(session,inputId="site_rp_actions_s6",value = "") 
  })
  
  
  
  
  #display details of added rp below- step6
  output$temp_sit_rp_step6<-renderUI({
    
    
    if (nrow(vals4_rp_step6$Data)==0) {
      fluidPage(
        p("Nothing present for this incident",style="font-family: 'BG Flame';font-weight: bold"))
    }
    else {
      fluidPage(
        fluidRow(column(11,p("The below situation/s will be added to the incident: ",style="font-family: 'BG Flame';font-weight: bold"))
        ),
        hr(),
        column(12,dataTableOutput("Main_table_sit_rp_s6")),
        tags$script(HTML('$(document).on("click", "input", function () {
                         var checkboxes = document.getElementsByName("row_selected");
                         var checkboxesChecked = [];
                         for (var i=0; i<checkboxes.length; i++) {
                         if (checkboxes[i].checked) {
                         checkboxesChecked.push(checkboxes[i].value);
                         }
                         }
                         Shiny.onInputChange("checked_rows",checkboxesChecked);
          })')),
        tags$script("$(document).on('click', '#Main_table_sit_rp_s6 button', function () {
                        Shiny.onInputChange('lastClickId2',this.id);
                        Shiny.onInputChange('lastClick2', Math.random())
          });"))}
  })
  
  
  output$Main_table_sit_rp_s6<-renderDataTable({
    req(input$RP_mod_inc)
    
    all_data_rp_step6 <-vals4_rp_step6$Data
    DT_sit_rp=sqldf("select INC_rp as INC ,Line_number,Site_rp_s6 as Site,Business_area_rp_s6 as Business_area,Process_rp_s6 as Process,Priority_rating_rp_s6 as Priority_rating,Team_name_rp_s6 as Team_name,Area_impacted_rp as Area_impacted,location_impacted_rp as Location_impacted,fte_impacted_rp as FTE_impacted,
                    issue_rp as Issue,site_rp_actions_s6 as Actions from all_data_rp_step6")
    
    # INC_rp,Site_rp_s6,Business_area_rp_s6,Process_rp_s6,Priority_rating_rp_s6,Team_name_rp_s6,Area_impacted_rp,location_impacted_rp,fte_impacted_rp,
    # issue_rp,site_rp_actions_s6, Line_number,is_current,Date_time_step6,
    # changed_rp_step6, add_flag_rp_step6, amend_flag_rp_step6,webchat_rp
    DT_sit_rp[["Actions1"]]<-
      paste0('
                <div class="btn-group" role="group" aria-label="Basic example">
                <button type="button" class="btn btn-secondary modify" id=save_rp_step6_',1:nrow(DT_sit_rp),'>Modify</button>
                </div>
                ')
    DT_sit_rp<-DT_sit_rp %>% select(Actions1,everything())
    datatable(DT_sit_rp,
              escape=F,
              options=list(scrollX=TRUE),
              rownames=FALSE)})
  
  
  #pop-up box when clicking modify
  observeEvent(input$lastClick2,
               {
                 req(input$RP_mod_inc)
                 if (input$lastClickId2%like%"save_rp_step6_")
                 {
                   site_filter1 <- loadData_crt_site()
                   site_filter1 <- sqldf(paste0("select * from site_filter1 where INC  = '",input$RP_mod_inc,"'"))
                   
                   selected_row=as.numeric(gsub("save_rp_step6_","",input$lastClickId2))
                   old_row_rp_step6=vals4_rp_step6$Data[selected_row]
                   
                   my_input_rp_step6<-reactive(fluidPage(
                     h3(strong("Edit R&P details"),align="center"),
                     hr(),
                     fluidRow(column(6,paste0("Site : ",old_row_rp_step6$Site_rp_s6)),
                              column(6,paste0("Business Area : ",old_row_rp_step6$Business_area_rp_s6))),
                     
                     fluidRow(column(6,paste0("Process : ",old_row_rp_step6$Process_rp_s6)),
                              column(6,paste0("Priority Rating : ",old_row_rp_step6$Priority_rating_rp_s6))),hr(),
                     
                     fluidRow(column(6,paste0("Team Name : ",value=old_row_rp_step6$Team_name_rp_s6)),
                              column(6,pickerInput(
                                inputId = "Area_impacted_rp_",
                                label = "Area impacted",
                                choices = c("Energy","Services","All"),
                                selected = old_row_rp_step6$Area_impacted_rp))),hr(),
                     
                     fluidRow(column(6,pickerInput(
                       inputId = "location_impacted_rp_",
                       label = "Location impacted",
                       choices = c("UK","India","All"),
                       selected = old_row_rp_step6$location_impacted_rp))),hr(),
                     
                     
                     fluidRow(column(12,textInput("fte_impacted_rp_"," FTE Impacted :",value = old_row_rp_step6$fte_impacted_rp))),
                     
                     fluidRow(column(12,textInput("issue_rp_"," Issue :",value = old_row_rp_step6$issue_rp))),
                     
                     fluidRow(column(12,textAreaInput("site_rp_actions_s6_","Actions/Updates :",height=200,width = 550,value = old_row_rp_step6$site_rp_actions_s6))),
                     
                     
                     actionBttn(
                       inputId = "RP_Step6_changes",
                       label = "Save changes",
                       style = "unite",
                       color = "primary"),
                     
                     tags$script(HTML("$(document).on('click', '#save_changes', function () {
                                      var list_value=[]
                                      for (i = 0; i < $( '.new_input' ).length; i++)
                                      {
                                      list_value.push($( '.new_input' )[i].value)
                                      }
                                      Shiny.onInputChange('newValue', list_value)
                 });"))
                   )
                   )
                   showModal(modalDialog(my_input_rp_step6(),easyClose=TRUE) )
                   X<-old_row_rp_step6$INC_rp
                 }
               })
  
  
  #save changes after modifying data
  observeEvent(input$RP_Step6_changes,{
    selected_row=as.numeric(gsub("save_rp_step6_","",input$lastClickId2))
    old_row_rp_step6=vals4_rp_step6$Data[selected_row]
    
    test_a<-data.table(
      INC_rp = c(old_row_rp_step6$INC_rp),
      Site_rp_s6 = c(old_row_rp_step6$Site_rp_s6),
      Business_area_rp_s6 = c(old_row_rp_step6$Business_area_rp_s6),
      Process_rp_s6 = c(old_row_rp_step6$Process_rp_s6),
      Priority_rating_rp_s6 = c(old_row_rp_step6$Priority_rating_rp_s6),
      
      Team_name_rp_s6 = c(old_row_rp_step6$Team_name_rp_s6),
      Area_impacted_rp = c(input$Area_impacted_rp_),
      location_impacted_rp = c(input$location_impacted_rp_),
      fte_impacted_rp = c(input$fte_impacted_rp_),
      issue_rp = c(input$issue_rp_),
      
      site_rp_actions_s6 = c(input$site_rp_actions_s6_),
      
      Line_number = c(old_row_rp_step6$Line_number ), #change abhi
      is_current = c(1),
      Date_time_step6 = format(Sys.time(), "%Y%m%d-%H%M%OS"),
      changed_rp_step6 = c('Yes'),
      add_flag_rp_step6=c(0),
      
      amend_flag_rp_step6=c(1),
      webchat_rp=TRUE
    )
    
    vals4_rp_step6$Data[selected_row]<-test_a
    #print(test_a)
    #print(vals4_rp_step6$Data[selected_row])
    removeModal()
  })
  
  
  
  
  
  
  ##### RP step 7  #################
  #disable add button if all fields are not filled
  observe({
    MandatoryFilled_rp_step7 <-
      vapply(fieldsMandatory_rp_step7,
             function(x) {
               ifelse(x=="Site_rp_s7",  !is.na(input[[x]]) && input[[x]]!=0 && length(input[[x]]) !=0 , !is.null(input[[x]]) && input[[x]] != "" )
               #!is.null(input[[x]]) && input[[x]] != "" 
             },
             logical(1))
    MandatoryFilled_rp_step7 <- all(MandatoryFilled_rp_step7)
    
    #Check if dates have been populated
    shinyjs::toggleState(id = "add_rp_step7", condition = MandatoryFilled_rp_step7)
  })
  
  #disable submit button if no changes have been made
  observe({
    req(input$RP_mod_inc)
    MandatoryFilled_rp_step7_modify <- ifelse(nrow(vals4_rp_step7$Data %>% filter(vals4_rp_step7$Data$changed_rp_step7 == "Yes"))>0,TRUE,FALSE)
    MandatoryFilled_rp_step7_modify <- all(MandatoryFilled_rp_step7_modify)
    shinyjs::toggleState(id = "save_rp_step7", condition = MandatoryFilled_rp_step7_modify)
  })
  
  #update drop downs- first 5 fields
  update_site_sit_rp_s7<-function(session){
    req(input$RP_mod_inc)
    all_sit_rp_data<-loadData_crt_site()
    site_filter<-sqldf(paste0("select * from all_sit_rp_data where INC = '",input$RP_mod_inc,"'"))
    updatePickerInput(session,inputId = "Site_rp_s7",label="Site",choices=c("",unique(site_filter$Site))
    )}
  observeEvent(input$RP_mod_inc,update_site_sit_rp_s7(session))  
  
  update_business_sit_rp_s7<-function(session){
    req(input$Site_rp_s7,input$RP_mod_inc)
    all_sit_rp_data1<-update_variables$Data
    business_filter<-sqldf(paste0("select * from all_sit_rp_data1 where Site='",input$Site_rp_s7,"'"))
    updatePickerInput(session,inputId = "Business_area_rp_s7",label="Business Area",choices=c("",unique(business_filter$Business_Area))
    )}
  observeEvent(input$Site_rp_s7,update_business_sit_rp_s7(session))  
  
  # updating process when site and business_area changes.
  update_process_sit_rp_s7<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s7,input$Business_area_rp_s7)
    all_sit_rp_data2<- update_variables$Data
    
    process_filter<-sqldf(paste0("select * from all_sit_rp_data2 where  Site='",input$Site_rp_s7,"'and Business_area='",input$Business_area_rp_s7,"'"))
    updatePickerInput(session,inputId = "Process_rp_s7",label="Process",choices=c("",unique(unlist(strsplit(as.character(process_filter$Process),"-"))))
    )}
  observeEvent(input$Business_area_rp_s7,update_process_sit_rp_s7(session))
  
  update_process_sit_rp_1_s7<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s7,input$Business_area_rp_s7)
    all_sit_rp_data2<- update_variables$Data
    
    process_filter<-sqldf(paste0("select * from all_sit_rp_data2 where  Site='",input$Site_rp_s7,"'and Business_area='",input$Business_area_rp_s7,"'"))
    updatePickerInput(session,inputId = "Process_rp_s7",label="Process",choices=c("",unique(unlist(strsplit(as.character(process_filter$Process),"-"))))
    )}
  observeEvent(input$Site_rp_s7,update_process_sit_rp_1_s7(session))
  
  ## updating priority when site,business and process changes.
  update_priority_sit_rp_s7<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s7,input$Business_area_rp_s7,input$Process_rp_s7)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s7,"'and Business_area='",input$Business_area_rp_s7,"'and Process='",input$Process_rp_s7,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s7",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Process_rp_s7,update_priority_sit_rp_s7(session))
  
  update_priority_sit_rp1_s7<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s7,input$Business_area_rp_s7,input$Process_rp_s7)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s7,"'and Business_area='",input$Business_area_rp_s7,"'and Process='",input$Process_rp_s7,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s7",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Business_area_rp_s7,update_priority_sit_rp1_s7(session))
  
  #
  update_priority_sit_rp2_s7<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s7,input$Business_area_rp_s7,input$Process_rp_s7)
    all_sit_rp_data_3 <- update_variables$Data
    priority_filter<-sqldf(paste0("select * from all_sit_rp_data_3 where Site='",input$Site_rp_s7,"'and Business_area='",input$Business_area_rp_s7,"'and Process='",input$Process_rp_s7,"'"))
    updatePickerInput(session,inputId = "Priority_rating_rp_s7",label="Priority Rating",choices=c("",unique(priority_filter$`Priority rating`))
    )}
  observeEvent(input$Site_rp_s7,update_priority_sit_rp2_s7(session))
  
  ## Update teamname on site,business and process.
  
  update_teamname_sit_rp_s7<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s7,input$Business_area_rp_s7,input$Process_rp_s7)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s7,"'and Business_area='",input$Business_area_rp_s7,"'and Process='",input$Process_rp_s7,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s7",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Process_rp_s7,update_teamname_sit_rp_s7(session))
  
  update_teamname_sit_rp1_s7<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s7,input$Business_area_rp_s7,input$Process_rp_s7)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s7,"'and Business_area='",input$Business_area_rp_s7,"'and Process='",input$Process_rp_s7,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s7",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Site_rp_s7,update_teamname_sit_rp1_s7(session))
  
  update_teamname_sit_rp2_s7<-function(session){
    req(input$RP_mod_inc,input$Site_rp_s7,input$Business_area_rp_s7,input$Process_rp_s7)
    all_sit_rp_data_4 <- update_variables$Data
    teamname_filter<-sqldf(paste0("select * from all_sit_rp_data_4 where Site='",input$Site_rp_s7,"'and Business_area='",input$Business_area_rp_s7,"'and Process='",input$Process_rp_s7,"'"))
    updatePickerInput(session,inputId = "Team_name_rp_s7",label="Team Name",choices=c("",unique(teamname_filter$`Team Name`))
    )}
  observeEvent(input$Business_area_rp_s7,update_teamname_sit_rp2_s7(session))
  
  
  
  #add actions- step 7
  observeEvent(input$add_rp_step7,{
    req(input$RP_mod_inc)
    
    All_data_sit_rep3<-loadData_site_rp_step7()
    All_data_sit_rep4 <- sqldf(paste0("select * from All_data_sit_rep3 where INC_rp = '",input$RP_mod_inc,"' and is_current=",1))
    lat_INC_sit_rep<-ifelse(nrow(All_data_sit_rep4)>=1,max(All_data_sit_rep4$Line_number,na.rm = TRUE),0) #change abhi
    
    add_sit_rp<-data.table(
      INC_rp = c(input$RP_mod_inc),
      Site_rp_s7 = c(input$Site_rp_s7),
      Business_area_rp_s7 = c(input$Business_area_rp_s7),
      Process_rp_s7 = c(input$Process_rp_s7),
      Priority_rating_rp_s7 = c(input$Priority_rating_rp_s7),
      Team_name_rp_s7 = c(input$Team_name_rp_s7),
      Area_impacted_rp1 = c(input$Area_impacted_rp1),
      location_impacted_rp1 = c(input$location_impacted_rp1),
      fte_impacted_rp1 = c(input$fte_impacted_rp1),
      issue_rp1 = c(input$issue_rp1),
      site_rp_actions_s7 = c(input$site_rp_actions_s7),
      is_current = c(1),
      Line_number = max(lat_INC_sit_rep+1,vals4_rp_step7$Data$Line_number+1),
      Date_time_step7 = format(Sys.time(), "%Y%m%d-%H%M%OS"),
      changed_rp_step7=c("Yes"),
      add_flag_rp_step7=c(1),
      amend_flag_rp_step7=c(0),
      social_rp=TRUE
    )
    
    #write_csv(add_sit_rp, path = paste0("Data_site_RP_step7/RP_step7_Mydata",format(Sys.time(), "%Y%m%d-%H%M%OS") , ".csv"))
    
    vals4_rp_step7$Data<-rbind(add_sit_rp,vals4_rp_step7$Data,fill=TRUE)
    vals4_rp_step7$Data<-subset(vals4_rp_step7$Data,Site_rp_s7!="")
    vals4_rp_step7$Data$changed_rp_step7<-as.character(vals4_rp_step7$Data$changed_rp_step7)
    
    shinyjs::reset("social_requ_details")
    updateTextAreaInput(session,inputId="site_rp_actions_s7",value = "") 
  })
  
  
  
  
  #display details of added rp below- step7
  output$temp_sit_rp_step7<-renderUI({
    
    
    if (nrow(vals4_rp_step7$Data)==0) {
      fluidPage(
        p("Nothing present for this incident",style="font-family: 'BG Flame';font-weight: bold"))
    }
    else {
      fluidPage(
        fluidRow(column(11,p("The below situation/s will be added to the incident: ",style="font-family: 'BG Flame';font-weight: bold"))
        ),
        hr(),
        column(12,dataTableOutput("Main_table_sit_rp_s7")),
        tags$script(HTML('$(document).on("click", "input", function () {
                         var checkboxes = document.getElementsByName("row_selected");
                         var checkboxesChecked = [];
                         for (var i=0; i<checkboxes.length; i++) {
                         if (checkboxes[i].checked) {
                         checkboxesChecked.push(checkboxes[i].value);
                         }
                         }
                         Shiny.onInputChange("checked_rows",checkboxesChecked);
          })')),
        tags$script("$(document).on('click', '#Main_table_sit_rp_s7 button', function () {
                        Shiny.onInputChange('lastClickId2',this.id);
                        Shiny.onInputChange('lastClick2', Math.random())
          });"))}
  })
  
  
  output$Main_table_sit_rp_s7<-renderDataTable({
    req(input$RP_mod_inc)
    
    all_data_rp_step7 <-vals4_rp_step7$Data
    DT_sit_rp=sqldf("select INC_rp as INC,Line_number,Site_rp_s7 as Site,Business_area_rp_s7 as Business_area,Process_rp_s7 as Process,Priority_rating_rp_s7 as Priority_rating,Team_name_rp_s7 as Team_name,Area_impacted_rp1 as Area_impacted,location_impacted_rp1 as Location_impacted,fte_impacted_rp1 as FTE_impacted,
                    issue_rp1 as Issue,site_rp_actions_s7 as Actions from all_data_rp_step7")
    
    
    # INC_rp,Site_rp_s7,Business_area_rp_s7,Process_rp_s7,Priority_rating_rp_s7,Team_name_rp_s7,Area_impacted_rp1,location_impacted_rp1,fte_impacted_rp1,
    # issue_rp1,site_rp_actions_s7, Line_number,is_current,Date_time_step7,
    # changed_rp_step7, add_flag_rp_step7, amend_flag_rp_step7,social_rp
    DT_sit_rp[["Actions1"]]<-
      paste0('
                <div class="btn-group" role="group" aria-label="Basic example">
                <button type="button" class="btn btn-secondary modify" id=save_rp_step7_',1:nrow(DT_sit_rp),'>Modify</button>
                </div>
                ')
    DT_sit_rp<-DT_sit_rp %>% select(Actions1,everything())
    datatable(DT_sit_rp,
              escape=F,
              options=list(scrollX=TRUE),
              rownames=FALSE)})
  
  
  #pop-up box when clicking modify
  observeEvent(input$lastClick2,
               {
                 req(input$RP_mod_inc)
                 if (input$lastClickId2%like%"save_rp_step7_")
                 {
                   site_filter1 <- loadData_crt_site()
                   site_filter1 <- sqldf(paste0("select * from site_filter1 where INC  = '",input$RP_mod_inc,"'"))
                   
                   selected_row=as.numeric(gsub("save_rp_step7_","",input$lastClickId2))
                   old_row_rp_step7=vals4_rp_step7$Data[selected_row]
                   
                   my_input_rp_step7<-reactive(fluidPage(
                     h3(strong("Edit R&P details"),align="center"),
                     hr(),
                     fluidRow(column(6,paste0("Site : ",old_row_rp_step7$Site_rp_s7)),
                              column(6,paste0("Business Area : ",old_row_rp_step7$Business_area_rp_s7))),
                     
                     fluidRow(column(6,paste0("Process : ",old_row_rp_step7$Process_rp_s7)),
                              column(6,paste0("Priority Rating : ",old_row_rp_step7$Priority_rating_rp_s7))),hr(),
                     
                     fluidRow(column(6,paste0("Team Name : ",value=old_row_rp_step7$Team_name_rp_s7)),
                              column(6,pickerInput(
                                inputId = "Area_impacted_rp1_",
                                label = "Area impacted",
                                choices = c("Energy","Services","All"),
                                selected = old_row_rp_step7$Area_impacted_rp1))),hr(),
                     
                     fluidRow(column(6,pickerInput(
                       inputId = "location_impacted_rp1_",
                       label = "Location impacted",
                       choices = c("UK","India","All"),
                       selected = old_row_rp_step7$location_impacted_rp1))),hr(),
                     
                     
                     fluidRow(column(12,textInput("fte_impacted_rp1_"," FTE Impacted :",value = old_row_rp_step7$fte_impacted_rp1))),
                     
                     fluidRow(column(12,textInput("issue_rp1_"," Issue :",value = old_row_rp_step7$issue_rp1))),
                     
                     fluidRow(column(12,textAreaInput("site_rp_actions_s7_","Actions/Updates :",height=200,width = 550,value = old_row_rp_step7$site_rp_actions_s7))),
                     
                     
                     actionBttn(
                       inputId = "RP_Step7_changes",
                       label = "Save changes",
                       style = "unite",
                       color = "primary"),
                     
                     tags$script(HTML("$(document).on('click', '#save_changes', function () {
                                      var list_value=[]
                                      for (i = 0; i < $( '.new_input' ).length; i++)
                                      {
                                      list_value.push($( '.new_input' )[i].value)
                                      }
                                      Shiny.onInputChange('newValue', list_value)
                 });"))
                   )
                   )
                   showModal(modalDialog(my_input_rp_step7(),easyClose=TRUE) )
                   X<-old_row_rp_step7$INC_rp
                 }
               })
  
  
  #save changes after modifying data
  observeEvent(input$RP_Step7_changes,{
    selected_row=as.numeric(gsub("save_rp_step7_","",input$lastClickId2))
    old_row_rp_step7=vals4_rp_step7$Data[selected_row]
    
    test_a<-data.table(
      INC_rp = c(old_row_rp_step7$INC_rp),
      Site_rp_s7 = c(old_row_rp_step7$Site_rp_s7),
      Business_area_rp_s7 = c(old_row_rp_step7$Business_area_rp_s7),
      Process_rp_s7 = c(old_row_rp_step7$Process_rp_s7),
      Priority_rating_rp_s7 = c(old_row_rp_step7$Priority_rating_rp_s7),
      
      Team_name_rp_s7 = c(old_row_rp_step7$Team_name_rp_s7),
      Area_impacted_rp1 = c(input$Area_impacted_rp1_),
      location_impacted_rp1 = c(input$location_impacted_rp1_),
      fte_impacted_rp1 = c(input$fte_impacted_rp1_),
      issue_rp1 = c(input$issue_rp1_),
      
      site_rp_actions_s7 = c(input$site_rp_actions_s7_),
      
      Line_number = c(old_row_rp_step7$Line_number ), #change abhi
      is_current = c(1),
      Date_time_step7 = format(Sys.time(), "%Y%m%d-%H%M%OS"),
      changed_rp_step7 = c('Yes'),
      add_flag_rp_step7=c(0),
      
      amend_flag_rp_step7=c(1),
      social_rp=TRUE
    )
    
    vals4_rp_step7$Data[selected_row]<-test_a
    removeModal()
  })
  
  
  
  ###################### save changes RP ################
  observeEvent(input$save_rp_step8,{
    req(input$RP_mod_inc)
    
    
    
    
    #######################  step4
    cur_time<-format(Sys.time(), "%Y%m%d-%H%M%OS")
    test<-vals4_rp_step4$Data
    
    add_rp_step4_1<-sqldf("select * from test where changed_rp_step4='Yes'")
    if (nrow(add_rp_step4_1)>0) {
      
      All_data_rp_step4<-loadData_site_rp_step4()
      
      All_data_rp_step4_0<-sqldf(paste0("select * from All_data_rp_step4 where INC_rp = '",input$RP_mod_inc,"' and is_current=0"))
      All_data_rp_step4<-sqldf(paste0("select * from All_data_rp_step4 where INC_rp = '",input$RP_mod_inc,"' and is_current=1"))
      
      
      existing_lines<-unique(All_data_rp_step4$Line_number)
      
      add_rp_step4_1$amend_flag_rp_step4<-ifelse(add_rp_step4_1$Line_number %in% existing_lines, add_rp_step4_1$amend_flag_rp_step4,0) #rectify amend flag if someone has added and amended the action in same step
      add_rp_step4_1$add_flag_rp_step4<-ifelse(!(add_rp_step4_1$Line_number %in% existing_lines), 1,add_rp_step4_1$add_flag_rp_step4) #rectify amend flag if someone has added and amended the action in same step
      
      #amend
      add_rp_step4_2<-sqldf("select * from add_rp_step4_1 where amend_flag_rp_step4=1 and add_flag_rp_step4=0")
      if (nrow(add_rp_step4_2)>0) {
        
        
        #Change is current flag for previous data and save the files
        All_data_rp_step4<-select(All_data_rp_step4,-c(is_current))
        
        All_data_rp_step4<-sqldf("select a.*,case when b.Line_number > 0 then 0 else 1 end as is_current from All_data_rp_step4 as a left join add_rp_step4_2 as b on a.line_number=b.line_number")
        All_data_rp_step4<-rbind(All_data_rp_step4,All_data_rp_step4_0)
        
        
        for (i in unique(All_data_rp_step4$Date_time_step4)) {
          
          mod_old_data<-filter(All_data_rp_step4,All_data_rp_step4$Date_time_step4==i)
          mod_old_data$amend_flag_rp_step4<-0
          mod_old_data$add_flag_rp_step4<-0
          mod_old_data$changed_rp_step4<-NA
          mod_old_data$msg_req_rp<-TRUE
          
          write_csv( mod_old_data ,path = paste0("Data_site_RP_step4/RP_step4_Mydata",i , ".csv"))
        }
        
        #Write the newly modified data
        new_sit_rep_step4<-sqldf(paste0("select INC_rp,Site_rp_s4,Business_area_rp_s4, Process_rp_s4, Priority_rating_rp_s4, Team_name_rp_s4, ivr_messaging_rp, ivr_msg_details, 
                                                   online_messaging_rp, online_msg_details, social_media_rp, site_rp_actions_s4,Line_number, is_current,Date_time_step4
                                from add_rp_step4_2"))
        
        
        new_sit_rep_step4$User<-session_user$Data
        new_sit_rep_step4$Date_time_step4<-cur_time 
        
        new_sit_rep_step4$amend_flag_rp_step4<-0
        new_sit_rep_step4$add_flag_rp_step4<-0
        new_sit_rep_step4$changed_rp_step4<-NA
        new_sit_rep_step4$msg_req_rp<-TRUE
        
        write_csv(new_sit_rep_step4, path = paste0("Data_site_RP_step4/RP_step4_Mydata",cur_time , ".csv"))
        
      }
      
      #add and add/amend
      add_rp_step4_3<-sqldf("select * from add_rp_step4_1 where add_flag_rp_step4=1 and amend_flag_rp_step4=0")
      
      if (nrow(add_rp_step4_3)>0) {
        #print("add")
        add_rp_step4_3$Date_time_step4<-cur_time 
        add_rp_step4_3$User<-session_user$Data
        
        add_rp_step4_3$amend_flag_rp_step4<-0
        add_rp_step4_3$add_flag_rp_step4<-0
        add_rp_step4_3$changed_rp_step4<-NA
        add_rp_step4_3$msg_req_rp<-TRUE
        
        #If someone is adding and amending different actions in the same step then add the amended line to new line data 
        if(exists('new_sit_rep_step4')) {
          if(nrow(new_sit_rep_step4)>0) {
            add_rp_step4_3<-rbind(add_rp_step4_3,new_sit_rep_step4)
          }
        }
        
        
        write_csv(add_rp_step4_3, path = paste0("Data_site_RP_step4/RP_step4_Mydata",cur_time , ".csv"))
        
      }
      
      
      shinyjs::reset("messaging_requ_details")
    }
    
    
    ########################## step 5
    test<-vals4_rp_step5$Data
    
    add_rp_step5_1<-sqldf("select * from test where changed_rp_step5='Yes'")
    
    if (nrow(add_rp_step5_1)>0) {
      All_data_rp_step5<-loadData_site_rp_step5()
      
      All_data_rp_step5_0<-sqldf(paste0("select * from All_data_rp_step5 where INC_rp = '",input$RP_mod_inc,"' and is_current=0"))
      All_data_rp_step5<-sqldf(paste0("select * from All_data_rp_step5 where INC_rp = '",input$RP_mod_inc,"' and is_current=1"))
      
      
      existing_lines<-unique(All_data_rp_step5$Line_number)
      
      add_rp_step5_1$amend_flag_rp_step5<-ifelse(add_rp_step5_1$Line_number %in% existing_lines, add_rp_step5_1$amend_flag_rp_step5,0) #rectify amend flag if someone has added and amended the action in same step
      add_rp_step5_1$add_flag_rp_step5<-ifelse(!(add_rp_step5_1$Line_number %in% existing_lines), 1,add_rp_step5_1$add_flag_rp_step5) #rectify amend flag if someone has added and amended the action in same step
      
      #amend
      add_rp_step5_2<-sqldf("select * from add_rp_step5_1 where amend_flag_rp_step5=1 and add_flag_rp_step5=0")
      if (nrow(add_rp_step5_2)>0) {
        
        
        #Change is current flag for previous data and save the files
        All_data_rp_step5<-select(All_data_rp_step5,-c(is_current))
        
        All_data_rp_step5<-sqldf("select a.*,case when b.Line_number > 0 then 0 else 1 end as is_current from All_data_rp_step5 as a left join add_rp_step5_2 as b on a.line_number=b.line_number")
        All_data_rp_step5<-rbind(All_data_rp_step5,All_data_rp_step5_0)
        
        
        for (i in unique(All_data_rp_step5$Date_time_step5)) {
          
          mod_old_data<-filter(All_data_rp_step5,All_data_rp_step5$Date_time_step5==i)
          mod_old_data$amend_flag_rp_step5<-0
          mod_old_data$add_flag_rp_step5<-0
          mod_old_data$changed_rp_step5<-NA
          mod_old_data$telephony_rp<-TRUE
          
          write_csv( mod_old_data ,path = paste0("Data_site_RP_step5/RP_step5_Mydata",i , ".csv"))
        }
        
        #Write the newly modified data
        new_sit_rep_step5<-sqldf(paste0("select INC_rp,Site_rp_s5,Business_area_rp_s5, Process_rp_s5, Priority_rating_rp_s5, Team_name_rp_s5,line_closure_rp,
                                     lines_closed_rp,calls_diverted_from_rp, calls_diverted_to_rp,site_rp_actions_s5,Line_number, is_current,Date_time_step5
                                from add_rp_step5_2"))
        
        
        new_sit_rep_step5$User<-session_user$Data
        new_sit_rep_step5$Date_time_step5<-cur_time 
        
        new_sit_rep_step5$amend_flag_rp_step5<-0
        new_sit_rep_step5$add_flag_rp_step5<-0
        new_sit_rep_step5$changed_rp_step5<-NA
        new_sit_rep_step5$telephony_rp<-TRUE
        
        write_csv(new_sit_rep_step5, path = paste0("Data_site_RP_step5/RP_step5_Mydata",cur_time , ".csv"))
        
      }
      
      #add and add/amend
      add_rp_step5_3<-sqldf("select * from add_rp_step5_1 where add_flag_rp_step5=1 and amend_flag_rp_step5=0")
      
      if (nrow(add_rp_step5_3)>0) {
        #print("add")
        add_rp_step5_3$Date_time_step5<-cur_time 
        add_rp_step5_3$User<-session_user$Data
        
        add_rp_step5_3$amend_flag_rp_step5<-0
        add_rp_step5_3$add_flag_rp_step5<-0
        add_rp_step5_3$changed_rp_step5<-NA
        add_rp_step5_3$telephony_rp<-TRUE
        
        #If someone is adding and amending different actions in the same step then add the amended line to new line data 
        if(exists('new_sit_rep_step5')) {
          if(nrow(new_sit_rep_step5)>0) {
            add_rp_step5_3<-rbind(add_rp_step5_3,new_sit_rep_step5)
          }
        }
        
        
        write_csv(add_rp_step5_3, path = paste0("Data_site_RP_step5/RP_step5_Mydata",cur_time , ".csv"))
        
      }
      
      
      
      
      shinyjs::reset("telephony_requ_details")
      
    }
    
    
    ####################### step 6
    test<-vals4_rp_step6$Data
    
    add_rp_step6_1<-sqldf("select * from test where changed_rp_step6='Yes'")
    if (nrow(add_rp_step6_1)>0) {
      
      All_data_mod_sit_rep<-loadData_site_rp_step6()
      
      All_data_mod_sit_rep_0<-sqldf(paste0("select * from All_data_mod_sit_rep where INC_rp = '",input$RP_mod_inc,"' and is_current=0"))
      All_data_mod_sit_rep<-sqldf(paste0("select * from All_data_mod_sit_rep where INC_rp = '",input$RP_mod_inc,"' and is_current=1"))
      
      
      existing_lines<-unique(All_data_mod_sit_rep$Line_number)
      
      add_rp_step6_1$amend_flag_rp_step6<-ifelse(add_rp_step6_1$Line_number %in% existing_lines, add_rp_step6_1$amend_flag_rp_step6,0) #rectify amend flag if someone has added and amended the action in same step
      add_rp_step6_1$add_flag_rp_step6<-ifelse(!(add_rp_step6_1$Line_number %in% existing_lines), 1,add_rp_step6_1$add_flag_rp_step6) #rectify amend flag if someone has added and amended the action in same step
      
      #amend
      add_rp_step6_2<-sqldf("select * from add_rp_step6_1 where amend_flag_rp_step6=1 and add_flag_rp_step6=0")
      if (nrow(add_rp_step6_2)>0) {
        
        
        #Change is current flag for previous data and save the files
        All_data_mod_sit_rep<-select(All_data_mod_sit_rep,-c(is_current))
        
        All_data_mod_sit_rep<-sqldf("select a.*,case when b.Line_number > 0 then 0 else 1 end as is_current from All_data_mod_sit_rep as a left join add_rp_step6_2 as b on a.line_number=b.line_number")
        All_data_mod_sit_rep<-rbind(All_data_mod_sit_rep,All_data_mod_sit_rep_0)
        
        
        for (i in unique(All_data_mod_sit_rep$Date_time_step6)) {
          
          mod_old_data<-filter(All_data_mod_sit_rep,All_data_mod_sit_rep$Date_time_step6==i)
          mod_old_data$amend_flag_rp_step6<-0
          mod_old_data$add_flag_rp_step6<-0
          mod_old_data$changed_rp_step6<-NA
          mod_old_data$webchat_rp<-TRUE
          
          write_csv( mod_old_data ,path = paste0("Data_site_RP_step6/RP_step6_Mydata",i , ".csv"))
        }
        
        #Write the newly modified data
        new_sit_rep_step6<-sqldf(paste0("select INC_rp,Site_rp_s6,Business_area_rp_s6,Process_rp_s6,Priority_rating_rp_s6,Team_name_rp_s6,Area_impacted_rp,location_impacted_rp,fte_impacted_rp,
                                                             issue_rp,site_rp_actions_s6,Line_number, is_current,Date_time_step6
                                from add_rp_step6_2"))
        
        
        new_sit_rep_step6$User<-session_user$Data
        new_sit_rep_step6$Date_time_step6<-cur_time 
        
        new_sit_rep_step6$amend_flag_rp_step6<-0
        new_sit_rep_step6$add_flag_rp_step6<-0
        new_sit_rep_step6$changed_rp_step6<-NA
        new_sit_rep_step6$webchat_rp<-TRUE
        
        write_csv(new_sit_rep_step6, path = paste0("Data_site_RP_step6/RP_step6_Mydata",cur_time , ".csv"))
        
      }
      
      #add and add/amend
      add_rp_step6_3<-sqldf("select * from add_rp_step6_1 where add_flag_rp_step6=1 and amend_flag_rp_step6=0")
      
      if (nrow(add_rp_step6_3)>0) {
        #print("add")
        add_rp_step6_3$Date_time_step6<-cur_time 
        add_rp_step6_3$User<-session_user$Data
        
        add_rp_step6_3$amend_flag_rp_step6<-0
        add_rp_step6_3$add_flag_rp_step6<-0
        add_rp_step6_3$changed_rp_step6<-NA
        add_rp_step6_3$webchat_rp<-TRUE
        
        #If someone is adding and amending different actions in the same step then add the amended line to new line data 
        if(exists('new_sit_rep_step6')) {
          if(nrow(new_sit_rep_step6)>0) {
            add_rp_step6_3<-rbind(add_rp_step6_3,new_sit_rep_step6)
          }
        }
        
        
        write_csv(add_rp_step6_3, path = paste0("Data_site_RP_step6/RP_step6_Mydata",cur_time , ".csv"))
        
      }
      
      shinyjs::reset("webchat_requ_details")
      
      
    }
    
    ################## step 7
    test<-vals4_rp_step7$Data
    
    add_rp_step7_1<-sqldf("select * from test where changed_rp_step7='Yes'")
    if (nrow(add_rp_step7_1)>0) {
      
      All_data_mod_sit_rep<-loadData_site_rp_step7()
      
      All_data_mod_sit_rep_0<-sqldf(paste0("select * from All_data_mod_sit_rep where INC_rp = '",input$RP_mod_inc,"' and is_current=0"))
      All_data_mod_sit_rep<-sqldf(paste0("select * from All_data_mod_sit_rep where INC_rp = '",input$RP_mod_inc,"' and is_current=1"))
      
      
      existing_lines<-unique(All_data_mod_sit_rep$Line_number)
      
      add_rp_step7_1$amend_flag_rp_step7<-ifelse(add_rp_step7_1$Line_number %in% existing_lines, add_rp_step7_1$amend_flag_rp_step7,0) #rectify amend flag if someone has added and amended the action in same step
      add_rp_step7_1$add_flag_rp_step7<-ifelse(!(add_rp_step7_1$Line_number %in% existing_lines), 1,add_rp_step7_1$add_flag_rp_step7) #rectify amend flag if someone has added and amended the action in same step
      
      #amend
      add_rp_step7_2<-sqldf("select * from add_rp_step7_1 where amend_flag_rp_step7=1 and add_flag_rp_step7=0")
      if (nrow(add_rp_step7_2)>0) {
        
        
        #Change is current flag for previous data and save the files
        All_data_mod_sit_rep<-select(All_data_mod_sit_rep,-c(is_current))
        
        All_data_mod_sit_rep<-sqldf("select a.*,case when b.Line_number > 0 then 0 else 1 end as is_current from All_data_mod_sit_rep as a left join add_rp_step7_2 as b on a.line_number=b.line_number")
        All_data_mod_sit_rep<-rbind(All_data_mod_sit_rep,All_data_mod_sit_rep_0)
        
        
        for (i in unique(All_data_mod_sit_rep$Date_time_step7)) {
          
          mod_old_data<-filter(All_data_mod_sit_rep,All_data_mod_sit_rep$Date_time_step7==i)
          mod_old_data$amend_flag_rp_step7<-0
          mod_old_data$add_flag_rp_step7<-0
          mod_old_data$changed_rp_step7<-NA
          mod_old_data$social_rp<-TRUE
          
          write_csv( mod_old_data ,path = paste0("Data_site_RP_step7/RP_step7_Mydata",i , ".csv"))
        }
        
        #Write the newly modified data
        new_sit_rep_step7<-sqldf(paste0("select INC_rp,Site_rp_s7,Business_area_rp_s7,Process_rp_s7,Priority_rating_rp_s7,Team_name_rp_s7,Area_impacted_rp1,location_impacted_rp1,fte_impacted_rp1,
                                                             issue_rp1,site_rp_actions_s7,Line_number, is_current,Date_time_step7
                                from add_rp_step7_2"))
        
        
        new_sit_rep_step7$User<-session_user$Data
        new_sit_rep_step7$Date_time_step7<-cur_time 
        
        new_sit_rep_step7$amend_flag_rp_step7<-0
        new_sit_rep_step7$add_flag_rp_step7<-0
        new_sit_rep_step7$changed_rp_step7<-NA
        new_sit_rep_step7$social_rp<-TRUE
        
        write_csv(new_sit_rep_step7, path = paste0("Data_site_RP_step7/RP_step7_Mydata",cur_time , ".csv"))
        
      }
      
      #add and add/amend
      add_rp_step7_3<-sqldf("select * from add_rp_step7_1 where add_flag_rp_step7=1 and amend_flag_rp_step7=0")
      
      if (nrow(add_rp_step7_3)>0) {
        #print("add")
        add_rp_step7_3$Date_time_step7<-cur_time 
        add_rp_step7_3$User<-session_user$Data
        
        add_rp_step7_3$amend_flag_rp_step7<-0
        add_rp_step7_3$add_flag_rp_step7<-0
        add_rp_step7_3$changed_rp_step7<-NA
        add_rp_step7_3$social_rp<-TRUE
        
        #If someone is adding and amending different actions in the same step then add the amended line to new line data 
        if(exists('new_sit_rep_step7')) {
          if(nrow(new_sit_rep_step7)>0) {
            add_rp_step7_3<-rbind(add_rp_step7_3,new_sit_rep_step7)
          }
        }
        
        
        write_csv(add_rp_step7_3, path = paste0("Data_site_RP_step7/RP_step7_Mydata",cur_time , ".csv"))
        
      }
      
      
      shinyjs::reset("social_requ_details")
      
    }
    
    
    
    
    
    
    
    
    
    
    
    #Send email for amending Site RP details
    sender <- "zz_sm6496@centrica.com" # Replace with a valid address
    recipients <- session_user$Data # Replace with one or more valid addresses
    
    # Convert the data frame into an HTML Table
    # y1 <- htmlTable(add_rp_step4_1, rnames = FALSE)
    # y2 <- htmlTable(add_rp_step5_1, rnames = FALSE)
    # y3 <- htmlTable(add_rp_step6_1, rnames = FALSE)
    # y4 <- htmlTable(add_rp_step7_1, rnames = FALSE)
    
    y1 <- htmlTable(add_rp_step4_1  %>% select(-Date_time_step4,-INC_rp,-changed_rp_step4,-is_current,-add_flag_rp_step4,-amend_flag_rp_step4) , rnames = FALSE)
    y2 <- htmlTable(add_rp_step5_1  %>% select(-Date_time_step5,-INC_rp,-changed_rp_step5,-is_current,-add_flag_rp_step5,-amend_flag_rp_step5) , rnames = FALSE)
    y3 <- htmlTable(add_rp_step6_1  %>% select(-Date_time_step6,-INC_rp,-changed_rp_step6,-is_current,-add_flag_rp_step6,-amend_flag_rp_step6) , rnames = FALSE)
    y4 <- htmlTable(add_rp_step7_1  %>% select(-Date_time_step7,-INC_rp,-changed_rp_step7,-is_current,-add_flag_rp_step7,-amend_flag_rp_step7) , rnames = FALSE)
    
    
    crt_new_open_tm<-format(Sys.time()+10, "%Y-%m-%d %H:%M:%OS")
    crt_info_rp <- loadData_crt_site()
    crt_info_rp<-sqldf(paste0("select * from crt_info_rp where INC = '",input$RP_mod_inc,"'"))
    
    crt_rp_open_tm<-min(crt_info_rp$Date_time)
    #crt_info_imt<-sqldf(paste0("select * from crt_info_imt where  is_current==",1))
    crt_info_rp<-sqldf(paste0("select * from crt_info_rp where INC = '",input$RP_mod_inc,"' and is_current==",1))
    # Define body of email
    html_body <- paste0('<html><head>
                        <style>
                        body{font-family:BG Flame, sans-serif;}
                        table{border-left:0.1px solid #000000;border-top:0.1px solid #000000;width: 1000px;}
                        table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        img {width: 1000px;}
                        </style>
                        </head><body><table>
                         
                        <tr><td><img src=\"https://azsu-p-app-026.azure.uk.centricaplc.com:3939/content/230/_w_13f9edc3/update.jpg\"></td></tr>',
                        "<tr><td><br>

                           <b>INC: </b>",paste0(unique(crt_info_rp$INC),collapse="|"),"<br><br>
                           <b>Site impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_rp$Site,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                           <b>Business area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_rp$Business_area,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                           <b>Process area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_rp$Process,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                           <b>Teams impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_rp$Teams,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                           <b>Incident Description: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_rp$Description,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>

                          <b>Last update to the incident: </b><br><br>",ifelse(nrow(add_rp_step4_1)>0,paste0("<b>Messaging: </b>Below are the details for step 4: <br><br>",y1),""),
                        ifelse(nrow(add_rp_step5_1)>0,paste0("<br><br><b>Telephony: </b>Below are the details for step 5: <br><br>",y2),""),
                        ifelse(nrow(add_rp_step6_1)>0,paste0("<br><br><b>Webchat: </b>Below are the details for step 6: <br><br>",y3),""),
                        ifelse(nrow(add_rp_step7_1)>0,paste0("<br><br><b>Social: </b>Below are the details for step 7: <br><br>",y4),""),"
                                                              <br><br>
                                                              
                          <b>Incident open date: </b>",as.Date(substr(crt_rp_open_tm[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_rp_open_tm[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Incident latest update date: </b>",crt_new_open_tm," ","<br><br>
                         <b>Last user to update BCP: </b>",session_user$Data,"<br><br>

                          


                          </td></tr></table></body></html>

                         "
                        
    )
    
    
    email_rp <- send.mail(from = sender,
                          to = recipients,
                          subject=paste0("Incident ",crt_info_rp$INC[1]," | Update | ",session_user$Data),
                          body = html_body,
                          smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                          authenticate = FALSE,
                          #inline=TRUE,
                          html = TRUE,
                          send = FALSE)
    email_rp$send()
    
    
    #refresh and show Popup box
    updateSelectInput(session,inputId = "RP_mod_inc",label="Enter incident number:",
                      choices=c("",unique(all_INC_data$Data$INC)),selected="")
    updateTextAreaInput(session,inputId="site_rp_actions_s4",value = "") 
    updateTextAreaInput(session,inputId="site_rp_actions_s5",value = "") 
    updateTextAreaInput(session,inputId="site_rp_actions_s6",value = "") 
    updateTextAreaInput(session,inputId="site_rp_actions_s7",value = "") 
    
    sendSweetAlert(
      session = session,
      title = "Success !!",
      text = paste("Actions Added"),
      type = "success"
    )
    
    
    
    rp_data_step4$Data<-loadData_site_rp_step4()
    rp_data_step5$Data<-loadData_site_rp_step5()
    rp_data_step6$Data<-loadData_site_rp_step6()
    rp_data_step7$Data<-loadData_site_rp_step7()
    
    updateProgressBar(session = session, id = "rp_invol", value = count_rp_involvement()*100/length(unique(loadData_crt_site()$INC)))
    
    
    
    
    
  })
 
  
  ##########################  Audit trail  ############################

  #Refresh incident numbers in Audit trail modifications
  observeEvent(input$Refresh_btn_audit1,{
    updateSelectInput(session,inputId = "audit_inc",label="Enter incident number:",
                      choices=c("",unique(all_INC_data$Data$INC)),selected="")
  })
  
  
  output$audit_det_crt<-DT::renderDataTable({
    req(input$audit_inc)
    All_data_mod_audit<-loadData_crt_site()
    All_data_mod_audit<-sqldf(paste0("select INC,Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Facilities,Vulnerable_customers from All_data_mod_audit where INC = '",input$audit_inc,"'"))
    datatable(All_data_mod_audit,options = list(dom = 't',scrollX=TRUE),rownames = FALSE,
              escape=F)}
  )
  
  output$moreControls <- renderUI({
    req(input$audit_inc)
    
    All_data_mod_CRT_comms<-loadData_crt_comms()
    All_data_mod_CRT<-loadData_crt_site()
    All_data_mod_CRT <-subset(All_data_mod_CRT,All_data_mod_CRT$Business_area != '')
    
    All_data_mod_sit_rep <- loadData_site_rep()
    All_data_mod_CRT_ops<-loadData_crt_ops()
    
    All_data_mod_IMT<-loadData_site_imt()
    All_data_mod_IMT <-subset(All_data_mod_IMT,All_data_mod_IMT$Who_is_impacted != '' )
    
    All_data_mod_NR<-loadData_site_nr()
    All_data_mod_NR <-subset(All_data_mod_NR,All_data_mod_NR$Action_required != '')
    
    All_data_mod_RP_4<-loadData_site_rp_step4()
    All_data_mod_RP_5<-loadData_site_rp_step5()
    All_data_mod_RP_6<-loadData_site_rp_step6()
    All_data_mod_RP_7<-loadData_site_rp_step7()
    
    
    colnames(All_data_mod_RP_4)[colnames(All_data_mod_RP_4)=="is_current"] <- "is_current_s4"
    colnames(All_data_mod_RP_4)[colnames(All_data_mod_RP_4)=="Line_number"] <- "Line_number_s4"
    # colnames(All_data_mod_RP_4)[colnames(All_data_mod_RP_4)=="User"] <- "User_s4"
    
    colnames(All_data_mod_RP_5)[colnames(All_data_mod_RP_5)=="is_current"] <- "is_current_s5"
    colnames(All_data_mod_RP_5)[colnames(All_data_mod_RP_5)=="Line_number"] <- "Line_number_s5"
    #   colnames(All_data_mod_RP_5)[colnames(All_data_mod_RP_5)=="User"] <- "User_s5"
    
    colnames(All_data_mod_RP_6)[colnames(All_data_mod_RP_6)=="is_current"] <- "is_current_s6"
    colnames(All_data_mod_RP_6)[colnames(All_data_mod_RP_6)=="Line_number"] <- "Line_number_s6"
    #  colnames(All_data_mod_RP_6)[colnames(All_data_mod_RP_6)=="User"] <- "User_s6"
    
    colnames(All_data_mod_RP_7)[colnames(All_data_mod_RP_7)=="is_current"] <- "is_current_s7"
    colnames(All_data_mod_RP_7)[colnames(All_data_mod_RP_7)=="Line_number"] <- "Line_number_s7"
    # colnames(All_data_mod_RP_7)[colnames(All_data_mod_RP_7)=="User"] <- "User_s7"
    
    All_data_mod_CRT$Page_name<-"CRT"
    All_data_mod_CRT$Page_name_full<-"Customer Response Team"
    #  All_data_mod_CRT <- subset(All_data_mod_CRT,All_data_mod_CRT$Business_area != '')
    
    All_data_mod_CRT_comms$Page_name<-"CRT_comms"
    All_data_mod_CRT_comms$Page_name_full<-"Customer Response Team (Communications)"
    
    All_data_mod_CRT_ops$Page_name<-"CRT_ops"
    All_data_mod_CRT_ops$Page_name_full<-"Customer Response Team (Operation details)"
    
    All_data_mod_sit_rep$Page_name<-"sit_rep"
    #All_data_mod_sit_rep <-subset(All_data_mod_sit_rep,All_data_mod_sit_rep$Chairperson != '')
    All_data_mod_sit_rep$Page_name_full<-"Situation Report"
    
    All_data_mod_IMT$Page_name<-"IMT"
    All_data_mod_IMT$Page_name_full<-"Incident Management Team"
    
    All_data_mod_NR$Page_name<-"NR"
    All_data_mod_NR$Page_name_full<-"National Resilience Team"
    
    # All_data_mod_RP_4$Page_name<-"RP"
    # All_data_mod_RP_4$Page_name_full<-"Resource and Planning Team"
    # All_data_mod_RP_4 <-subset(All_data_mod_RP_4,All_data_mod_RP_4$Site_rp_s4 != '')
    # 
    # All_data_mod_RP_5$Page_name<-"RP"
    # All_data_mod_RP_5$Page_name_full<-"Resource and Planning Team"
    # All_data_mod_RP_5 <-subset(All_data_mod_RP_5,All_data_mod_RP_5$Site_rp_s5 != '')
    # 
    # All_data_mod_RP_6$Page_name<-"RP"
    # All_data_mod_RP_6$Page_name_full<-"Resource and Planning Team"
    # All_data_mod_RP_6 <-subset(All_data_mod_RP_6,All_data_mod_RP_6$Site_rp_s6 != '')
    # 
    # All_data_mod_RP_7$Page_name<-"RP"
    # All_data_mod_RP_7$Page_name_full<-"Resource and Planning Team"
    # All_data_mod_RP_7 <-subset(All_data_mod_RP_7,All_data_mod_RP_7$Site_rp_s7 != '')
    
    
    All_data_mod_RP<-full_join(full_join(full_join(All_data_mod_RP_4,All_data_mod_RP_5,by=c("INC_rp"="INC_rp", "Date_time_step4"= "Date_time_step5","User"="User"))
                                         ,All_data_mod_RP_6,by=c("INC_rp"="INC_rp","Date_time_step4"= "Date_time_step6","User"="User"))
                               ,All_data_mod_RP_7,by=c("INC_rp"="INC_rp","Date_time_step4"= "Date_time_step7","User"="User"))
    
    All_data_mod_RP$Page_name<-"RP"
    All_data_mod_RP$Page_name_full<-"Resource and Planning Team"
    
    
    
    colnames(All_data_mod_IMT)[colnames(All_data_mod_IMT)=="INC_imt"] <- "INC"
    colnames(All_data_mod_IMT)[colnames(All_data_mod_IMT)=="Site_imt"] <- "Site"
    colnames(All_data_mod_IMT)[colnames(All_data_mod_IMT)=="Date_time_imt"] <- "Date_time"
    colnames(All_data_mod_IMT)[colnames(All_data_mod_IMT)=="Is_current_imt"] <- "Is_current"
    
    crt_imt <- smartbind(All_data_mod_CRT,All_data_mod_IMT)
    
    
    colnames(All_data_mod_NR)[colnames(All_data_mod_NR)=="INC_nr"] <- "INC"
    colnames(All_data_mod_NR)[colnames(All_data_mod_NR)=="Site_nr"] <- "Site"
    colnames(All_data_mod_NR)[colnames(All_data_mod_NR)=="Date_time_nr"] <- "Date_time"
    colnames(All_data_mod_NR)[colnames(All_data_mod_NR)=="Is_current_nr"] <- "Is_current"
    colnames(All_data_mod_NR)[colnames(All_data_mod_NR)=="User_nr"] <- "User"
    
    crt_imt_nr <- smartbind(crt_imt,All_data_mod_NR)
    
    colnames(All_data_mod_RP)[colnames(All_data_mod_RP)=="INC_rp"] <- "INC"
    # colnames(All_data_mod_RP)[colnames(All_data_mod_RP)=="Site_rp_s4"] <- "Site"
    colnames(All_data_mod_RP)[colnames(All_data_mod_RP)=="Date_time_step4"] <- "Date_time"
    # colnames(All_data_mod_RP)[colnames(All_data_mod_RP)=="is_current"] <- "Is_current"
    crt_imt_nr_rp <- smartbind(crt_imt_nr,All_data_mod_RP)
    
    colnames(All_data_mod_sit_rep)[colnames(All_data_mod_sit_rep)=="INC_sit_rep"] <- "INC"
    colnames(All_data_mod_sit_rep)[colnames(All_data_mod_sit_rep)=="User_sit_rep"] <- "User"
    colnames(All_data_mod_sit_rep)[colnames(All_data_mod_sit_rep)=="Date_time_si"] <- "Date_time"
    colnames(All_data_mod_sit_rep)[colnames(All_data_mod_sit_rep)=="is_current"] <- "Is_current"
    colnames(All_data_mod_sit_rep)[colnames(All_data_mod_sit_rep)=="Date"] <- "Date_sit_rep"
    
    
    crt_imt_nr_rp_sit_rep <- smartbind(crt_imt_nr_rp,All_data_mod_sit_rep)
    
    crt_imt_nr_rp_sit_comms <- smartbind(crt_imt_nr_rp_sit_rep,All_data_mod_CRT_comms)
    
    
    crt_imt_nr_rp_sit_comms_ops <- smartbind(crt_imt_nr_rp_sit_comms,All_data_mod_CRT_ops)
    
    final_data <- crt_imt_nr_rp_sit_comms_ops
    
    #final_data <-subset(final_data,final_data$Page_name != 'RP')
    
    
    final_data<-final_data %>%
      group_by(INC,Page_name) %>%
      arrange(Date_time) %>%
      mutate(indicator1=dense_rank(Date_time))
    
    final_data<-final_data %>%
      group_by(INC,Page_name,Site) %>%
      arrange(Date_time) %>%
      mutate(indicator2=dense_rank(Date_time))
    
    final_data1<-sqldf(paste0("select * from final_data where INC = '",input$audit_inc,"'"))
    write.csv(final_data,"final_data.csv")
    # final_data1<-sqldf(paste0("select * from final_data where INC = '",5,"' and Page_name='IMT'"))
    
    
    
    closed_data<-All_data_mod_CRT  # closed incidents information
    closed_data<-sqldf(paste0("select * from closed_data where INC = '",input$audit_inc,"' and is_current=1"))
    
    
    #final data list
    crt_data_final<- final_data1[,colnames(final_data1) %in% c("INC","Site","Business_area","Process","Description","Teams","Customer_contact","Systems_other","Facilities_other","People","Vulnerable_customers","Systems","Facilities","Description","Date_time","User","Is_current","Page_name_full","indicator1","indicator2")]
    
    # crt_data_final <-subset(crt_data_final,crt_data_final$Business_area != '')
    
    imt_data_final<- final_data1[,colnames(final_data1) %in% c("INC","Site","Who_is_impacted","Estimated_volume_of_users_impacted","Root_cause","Timescales_for_recovery",
                                                               "IMT","Comms","Site_continuity","Description",
                                                               "Date_time","User","Is_current","Page_name_full")]
    
    #imt_data_final <-subset(imt_data_final,imt_data_final$Who_is_impacted != '' && !(is.na(imt_data_final$Who_is_impacted)))
    # imt_data_final <-subset(imt_data_final,imt_data_final$Who_is_impacted != '' )
    nr_data_final<- final_data1[,colnames(final_data1) %in% c("INC","Site","Action_required","Sungard_required","Sungard_available","Sungard_accessible",
                                                              "Escalation_required","Escalated_to","Comments","Date_time","User","Is_current","Page_name_full")]
    
    #nr_data_final <-subset(nr_data_final,nr_data_final$Action_required != '')
    
    rp_data_final<- final_data1[,colnames(final_data1) %in% c("INC","Site_rp_s4",
                                                              "Business_area_rp_s4",
                                                              "Process_rp_s4",
                                                              "Priority_rating_rp_s4",
                                                              "Team_name_rp_s4",
                                                              "ivr_messaging_rp",
                                                              "ivr_msg_details",
                                                              "online_messaging_rp",
                                                              "online_msg_details",
                                                              "social_media_rp",
                                                              "site_rp_actions_s4",
                                                              "is_current_s4",
                                                              "Line_number_s4",
                                                              "changed_rp_step4",
                                                              "add_flag_rp_step4",
                                                              "amend_flag_rp_step4",
                                                              # "User_s4",
                                                              "Site_rp_s5",
                                                              "Business_area_rp_s5",
                                                              "Process_rp_s5",
                                                              "Priority_rating_rp_s5",
                                                              "Team_name_rp_s5",
                                                              "line_closure_rp",
                                                              "lines_closed_rp",
                                                              "calls_diverted_from_rp",
                                                              "calls_diverted_to_rp",
                                                              "site_rp_actions_s5",
                                                              "is_current_s5",
                                                              "Line_number_s5",
                                                              "changed_rp_step5",
                                                              "add_flag_rp_step5",
                                                              "amend_flag_rp_step5",
                                                              # "User_s5",
                                                              "Site_rp_s6",
                                                              "Business_area_rp_s6",
                                                              "Process_rp_s6",
                                                              "Priority_rating_rp_s6",
                                                              "Team_name_rp_s6",
                                                              "Area_impacted_rp",
                                                              "location_impacted_rp",
                                                              "fte_impacted_rp",
                                                              "issue_rp",
                                                              "site_rp_actions_s6",
                                                              "Line_number_s6",
                                                              "changed_rp_step6",
                                                              "add_flag_rp_step6",
                                                              "amend_flag_rp_step6",
                                                              # "User_s6",
                                                              "is_current_s6",
                                                              "Site_rp_s7",
                                                              "Business_area_rp_s7",
                                                              "Process_rp_s7",
                                                              "Priority_rating_rp_s7",
                                                              "Team_name_rp_s7",
                                                              "Area_impacted_rp1",
                                                              "location_impacted_rp1",
                                                              "fte_impacted_rp1",
                                                              "issue_rp1",
                                                              "site_rp_actions_s7",
                                                              "Line_number_s7",
                                                              "changed_rp_step7",
                                                              "add_flag_rp_step7",
                                                              "amend_flag_rp_step7",
                                                              #  "User_s7",
                                                              "is_current_s7",
                                                              "Page_name_full",
                                                              "Date_time",
                                                              "User")]
    
    sit_rep_data_final <- final_data1[,colnames(final_data1) %in% c("INC","Line_number","Site","Owner","Action","Status","Updates2","Chairperson","Date_sit_rep","Time","Summary","Updates","Date_time","Is_current","User","Page_name","Page_name_full")]
    
    #  sit_rep_data_final <-subset(sit_rep_data_final,sit_rep_data_final$Chairperson != '')
    
    crt_comms_final<- final_data1[,colnames(final_data1) %in% c("INC","Comms_required","Incident_number","SLT","IMT","People_comms","Operations_invoked","Changed","Is_current","Date_time","User")]
    
    crt_comms_final <-subset(crt_comms_final,crt_comms_final$Comms_required != '')
    
    crt_ops_final <- final_data1[,colnames(final_data1) %in% c("INC","Operational_call","Date_op","Time_op","Time_op1","Changed","Is_current","Date_time","User")]
    
    #write.csv(crt_ops_final,"crt_ops.csv")
    crt_ops_final <-subset(crt_ops_final,crt_ops_final$Operational_call != '')
    
    crt_imt_display <- smartbind(crt_data_final,imt_data_final)
    
    crt_nr_imt_display <- smartbind(crt_imt_display,nr_data_final)
    
    crt_nr_imt_display <- smartbind(crt_nr_imt_display,sit_rep_data_final)
    
    crt_nr_imt_comms_display <- smartbind(crt_nr_imt_display,crt_comms_final)
    
    crt_nr_imt_ops_display <- smartbind(crt_nr_imt_comms_display,crt_ops_final)
    
    crt_nr_imt_ops_rp_display <- smartbind(crt_nr_imt_ops_display,rp_data_final)
    
    
    crt_nr_imt_ops_rp_display <- select(crt_nr_imt_ops_rp_display,INC,User,Date_time,Page_name_full,everything())
    #write.csv(crt_nr_imt_ops_display,"display.csv")
    
    output$downloaddata_audit_trail <- downloadHandler(
      filename = function() {
        paste("Audit Trail for INC",input$audit_inc,".csv")
      },
      content = function(file) {
        all_data_audit_trail <-crt_nr_imt_ops_rp_display
        DT_audit_trail=sqldf("select * from all_data_audit_trail")
        write.csv(DT_audit_trail,file, row.names = FALSE,na="")
      })
    
    
    
    crt_data_final<- crt_data_final %>% select(INC,Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Systems_other,Facilities,Facilities_other,Vulnerable_customers,Date_time,User,Is_current,Page_name_full,indicator1,indicator2)
    
    imt_data_final <- imt_data_final %>% select(INC,Site,Who_is_impacted,Estimated_volume_of_users_impacted,Root_cause,Timescales_for_recovery,
                                                IMT,Comms,Site_continuity,Description,
                                                Date_time,User,Is_current,Page_name_full)
    
    nr_data_final <- nr_data_final %>% select(INC,Site,Action_required,Sungard_required,Sungard_available,Sungard_accessible,
                                              Escalation_required,Escalated_to,Comments,Date_time,User,Is_current,Page_name_full)
    
    
    sit_rep_data_final <- sit_rep_data_final %>% select(INC,Line_number,Site,Owner,Action,Status,Updates2,Chairperson,Date_sit_rep,Time,Summary,Updates,Date_time,Is_current,User,Page_name,Page_name_full)
    
    crt_comms_final <- crt_comms_final %>% select(INC,Comms_required,Incident_number,SLT,IMT,People_comms,Operations_invoked,Changed,Is_current,Date_time,User)
    
    crt_ops_final <- crt_ops_final %>% select(INC,Operational_call,Date_op,Time_op,Time_op1,Changed,Is_current,Date_time,User)
    
    rp_data_final <- rp_data_final %>% select(INC,Site_rp_s4,
                                              Business_area_rp_s4,
                                              Process_rp_s4,
                                              Priority_rating_rp_s4,
                                              Team_name_rp_s4,
                                              ivr_messaging_rp,
                                              ivr_msg_details,
                                              online_messaging_rp,
                                              online_msg_details,
                                              social_media_rp,
                                              site_rp_actions_s4,
                                              is_current_s4,
                                              Line_number_s4,
                                              changed_rp_step4,
                                              add_flag_rp_step4,
                                              amend_flag_rp_step4,
                                              #  User_s4,
                                              Site_rp_s5,
                                              Business_area_rp_s5,
                                              Process_rp_s5,
                                              Priority_rating_rp_s5,
                                              Team_name_rp_s5,
                                              line_closure_rp,
                                              lines_closed_rp,
                                              calls_diverted_from_rp,
                                              calls_diverted_to_rp,
                                              site_rp_actions_s5,
                                              is_current_s5,
                                              Line_number_s5,
                                              changed_rp_step5,
                                              add_flag_rp_step5,
                                              amend_flag_rp_step5,
                                              #   User_s5,
                                              Site_rp_s6,
                                              Business_area_rp_s6,
                                              Process_rp_s6,
                                              Priority_rating_rp_s6,
                                              Team_name_rp_s6,
                                              Area_impacted_rp,
                                              location_impacted_rp,
                                              fte_impacted_rp,
                                              issue_rp,
                                              site_rp_actions_s6,
                                              Line_number_s6,
                                              changed_rp_step6,
                                              add_flag_rp_step6,
                                              amend_flag_rp_step6,
                                              #  User_s6,
                                              is_current_s6,
                                              Site_rp_s7,
                                              Business_area_rp_s7,
                                              Process_rp_s7,
                                              Priority_rating_rp_s7,
                                              Team_name_rp_s7,
                                              Area_impacted_rp1,
                                              location_impacted_rp1,
                                              fte_impacted_rp1,
                                              issue_rp1,
                                              site_rp_actions_s7,
                                              Line_number_s7,
                                              changed_rp_step7,
                                              add_flag_rp_step7,
                                              amend_flag_rp_step7,
                                              # User_s7,
                                              is_current_s7,
                                              Page_name_full,
                                              Date_time,
                                              User
    )
    
    dateinfo <- sqldf(paste0("select *,substr(date_time,1,8) as date from final_data1 where INC = '",input$audit_inc,"'"))
    
    # dateinfo <- sqldf(paste0("select *,substr(date_time,1,8) as date from final_data1 where INC = '",3,"'"))
    dateinfo <- sqldf(paste0("select * from dateinfo order by date_time "))
    
    unique_date <- sqldf(paste0("select distinct date as 'date_unique' from dateinfo "))
    
    
    cnt_date <- sqldf(paste0("select count(distinct date) as 'date_cnt' from dateinfo "))
    
    full_string<-''
    
    y_test <- htmlTable(final_data1, rnames = FALSE)
    
    
    i=1
    j=1
    concat_str<-''
    for (i in  1:cnt_date$date_cnt) {
      
count_aud_inc<-sqldf(paste0("select count(distinct date_time) as 'cnt' from dateinfo where "))
      count_aud_inc<-sqldf(paste0("select count(distinct date_time) as cnt from dateinfo where substr(date_time,1,8)='",substr(unique_date$date_unique[i],1,8),"'")) 
      
      
      datestamp<-sqldf(paste0("select distinct date_time as 'dtstamp' from dateinfo where substr(date_time,1,8)='",substr(unique_date$date_unique[i],1,8),"'"))
      
      
      b=''
      a<-paste0('
           <li class = "time-label">
             <span class = "bg-red"> ',as.Date(substr(unique_date$date_unique[i],1,8),format="%Y%m%d"),' </span>
           </li>
           ')
      for (j in  1:count_aud_inc$cnt){
        
        b1<-paste0('<li>',
                   ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="CRT",'<i class = "fa fa-user-tag bg-blue" ></i>',
                          ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="IMT",'<i class = "fa fa-city bg-green"></i>',
                                 ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="NR",'<i class = "fa fa-user-shield bg-purple"></i>',
                                        ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="sit_rep",'<i class = "fa fa-clipboard bg-yellow"></i>',
                                               ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="RP",'<i class = "fa fa-users bg-aqua"></i>',
                                                      ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="CRT_comms",'<i class = "fa fa-envelope bg-black"></i>',
                                                             ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="CRT_ops",'<i class = "fa fa-headset bg-orange"></i>',
                                                                    '<i class = "fa fa-envelope bg-blue"></i>') ) ) ) ) ) )
                   
                   ,'<div class = "timeline-item">
               <span class = "time">

                 <i class = "fa fa-clock-o"></i>
                ',as.ITime(substr(datestamp$dtstamp[j],10,15),format="%H%M%S"),'
               </span>
               
               <h3 class = "timeline-header">
                 <a href = "#"> ',paste0(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name_full,
                                         ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 == 1 
                                                & subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="CRT" , " - New incident",
                                                ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 != 1 &  subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator2 != 1
                                                       & subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="CRT" , " - Site amended",
                                                       ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 != 1 & subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator2 == 1
                                                              & subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="CRT" , " - Site added",""))
                                         )), ' </a>
                 
               </h3>

               <div class = "timeline-body" style="overflow-x:auto" >
                
                  ',ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="CRT",subset(crt_data_final,crt_data_final$Date_time==datestamp$dtstamp[j])
                           %>% select(-Date_time,-User,-Page_name_full,-Description,-indicator1,-indicator2) %>% 
                             tableHTML(caption = paste0(ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 == 1 , "A New incident has been raised. Below are the details of the incident.",
                                                               ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 != 1 & subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator2 != 1 , "The following site has been amended.",
                                                                      ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 != 1 & subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator2 == 1 , "The following site has been added to the incident.",))),'<br>','<br>',"Description :",'<br>', paste0(crt_data_final[1,]$Description,collapse= ' | ') ) ,rownames=FALSE, spacing = '2px') %>% 
                             add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:19)) %>%  
                             add_css_row(css = list(c('text-align','padding'), c( 'center','20px'))),
                           ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="IMT",subset(imt_data_final,imt_data_final$Date_time==datestamp$dtstamp[j]) %>% select(-Date_time,-User,-Page_name_full,-Root_cause) %>% 
                                    tableHTML(caption = paste0(ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 == 1 , "Details have been provided. Below are the details of the incident.",
                                                                      ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 != 1 & subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator2 != 1 , "Incident Management Teams has updated the details for the below site.",
                                                                             ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 != 1 & subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator2 == 1 , "Incident Management Teams has provided the details for the below site.",))),'<br>','<br>',' Root Cause : ','<br>',paste0(unique(subset(imt_data_final,imt_data_final$Date_time==datestamp$dtstamp[j])$Root_cause),collapse = ' | ' )  ) ,rownames=FALSE, spacing = '2px') %>%
                                    add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:21)) %>%  
                                    add_css_row(css = list(c('text-align','padding'), c( 'center','20px'))),
                                  ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="NR",subset(nr_data_final,nr_data_final$Date_time==datestamp$dtstamp[j]) %>% select(-Date_time,-User,-Page_name_full,-Comments) %>% 
                                           tableHTML(caption = paste0(ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 == 1 , "Details have been provided. Below are the details of the incident.",
                                                                             ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 != 1 & subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator2 != 1 , "National Resilience Team has updated the details for the below site.",
                                                                                    ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator1 != 1 & subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$indicator2 == 1 , "National Resilience Team has provided the details for the below site.",))),'<br>','<br>',' Comments :  ','<br>',paste0(unique(subset(nr_data_final,nr_data_final$Date_time==datestamp$dtstamp[j])$Comments),collapse = ' | ') ),rownames=FALSE, spacing = '2px')%>%
                                           add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:12)) %>%
                                           add_css_row(css = list(c('text-align','padding'), c( 'center','20px'))),
                                         # ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="RP",subset(rp_data_final,rp_data_final$Date_time==datestamp$dtstamp[j]) %>% select(-Date_time,-User,-Page_name_full) %>% tableHTML(rownames=FALSE, spacing = '2px') %>%
                                         #           add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:19)) %>%  
                                         #           add_css_row(css = list(c('text-align','padding'), c('center','20px'))),
                                         ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="CRT_comms",subset(crt_comms_final,crt_comms_final$Date_time==datestamp$dtstamp[j]) %>% select(-Date_time,-User,-Changed) %>% tableHTML(caption = "Customer Response Team has updated the communication details" ,rownames=FALSE,spacing = '2px') %>%
                                                  add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:19)) %>%
                                                  add_css_row(css = list(c('text-align','padding'), c('center','20px'))),
                                                ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="sit_rep",subset(sit_rep_data_final,sit_rep_data_final$Date_time==datestamp$dtstamp[j]) %>% select(-Date_time,-User,-Page_name_full,-Updates,-Summary,-Page_name) %>% tableHTML(caption = paste0('The following Situation report has been added on this incident','<br>','<br>','
                              Summary :  ','<br>',paste0(unique(subset(sit_rep_data_final,sit_rep_data_final$Date_time==datestamp$dtstamp[j])$Summary), collapse= ' | '),'<br>','<br>','Updates :','<br>',paste0(unique(subset(sit_rep_data_final,sit_rep_data_final$Date_time==datestamp$dtstamp[j])$Updates), collapse= ' | ')) ,rownames=FALSE,spacing = '2px') %>%
                                                         add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:19)) %>%
                                                         add_css_row(css = list(c('text-align','padding'), c('center','20px'))),
                                                       ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="CRT_ops",subset(crt_ops_final,crt_ops_final$Date_time==datestamp$dtstamp[j]) %>% select(-Date_time,-User) %>% tableHTML(caption = "Customer Response Team has updated the operation details",rownames=FALSE,spacing = '2px')%>%
                                                                add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:12)) %>%
                                                                add_css_row(css = list(c('text-align','padding'), c( 'center','20px'))),
                                                              ifelse(subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$Page_name=="RP",
                                                                     paste0(
                                                                       ifelse(
                                                                         nrow(subset(subset(rp_data_final,rp_data_final$Date_time==datestamp$dtstamp[j]),Site_rp_s4 != ''))>0,
                                                                         paste0("<b>Messaging: </b>Below are the details added by Resource and Planning team for messaging <br><br>",
                                                                                subset(rp_data_final,rp_data_final$Date_time==datestamp$dtstamp[j]) %>% select(Site_rp_s4,
                                                                                                                                                               Business_area_rp_s4,
                                                                                                                                                               Process_rp_s4,
                                                                                                                                                               Priority_rating_rp_s4,
                                                                                                                                                               Team_name_rp_s4,
                                                                                                                                                               Line_number_s4,
                                                                                                                                                               ivr_messaging_rp,
                                                                                                                                                               ivr_msg_details,
                                                                                                                                                               online_messaging_rp,
                                                                                                                                                               online_msg_details,
                                                                                                                                                               social_media_rp,
                                                                                                                                                               site_rp_actions_s4
                                                                                                                                                               #is_current_s4,
                                                                                                                                                               
                                                                                                                                                               # changed_rp_step4,
                                                                                                                                                               # add_flag_rp_step4,
                                                                                                                                                               # amend_flag_rp_step4
                                                                                ) %>% tableHTML(rownames=FALSE, spacing = '2px') %>%
                                                                                  add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:19)) %>%
                                                                                  add_css_row(css = list(c('text-align','padding'), c('center','20px')))
                                                                         ), 
                                                                         "<b>Messaging:</b> No details added<br> ")
                                                                       
                                                                       ,
                                                                       "<br>",
                                                                       ifelse(
                                                                         nrow(subset(subset(rp_data_final,rp_data_final$Date_time==datestamp$dtstamp[j]),Site_rp_s5 != ''))>0,
                                                                         paste0("<b>Telephony: </b>Below are the details added by Resource and Planning team for telephony <br><br>",
                                                                                subset(rp_data_final,rp_data_final$Date_time==datestamp$dtstamp[j]) %>% select( Site_rp_s5,
                                                                                                                                                                Business_area_rp_s5,
                                                                                                                                                                Process_rp_s5,
                                                                                                                                                                Priority_rating_rp_s5,
                                                                                                                                                                Team_name_rp_s5,
                                                                                                                                                                Line_number_s5,
                                                                                                                                                                line_closure_rp,
                                                                                                                                                                lines_closed_rp,
                                                                                                                                                                calls_diverted_from_rp,
                                                                                                                                                                calls_diverted_to_rp,
                                                                                                                                                                site_rp_actions_s5
                                                                                                                                                                #is_current_s5,
                                                                                                                                                                
                                                                                                                                                                # changed_rp_step5,
                                                                                                                                                                # add_flag_rp_step5,
                                                                                                                                                                # amend_flag_rp_step5
                                                                                ) %>% tableHTML(rownames=FALSE, spacing = '2px') %>%
                                                                                  add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:19)) %>%
                                                                                  add_css_row(css = list(c('text-align','padding'), c('center','20px')))
                                                                         ),
                                                                         "<b>Telephony:</b> No details added <br>")
                                                                       
                                                                       ,
                                                                       "<br>",
                                                                       ifelse(
                                                                         nrow(subset(subset(rp_data_final,rp_data_final$Date_time==datestamp$dtstamp[j]),Site_rp_s6 != ''))>0,
                                                                         paste0("<b>Webchat: </b>Below are the details added by Resource and Planning team for webchat <br><br>",
                                                                                subset(rp_data_final,rp_data_final$Date_time==datestamp$dtstamp[j]) %>% select(Site_rp_s6,
                                                                                                                                                               Business_area_rp_s6,
                                                                                                                                                               Process_rp_s6,
                                                                                                                                                               Priority_rating_rp_s6,
                                                                                                                                                               Team_name_rp_s6,
                                                                                                                                                               Line_number_s6,
                                                                                                                                                               Area_impacted_rp,
                                                                                                                                                               location_impacted_rp,
                                                                                                                                                               fte_impacted_rp,
                                                                                                                                                               issue_rp,
                                                                                                                                                               site_rp_actions_s6
                                                                                                                                                               
                                                                                                                                                               # changed_rp_step6,
                                                                                                                                                               # add_flag_rp_step6,
                                                                                                                                                               # amend_flag_rp_step6,
                                                                                                                                                               # is_current_s6
                                                                                ) %>% tableHTML(rownames=FALSE, spacing = '2px') %>%
                                                                                  add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:19)) %>%
                                                                                  add_css_row(css = list(c('text-align','padding'), c('center','20px')))
                                                                         ),
                                                                         "<b>Webchat:</b> No details added <br>")
                                                                       ,
                                                                       "<br>",
                                                                       ifelse(
                                                                         nrow(subset(subset(rp_data_final,rp_data_final$Date_time==datestamp$dtstamp[j]),Site_rp_s7 != ''))>0,
                                                                         paste0("<b>Webchat: </b>Below are the details added by Resource and Planning team for social <br><br>",
                                                                                subset(rp_data_final,rp_data_final$Date_time==datestamp$dtstamp[j]) %>% select(  Site_rp_s7,
                                                                                                                                                                 Business_area_rp_s7,
                                                                                                                                                                 Process_rp_s7,
                                                                                                                                                                 Priority_rating_rp_s7,
                                                                                                                                                                 Team_name_rp_s7,
                                                                                                                                                                 Line_number_s7,
                                                                                                                                                                 Area_impacted_rp1,
                                                                                                                                                                 location_impacted_rp1,
                                                                                                                                                                 fte_impacted_rp1,
                                                                                                                                                                 issue_rp1,
                                                                                                                                                                 site_rp_actions_s7
                                                                                                                                                                 
                                                                                                                                                                 # changed_rp_step7,
                                                                                                                                                                 # add_flag_rp_step7,
                                                                                                                                                                 # amend_flag_rp_step7,
                                                                                ) %>% tableHTML(caption= "Below are the details for Social",rownames=FALSE, spacing = '2px') %>%
                                                                                  add_css_header(css = list(c('text-align','padding'), c('center','20px')),headers=c(1:19)) %>%
                                                                                  add_css_row(css = list(c('text-align','padding'), c('center','20px')))
                                                                         ),
                                                                         
                                                                         "<b>Social:</b> No details added <br>")
                                                                     ),
                                                                     
                                                                     
                                                                     tableHTML(crt_data_final[i,])
                                                              ) 
                                                              
                                                       )          
                                                       
                                                       
                                                ) 
                                         )
                                  )
                           )
                  ) 
                  ,'
               </div>

               <div class = "timeline-footer">
                 <a class = "btn btn-primary btn-xs">',subset(final_data1,final_data1$Date_time==datestamp$dtstamp[j])[1,]$User,'</a>
               </div>
             </div>')
        
        
        j=j+1
        b<-paste0(b,b1)
      }
      
      
      c<-paste0('</li>')
      
      string1<-paste0(a,b,c)
      
      
      
      full_string<-paste0(full_string,string1)      
      i=i+1
      
      
      
    }
    
    
    if (is.na(closed_data[1,]$Status)) {
      full_string<-full_string
    }
    
    else if (closed_data[1,]$Status == "Closed") {
      closed_inc_item<-paste0('
      <li class = "time-label">
             <span class = "bg-red"> ',as.Date(substr(closed_data$Closed_dttm[1],1,8),format="%Y%m%d"),' </span>
           </li>
           
      <li>
      <i class = "fa fa-envelope bg-red"></i>
             <div class = "timeline-item">
               <span class = "time">
                 <i class = "fa fa-clock-o"></i>
                ',as.ITime(substr(closed_data$Closed_dttm[1],10,15),format="%H%M%S"),'
               </span>
               
               <h3 class = "timeline-header">
                 <a href = "#"> ','Incident has been closed', ' </a>
                 
               </h3>


               <div class = "timeline-footer">
                 <a class = "btn btn-primary btn-xs">',closed_data$Closed_by[1],'</a>
               </div>
             </div>
      </li>')
      
      full_string<-paste0(full_string,closed_inc_item)
    }
    else {
      full_string<-full_string
    }
    
    end_time_line<-paste0('
                          <li>
                    <i class="fa fa-clock-o bg-gray"></i>
                  </li>
                ')
    
    full_string<-paste0(full_string,end_time_line)
    
    
    fluidPage(
      HTML(paste0(
        '
            <div class="tab-pane" id="timeline"  >

            <ul class="timeline timeline-inverse">

           ',unlist(full_string),'</ul> </div>'))
    )
    
    
    
    
    
  } )
  
  
  
  
  
  
  
  
  

  ######################### Close Incidents ######################
  #incident dropdown 
  observeEvent(input$Refresh_btn_close,{
    updateSelectInput(session,inputId = "close_inc1",label="Enter incident number:",
                      choices=c("",unique(crt_data$Data$INC)),selected="")
  })
  
  output$infoBox1 <- renderInfoBox({
    req(input$close_inc1)
    All_data_mod<-loadData_crt_site()
    All_data_mod<-sqldf(paste0("select 
                               * from All_data_mod where INC = '",input$close_inc1,"'","and Is_current=1"))
    if (is.na(All_data_mod$Status) )   
    {infoBox(title="Status",value='Open',color = 'green',icon = icon("lock-open"))}
    else
    {infoBox(title="Status",value = 'Closed', color = 'red',icon = icon("lock"))}
    
    #if (is.na(All_data_mod$Status) )  {shinyjs::enable("close_inc_btn")} else {shinyjs::disable("close_inc_btn")}
  })
  
  #disable close button
  observeEvent(input$close_inc1,{
    req(input$close_inc1)
    All_data_mod<-loadData_crt_site()
    All_data_mod<-sqldf(paste0("select 
                               * from All_data_mod where INC = '",input$close_inc1,"'","and Is_current=1"))
    if (is.na(All_data_mod$Status) )  {shinyjs::enable("close_inc_btn")} else {shinyjs::disable("close_inc_btn")}
  })
  
  output$close_inc_det_crt<-DT::renderDataTable({
    req(input$close_inc1)
    All_data_mod<-loadData_crt_site()
    All_data_mod<-sqldf(paste0("select Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Facilities,Vulnerable_customers
                                from All_data_mod where INC = '",input$close_inc1,"'","and Is_current=1"))
    #Site,Business_area,Process,Description,Teams,People,Customer_contact,Systems,Facilities,Vulnerable_customers
    datatable(All_data_mod,options = list(dom = 't',scrollX=TRUE,columnDefs = list(list(className = 'dt-center', targets = "_all"))),rownames = FALSE,caption=htmltools::tags$caption("Customer Response Team", style="font-family: 'BG Flame';font-weight: bold;font-size: 18px;"),
              escape=F)}
  )
  
  output$close_inc_det_sit_rep<-DT::renderDataTable({
    req(input$close_inc1)
    All_data_mod<-loadData_site_rep()
    All_data_mod<-sqldf(paste0("select Line_number,Chairperson,Date,Time,Site,Owner,Action,Status,Updates2 as Action_Update
                                     from All_data_mod where INC_sit_rep = '",input$close_inc1,"'","and Is_current=1"))
    #Chairperson,Date,Time,Summary,Updates,Site,Owner,Action,Status,Updates2,Line_number
    datatable(All_data_mod,options = list(dom = 't',scrollX=TRUE,columnDefs = list(list(className = 'dt-center', targets = "_all"))),rownames = FALSE,caption=htmltools::tags$caption("Situation Report", style="font-family: 'BG Flame';font-weight: bold;font-size: 18px;"),
              escape=F)}
  )
  
  output$close_inc_det_imt<-DT::renderDataTable({
    req(input$close_inc1)
    All_data_mod<-loadData_site_imt()
    All_data_mod<-sqldf(paste0("select Site,Who_is_impacted,Estimated_volume_of_users_impacted,Root_cause,Timescales_for_recovery,IMT,Comms,Site_continuity,Description
                               from All_data_mod where INC = '",input$close_inc1,"'","and Is_current_imt=1"))
    #Site,Who_is_impacted,Estimated_volume_of_users_impacted,Root_cause,Timescales_for_recovery,IMT,Comms,Site_continuity,Description 
    datatable(All_data_mod,options = list(dom = 't',scrollX=TRUE,columnDefs = list(list(className = 'dt-center', targets = "_all"))),rownames = FALSE,caption=htmltools::tags$caption("Incident Management Team",style="font-family: 'BG Flame';font-weight: bold;font-size: 18px;"),
              escape=F)}
  )
  
  output$close_inc_det_nr<-DT::renderDataTable({
    req(input$close_inc1)
    All_data_mod<-loadData_site_nr()
    All_data_mod<-sqldf(paste0("select Site,Action_required,Sungard_required,Sungard_available,Sungard_accessible,Escalation_required,Escalated_to,Comments
                          from All_data_mod where INC = '",input$close_inc1,"'","and Is_current_nr=1"))
    #Site,Action_required,Sungard_required,Sungard_available,Sungard_accessible,Escalation_required,Escalated_to,Comments 
    datatable(All_data_mod,options = list(dom = 't',scrollX=TRUE,columnDefs = list(list(className = 'dt-center', targets = "_all"))),rownames = FALSE,caption=htmltools::tags$caption("National Resilience Team",style="font-family: 'BG Flame';font-weight: bold;font-size: 18px;"),
              escape=F)}
  )
  
  output$close_inc_det_rp_step4<-DT::renderDataTable({
    req(input$close_inc1)
    All_data_mod<-loadData_site_rp_step4()
    All_data_mod<-sqldf(paste0("select Site_rp_s4 as Site, Business_area_rp_s4 as Business_Area, Process_rp_s4 as Process, Priority_rating_rp_s4 as Priority_rating, 
    Team_name_rp_s4 as Team_name, ivr_messaging_rp as IVR_messaging, ivr_msg_details as IVR_messaging_details, online_messaging_rp as Online_messaging,
    online_msg_details as Online_messaging_details, social_media_rp as Social_media
                          from All_data_mod where INC_rp = '",input$close_inc1,"'","and Is_current=1"))
    
   
    datatable(All_data_mod,options = list(dom = 't',scrollX=TRUE,columnDefs = list(list(className = 'dt-center', targets = "_all"))),rownames = FALSE,caption=htmltools::tags$caption("Messaging Details",style="font-family: 'BG Flame';font-weight: bold;font-size: 18px;"),
              escape=F)}
  )
  
  output$close_inc_det_rp_step5<-DT::renderDataTable({
    req(input$close_inc1)
    All_data_mod<-loadData_site_rp_step5()
    All_data_mod<-sqldf(paste0("select Site_rp_s5 as Site, Business_area_rp_s5 as Business_Area, Process_rp_s5 as Process, Priority_rating_rp_s5 as Priority_rating, 
    Team_name_rp_s5 as Team_name, line_closure_rp as Line_closure, lines_closed_rp as Lines_closed, calls_diverted_from_rp as Calls_diverted_from,
    calls_diverted_to_rp as Calls_diverted_to
                          from All_data_mod where INC_rp = '",input$close_inc1,"'","and Is_current=1"))
    
   
    datatable(All_data_mod,options = list(dom = 't',scrollX=TRUE,columnDefs = list(list(className = 'dt-center', targets = "_all"))),rownames = FALSE,caption=htmltools::tags$caption("Telephony Details",style="font-family: 'BG Flame';font-weight: bold;font-size: 18px;"),
              escape=F)}
  )
  
  output$close_inc_det_rp_step6<-DT::renderDataTable({
    req(input$close_inc1)
    All_data_mod<-loadData_site_rp_step6()
    All_data_mod<-sqldf(paste0("select Site_rp_s6 as Site, Business_area_rp_s6 as Business_Area, Process_rp_s6 as Process, Priority_rating_rp_s6 as Priority_rating, 
    Team_name_rp_s6 as Team_name, Area_impacted_rp as Area_impacted, location_impacted_rp as Locations_impacted, fte_impacted_rp as FTE_impacted,
    issue_rp as Issues
                          from All_data_mod where INC_rp = '",input$close_inc1,"'","and Is_current=1"))
    
   
    datatable(All_data_mod,options = list(dom = 't',scrollX=TRUE,columnDefs = list(list(className = 'dt-center', targets = "_all"))),rownames = FALSE,caption=htmltools::tags$caption("Webchat Details",style="font-family: 'BG Flame';font-weight: bold;font-size: 18px;"),
              escape=F)}
  )
  
  output$close_inc_det_rp_step7<-DT::renderDataTable({
    req(input$close_inc1)
    All_data_mod<-loadData_site_rp_step7()
    All_data_mod<-sqldf(paste0("select Site_rp_s7 as Site, Business_area_rp_s7 as Business_Area, Process_rp_s7 as Process, Priority_rating_rp_s7 as Priority_rating, 
    Team_name_rp_s7 as Team_name, Area_impacted_rp1 as Area_impacted, location_impacted_rp1 as Locations_impacted, fte_impacted_rp1 as FTE_impacted,
    issue_rp1 as Issues
                          from All_data_mod where INC_rp = '",input$close_inc1,"'","and Is_current=1"))
    
   
    datatable(All_data_mod,options = list(dom = 't',scrollX=TRUE,columnDefs = list(list(className = 'dt-center', targets = "_all"))),rownames = FALSE,caption=htmltools::tags$caption("Social Media Details",style="font-family: 'BG Flame';font-weight: bold;font-size: 18px;"),
              escape=F)}
  )
  
  #close incidents button
  observeEvent(input$close_inc_btn,{
    All_data_mod_crt<-loadData_crt_site()
    All_data_mod_crt<-sqldf(paste0("select * from All_data_mod_crt 
                                     where INC = '",input$close_inc1,"'","and Is_current=1"))
    
    if (nrow(All_data_mod_crt)>0) {
      All_data_mod_crt$Status<-"Closed"
      All_data_mod_crt$Closed_by<-session_user$Data
      All_data_mod_crt$Closed_dttm<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      for (i in 1:nrow(All_data_mod_crt)){
        write_csv(All_data_mod_crt[i,], path = paste0("Data_crt_site/Mydata_site_",All_data_mod_crt[i,c('Date_time')] , ".csv"))
      }
    }
    
    All_data_mod_crt_ops<-loadData_crt_ops()
    All_data_mod_crt_ops<-sqldf(paste0("select * from All_data_mod_crt_ops 
                                     where INC = '",input$close_inc1,"'","and Is_current=1"))
    
    if (nrow(All_data_mod_crt_ops)>0) {
      All_data_mod_crt_ops$Status<-"Closed"
      All_data_mod_crt_ops$Closed_by<-session_user$Data
      All_data_mod_crt_ops$Closed_dttm<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      for (i in 1:nrow(All_data_mod_crt_ops)){
        write_csv(All_data_mod_crt_ops[i,], path = paste0("Data_crt_ops/Mydata_ops_",All_data_mod_crt_ops[i,c('Date_time')] , ".csv"))
      }
    }
    
    All_data_mod_crt_comms<-loadData_crt_comms()
    All_data_mod_crt_comms<-sqldf(paste0("select * from All_data_mod_crt_comms 
                                     where INC = '",input$close_inc1,"'","and Is_current=1"))
    
    if (nrow(All_data_mod_crt_comms)>0) {
      All_data_mod_crt_comms$Status<-"Closed"
      All_data_mod_crt_comms$Closed_by<-session_user$Data
      All_data_mod_crt_comms$Closed_dttm<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      for (i in 1:nrow(All_data_mod_crt_comms)){
        write_csv(All_data_mod_crt_comms[i,], path = paste0("Data_crt_comms/Mydata_comms_",All_data_mod_crt_comms[i,c('Date_time')] , ".csv"))
      }
    }
    
    All_data_mod_sit_rep<-loadData_site_rep()
    All_data_mod_sit_rep<-sqldf(paste0("select * from All_data_mod_sit_rep 
                                     where INC_sit_rep = '",input$close_inc1,"'","and Is_current=1"))
    if (nrow(All_data_mod_sit_rep)>0) {
      All_data_mod_sit_rep$Status<-"Closed"
      All_data_mod_sit_rep$Closed_by<-session_user$Data
      All_data_mod_sit_rep$Closed_dttm<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      for (i in 1:nrow(All_data_mod_sit_rep)){
        write_csv(All_data_mod_sit_rep[i,], path = paste0("Data_sit_rep/Sit_rep_Mydata",All_data_mod_sit_rep[i,c('Date_time_si')] , ".csv"))
      }
    }
    
    All_data_mod_imt<-loadData_site_imt()
    All_data_mod_imt<-sqldf(paste0("select *
                               from All_data_mod_imt where INC = '",input$close_inc1,"'","and Is_current_imt=1"))
    if (nrow(All_data_mod_imt)>0) {
      All_data_mod_imt$Status<-"Closed"
      All_data_mod_imt$Closed_by<-session_user$Data
      All_data_mod_imt$Closed_dttm<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      for (i in 1:nrow(All_data_mod_imt)){
        write_csv(All_data_mod_imt[i,], path = paste0("Data_site_IMT/IMT_Mydata",All_data_mod_imt[i,c('Date_time_imt')] , ".csv"))
      }
    }

    All_data_mod_nr<-loadData_site_nr()
    All_data_mod_nr<-sqldf(paste0("select *
                          from All_data_mod_nr where INC = '",input$close_inc1,"'","and Is_current_nr=1"))
   
    if (nrow(All_data_mod_nr)>0) {
      All_data_mod_nr$Status<-"Closed"
      All_data_mod_nr$Closed_by<-session_user$Data
      All_data_mod_nr$Closed_dttm<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      for (i in 1:nrow(All_data_mod_nr)){
        write_csv(All_data_mod_nr[i,], path = paste0("Data_site_NR/NR_Mydata",All_data_mod_nr[i,c('Date_time_nr')] , ".csv"))
      }
    }
    
    
    
    All_data_mod_rp_4<-loadData_site_rp_step4()
    All_data_mod_rp_4<-sqldf(paste0("select *
                          from All_data_mod_rp_4 where INC_rp = '",input$close_inc1,"'","and is_current=1"))
    
    if (nrow(All_data_mod_rp_4)>0) {
      All_data_mod_rp_4$Status<-"Closed"
      All_data_mod_rp_4$Closed_by<-session_user$Data
      All_data_mod_rp_4$Closed_dttm<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      for (i in 1:nrow(All_data_mod_rp_4)){
        write_csv(All_data_mod_rp_4[i,], path = paste0("Data_site_RP_step4/RP_step4_Mydata",All_data_mod_rp_4[i,c('Date_time_step4')] , ".csv"))
      }
    }
    
    
    All_data_mod_rp_5<-loadData_site_rp_step5()
    All_data_mod_rp_5<-sqldf(paste0("select *
                          from All_data_mod_rp_5 where INC_rp = '",input$close_inc1,"'","and is_current=1"))
    
    if (nrow(All_data_mod_rp_5)>0) {
      All_data_mod_rp_5$Status<-"Closed"
      All_data_mod_rp_5$Closed_by<-session_user$Data
      All_data_mod_rp_5$Closed_dttm<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      for (i in 1:nrow(All_data_mod_rp_5)){
        write_csv(All_data_mod_rp_5[i,], path = paste0("Data_site_RP_step5/RP_step5_Mydata",All_data_mod_rp_5[i,c('Date_time_step5')] , ".csv"))
      }
    }
    
    All_data_mod_rp_6<-loadData_site_rp_step6()
    All_data_mod_rp_6<-sqldf(paste0("select *
                          from All_data_mod_rp_6 where INC_rp = '",input$close_inc1,"'","and is_current=1"))
   
    if (nrow(All_data_mod_rp_6)>0) {
      All_data_mod_rp_6$Status<-"Closed"
      All_data_mod_rp_6$Closed_by<-session_user$Data
      All_data_mod_rp_6$Closed_dttm<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      for (i in 1:nrow(All_data_mod_rp_6)){
        write_csv(All_data_mod_rp_6[i,], path = paste0("Data_site_RP_step6/RP_step6_Mydata",All_data_mod_rp_6[i,c('Date_time_step6')] , ".csv"))
      }
    }
    
    All_data_mod_rp_7<-loadData_site_rp_step7()
    All_data_mod_rp_7<-sqldf(paste0("select *
                          from All_data_mod_rp_7 where INC_rp = '",input$close_inc1,"'","and is_current=1"))

    if (nrow(All_data_mod_rp_7)>0) {
      All_data_mod_rp_7$Status<-"Closed"
      All_data_mod_rp_7$Closed_by<-session_user$Data
      All_data_mod_rp_7$Closed_dttm<-format(Sys.time(), "%Y%m%d-%H%M%OS")
      for (i in 1:nrow(All_data_mod_rp_7)){
        write_csv(All_data_mod_rp_7[i,], path = paste0("Data_site_RP_step7/RP_step7_Mydata",All_data_mod_rp_7[i,c('Date_time_step7')] , ".csv"))
      }
    }
    
    updateSelectInput(session,inputId = "close_inc1",label="Enter incident number:",
                      choices=c("",unique(crt_data$Data$INC)),selected="")
    sendSweetAlert(
      session = session,
      title = "Success !!",
      text = paste("Incident Closed"),
      type = "success"
    )
    
    #Send email 
    sender <- "zz_sm6496@centrica.com" # Replace with a valid address
    recipients <- session_user$Data # Replace with one or more valid addresses
    
    # Convert the data frame into an HTML Table
    #y <- htmlTable(All_data_mod_crt, rnames = FALSE)
    
    crt_info_close <- loadData_crt_site()
    crt_info_close<-sqldf(paste0("select * from crt_info_close where INC = '",input$close_inc1,"'"))
    
    crt_add_open_tm<-min(crt_info_close$Date_time)
    
    
    crt_info_close<-sqldf(paste0("select * from crt_info_close where INC = '",input$close_inc1,"' and is_current==",1))
    # Define body of email
    html_body <- paste0('<html><head>
                        <style>
                        body{font-family:BG Flame, sans-serif;}
                        table{border-left:0.1px solid #000000;border-top:0.1px solid #000000;width: 1000px;}
                        table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:bold; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:13px; font-weight:normal; margin: 0px; padding-left: 5px; padding-right: 5px; margin: 0px;}
                        img {width: 1000px;}
                        </style>
                        </head><body><table>
                         
                        <tr><td><img src=\"https://azsu-p-app-026.azure.uk.centricaplc.com:3939/content/230/_w_13f9edc3/Close.jpg\"></td></tr>',
                        "<tr><td><br>

                         <b>INC: </b>",paste0(unique(crt_info_close$INC),collapse="|"),"<br><br>
                         <b>Site impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_close$Site,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Business area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_close$Business_area,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Process area impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_close$Process,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Teams impacted: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_close$Teams,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                         <b>Incident Description: </b>",paste0(unique(as.list(unlist(strsplit(paste0(crt_info_close$Description,collapse = '-'),'-')))) ,collapse=' | '),"<br><br>
                        
                         <b>Incident open date: </b>",as.Date(substr(crt_add_open_tm[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(crt_add_open_tm[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last updated date: </b>",as.Date(substr(All_data_mod_crt$Closed_dttm[1],1,8),format="%Y%m%d") ," ",as.ITime(substr(All_data_mod_crt$Closed_dttm[1],10,15),format="%H%M%S") ,"<br><br>
                         <b>Last user to update BCP: </b>",paste0(All_data_mod_crt$Closed_by[1],collapse="-"),"<br><br>
                     
                        </td></tr></table></body></html>

                       "
                        
    )
    
    
    
    email_closed_inc <- send.mail(from = sender,
                                  to = recipients,
                                  subject=paste0("Incident ",All_data_mod_crt$INC[1]," | Closed | ",session_user$Data),
                                  body = html_body,
                                  smtp = list(host.name = "smtp.uk.centricaplc.com", port = 25),
                                  authenticate = FALSE,
                                  #inline=TRUE,
                                  html = TRUE,
                                  send = FALSE)
    email_closed_inc$send()
    
    
    crt_data$Data<-loadData_crt_site()
    crt_data_ops$Data<-loadData_crt_ops()
    crt_data_comms$Data<-loadData_crt_comms()
    sit_reps_data$Data<-loadData_site_rep()
    imt_data$Data<-loadData_site_imt()
    nr_data$Data<-loadData_site_nr()
    
    rp_data_step4$Data<-loadData_site_rp_step4()
    rp_data_step5$Data<-loadData_site_rp_step5()
    rp_data_step6$Data<-loadData_site_rp_step6()
    rp_data_step7$Data<-loadData_site_rp_step7()
    
    
    
  })
 
  ################################## Summary Page ###############
  
  crt_data<-reactiveValues()
  crt_data_ops<-reactiveValues()
  crt_data_comms<-reactiveValues()
  sit_reps_data<-reactiveValues()
  imt_data<-reactiveValues()
  nr_data<-reactiveValues()
  rp_data_step4<-reactiveValues()
  rp_data_step5<-reactiveValues()
  rp_data_step6<-reactiveValues()
  rp_data_step7<-reactiveValues()
  final_data_summary<-reactiveValues()
  
  crt_data$Data<-loadData_crt_site()
  crt_data_ops$Data<-loadData_crt_ops()
  crt_data_comms$Data<-loadData_crt_comms()
  sit_reps_data$Data<-loadData_site_rep()
  imt_data$Data<-loadData_site_imt()
  nr_data$Data<-loadData_site_nr()
  rp_data_step4$Data<-loadData_site_rp_step4()
  rp_data_step5$Data<-loadData_site_rp_step5()
  rp_data_step6$Data<-loadData_site_rp_step6()
  rp_data_step7$Data<-loadData_site_rp_step7()
 
  
  
  ####hard refresh summary #######
  observeEvent(input$Refresh_btn_summary,{
   
    
    crt_data1<-crt_data$Data
    crt_data_ops1<-crt_data_ops$Data
    crt_data_comms1<-crt_data_comms$Data
    sit_reps_data1<-sit_reps_data$Data
    imt_data1<-imt_data$Data
    nr_data1<-nr_data$Data
    rp_data1_step4<-rp_data_step4$Data
    rp_data1_step5<-rp_data_step5$Data
    rp_data1_step6<-rp_data_step6$Data
    rp_data1_step7<-rp_data_step7$Data
    
    
    # crt_data1<-loadData_crt_site()
    # crt_data_ops1<-crt_data_ops$Data
    # crt_data_comms1<-crt_data_comms$Data
    # sit_reps_data1<-sit_reps_data$Data
    # imt_data1<-imt_data$Data
    # nr_data1<-nr_data$Data
    
    
    rp_data1_step4<-loadData_site_rp_step4()
    # rp_data1_step5<-loadData_site_rp_step5()
    # rp_data1_step6<-loadData_site_rp_step6()
    # rp_data1_step7<-loadData_site_rp_step7()

    test_crt_last_up<-sqldf("select INC, Date_time as date_time_raw, substr(Date_time,1,8) as Date_time, User,Status,Closed_dttm from crt_data1 where length(Date_time)>1 and Is_current=1")
    test_crt_last_update<-sqldf("select * , 'CRT' as Team from test_crt_last_up")

    crt_ops_last_up<-sqldf("select INC, Date_time as date_time_raw, substr(Date_time,1,8) as Date_time, User,Status,Closed_dttm  from crt_data_ops1 where length(Date_time)>1 and Is_current=1")
    crt_ops_last_update<-sqldf("select * , 'CRT' as Team from crt_ops_last_up")


    crt_comms_last_up<-sqldf("select INC, Date_time as date_time_raw, substr(Date_time,1,8) as Date_time, User,Status,Closed_dttm from crt_data_comms1 where length(Date_time)>1 and Is_current=1")
    crt_comms_last_update<-sqldf("select * , 'CRT' as Team from crt_comms_last_up")


    test_sit_rep_last_up<-sqldf("select INC_sit_rep as INC, Date_time_si as date_time_raw, substr(Date_time_si,1,8) as Date_time, User,Status,Closed_dttm from sit_reps_data1 where length(Date_time_si)>1 and is_current=1")
    test_sit_rep_last_update<-sqldf("select * , 'Sit Rep' as Team from test_sit_rep_last_up")

    test_imt_last_up<-sqldf("select INC as INC, Date_time_imt as date_time_raw, substr(Date_time_imt,1,8) as Date_time, User,Status,Closed_dttm  from imt_data1 where length(Date_time_imt)>1 and Is_current_imt=1")
    test_imt_last_update<-sqldf("select * , 'IMT' as Team from test_imt_last_up")

    test_nr_last_up<-sqldf("select INC as INC, Date_time_nr as date_time_raw, substr(Date_time_nr,1,8) as Date_time, User,Status,Closed_dttm  from nr_data1 where length(Date_time_nr)>1 and Is_current_nr=1")
    test_nr_last_update<-sqldf("select * , 'NR' as Team from test_nr_last_up")

    test_rp_s4_last_up<-sqldf("select INC_rp as INC,Date_time_step4 as date_time_raw, substr(Date_time_step4,1,8) as Date_time, User,Status,Closed_dttm  from rp_data1_step4 where length(Date_time_step4)>1")
    test_rp_s4_last_update<-sqldf("select * , 'RP' as Team from test_rp_s4_last_up")
    
    
    test_rp_s5_last_up<-sqldf("select INC_rp as INC,Date_time_step5 as date_time_raw, substr(Date_time_step5,1,8) as Date_time, User,Status,Closed_dttm  from rp_data1_step5 where length(Date_time_step5)>1")
    test_rp_s5_last_update<-sqldf("select * , 'RP' as Team from test_rp_s5_last_up")
    
    test_rp_s6_last_up<-sqldf("select INC_rp as INC,Date_time_step6 as date_time_raw, substr(Date_time_step6,1,8) as Date_time, User,Status,Closed_dttm  from rp_data1_step6 where length(Date_time_step6)>1")
    test_rp_s6_last_update<-sqldf("select * , 'RP' as Team from test_rp_s6_last_up")
    
    test_rp_s7_last_up<-sqldf("select INC_rp as INC,Date_time_step7 as date_time_raw, substr(Date_time_step7,1,8) as Date_time, User,Status,Closed_dttm  from rp_data1_step7 where length(Date_time_step7)>1")
    test_rp_s7_last_update<-sqldf("select * , 'RP' as Team from test_rp_s7_last_up")
    
    
    All_data<- rbind.data.frame( test_crt_last_update,crt_ops_last_update,crt_comms_last_update,test_sit_rep_last_update,test_imt_last_update,test_nr_last_update,
                                 test_rp_s4_last_update,test_rp_s5_last_update,test_rp_s6_last_update,test_rp_s7_last_update )
    final_data_summary$Data<-All_data

    #all inc count
    count_total<-sqldf("select count(distinct INC) as x from crt_data1")
    final_data_summary$count_total<-count_total$x

    #closed inc count
    count_closed<-sqldf("select count(distinct INC) as x from crt_data1 where Status=='Closed'")
    final_data_summary$count_closed<-count_closed$x

    #open inc count
    final_data_summary$count_open<-count_total-count_closed

    #most impacted site
    most_impacted_site_df<-sqldf("select Site, count(distinct INC) as cnt from crt_data1 group by Site order by cnt desc limit 1")
    final_data_summary$most_impacted_site<-paste0(most_impacted_site_df$Site," (",most_impacted_site_df$cnt,") ")

    #last updated INC
    last_updated_temp_INC<-sqldf("select INC, Date_time from All_data order by date_time_raw desc limit 1")
    last_updated_temp_INC<-sqldf("select INC as x from last_updated_temp_INC")
    final_data_summary$last_updated_temp_INC<-last_updated_temp_INC$x

    #last updated team
    last_updated_team<-sqldf("select Team, Date_time from All_data order by date_time_raw desc limit 1")
    last_updated_team<-sqldf("select Team as x from last_updated_team")
    final_data_summary$last_updated_team<-last_updated_team$x

    #last updated user
    last_updated_temp_user<-sqldf("select User, Date_time from All_data order by date_time_raw desc limit 1")
    last_updated_temp_user<-sqldf("select User from last_updated_temp_user ")
    prefix<- sub("@.*", " ", last_updated_temp_user)
    first_name<- sub("\\..*", "", prefix)
    last_name<- sub(".*\\.", "", prefix)
    first_name<- paste(toupper(substr(first_name, 1, 1)), substr(first_name, 2, nchar(first_name)), sep="")
    last_name<- paste(toupper(substr(last_name, 1, 1)), substr(last_name, 2, nchar(last_name)), sep="")
    last_updated_temp_user<- paste(first_name, last_name, sep = " ", collapse = NULL)
    final_data_summary$last_updated_temp_user<-last_updated_temp_user


    #last updated date
    last_updated_temp_date<-sqldf("select max(date_time) from All_data")
    last_updated_temp_date<-as.character(last_updated_temp_date)
    last_updated_temp_date<- as.Date(last_updated_temp_date, format =  '%Y%m%d')
    final_data_summary$last_updated_temp_date<-last_updated_temp_date

    #latest incident details
    latest_INC_test<- sqldf("select INC, Team, Status, Date_time, User, min(Date_time) as Start_date, Closed_dttm from All_data group by INC order by date_time_raw desc limit 10")
    latest_INC_test$Start_date<-as.Date(latest_INC_test$Start_date,"%Y%m%d")
    latest_INC_test$End_date<-ifelse(is.na(latest_INC_test$Closed_dttm),format(Sys.Date(),"%Y%m%d"),substr(latest_INC_test$Closed_dttm,1,8))
    latest_INC_test$End_date<-as.Date(latest_INC_test$End_date,"%Y%m%d")
    latest_INC_test$Days<-difftime(latest_INC_test$End_date,latest_INC_test$Start_date,  units = "days")+1
    latest_INC_test$Status <- as.character(latest_INC_test$Status)
    latest_INC_test$Status[is.na(latest_INC_test$Status)] <- "Open"
    final_data_summary$latest_INC_test<-as.data.frame(latest_INC_test)

    #open/close/all inc view
    All_data_view<-sqldf(paste0("select INC,Site,Business_area,Process,Status,substr(Closed_dttm,1,8) as Closed_dttm,Closed_by from crt_data1 where Is_current=1"))
    All_data_view<-All_data_view %>%
      group_by(INC) %>%
      mutate(Site = paste0(Site, collapse = "-"),Business_area = paste0(Business_area, collapse = "-"), Process=paste0(Process, collapse = "-"),Status,Closed_dttm,Closed_by)  %>%
      select(INC,Site,Business_area,Process,Status,Closed_dttm,Closed_by)  %>%
      unique()
    final_data_summary$All_data_view<-All_data_view

   

   
   updateSelectInput(session, inputId="open_or_closed_inc", selected = 'Open')
   updateSelectInput(session, inputId="open_or_closed_inc", selected = 'All')
  })
  
  
  
  
  
  
  
  #total incidents
  output$Incidents_count <- renderText({
   

    crt_data1<-crt_data$Data
    crt_data_ops1<-crt_data_ops$Data
    crt_data_comms1<-crt_data_comms$Data
    sit_reps_data1<-sit_reps_data$Data
    imt_data1<-imt_data$Data
    nr_data1<-nr_data$Data
    rp_data1_step4<-rp_data_step4$Data
    rp_data1_step5<-rp_data_step5$Data
    rp_data1_step6<-rp_data_step6$Data
    rp_data1_step7<-rp_data_step7$Data


    test_crt_last_up<-sqldf("select INC, Date_time as date_time_raw, substr(Date_time,1,8) as Date_time, User,Status,Closed_dttm from crt_data1 where length(Date_time)>1 and Is_current=1")
    test_crt_last_update<-sqldf("select * , 'CRT' as Team from test_crt_last_up")

    crt_ops_last_up<-sqldf("select INC, Date_time as date_time_raw, substr(Date_time,1,8) as Date_time, User,Status,Closed_dttm  from crt_data_ops1 where length(Date_time)>1 and Is_current=1")
    crt_ops_last_update<-sqldf("select * , 'CRT' as Team from crt_ops_last_up")


    crt_comms_last_up<-sqldf("select INC, Date_time as date_time_raw, substr(Date_time,1,8) as Date_time, User,Status,Closed_dttm from crt_data_comms1 where length(Date_time)>1 and Is_current=1")
    crt_comms_last_update<-sqldf("select * , 'CRT' as Team from crt_comms_last_up")


    test_sit_rep_last_up<-sqldf("select INC_sit_rep as INC, Date_time_si as date_time_raw, substr(Date_time_si,1,8) as Date_time, User,Status,Closed_dttm from sit_reps_data1 where length(Date_time_si)>1 and is_current=1")
    test_sit_rep_last_update<-sqldf("select * , 'Sit Rep' as Team from test_sit_rep_last_up")

    test_imt_last_up<-sqldf("select INC as INC, Date_time_imt as date_time_raw, substr(Date_time_imt,1,8) as Date_time, User,Status,Closed_dttm  from imt_data1 where length(Date_time_imt)>1 and Is_current_imt=1")
    test_imt_last_update<-sqldf("select * , 'IMT' as Team from test_imt_last_up")

    test_nr_last_up<-sqldf("select INC as INC, Date_time_nr as date_time_raw, substr(Date_time_nr,1,8) as Date_time, User,Status,Closed_dttm  from nr_data1 where length(Date_time_nr)>1 and Is_current_nr=1")
    test_nr_last_update<-sqldf("select * , 'NR' as Team from test_nr_last_up")

    test_rp_s4_last_up<-sqldf("select INC_rp as INC,Date_time_step4 as date_time_raw, substr(Date_time_step4,1,8) as Date_time, User,Status,Closed_dttm  from rp_data1_step4 where length(Date_time_step4)>1")
    test_rp_s4_last_update<-sqldf("select * , 'RP' as Team from test_rp_s4_last_up")
    
    
    test_rp_s5_last_up<-sqldf("select INC_rp as INC,Date_time_step5 as date_time_raw, substr(Date_time_step5,1,8) as Date_time, User,Status,Closed_dttm  from rp_data1_step5 where length(Date_time_step5)>1")
    test_rp_s5_last_update<-sqldf("select * , 'RP' as Team from test_rp_s5_last_up")
    
    test_rp_s6_last_up<-sqldf("select INC_rp as INC,Date_time_step6 as date_time_raw, substr(Date_time_step6,1,8) as Date_time, User,Status,Closed_dttm  from rp_data1_step6 where length(Date_time_step6)>1")
    test_rp_s6_last_update<-sqldf("select * , 'RP' as Team from test_rp_s6_last_up")
    
    test_rp_s7_last_up<-sqldf("select INC_rp as INC,Date_time_step7 as date_time_raw, substr(Date_time_step7,1,8) as Date_time, User,Status,Closed_dttm  from rp_data1_step7 where length(Date_time_step7)>1")
    test_rp_s7_last_update<-sqldf("select * , 'RP' as Team from test_rp_s7_last_up")
    
    
    All_data<- rbind.data.frame( test_crt_last_update,crt_ops_last_update,crt_comms_last_update,test_sit_rep_last_update,test_imt_last_update,test_nr_last_update,
                                 test_rp_s4_last_update,test_rp_s5_last_update,test_rp_s6_last_update,test_rp_s7_last_update )
    final_data_summary$Data<-All_data

    #all inc count
    count_total<-sqldf("select count(distinct INC) from crt_data1")
    final_data_summary$count_total<-count_total

    #closed inc count
    count_closed<-sqldf("select count(distinct INC) from crt_data1 where Status=='Closed'")
    final_data_summary$count_closed<-count_closed

    #open inc count
    final_data_summary$count_open<-count_total-count_closed

    #most impacted site
    most_impacted_site_df<-sqldf("select Site, count(distinct INC) as cnt from crt_data1 group by Site order by cnt desc limit 1")
    final_data_summary$most_impacted_site<-paste0(most_impacted_site_df$Site," (",most_impacted_site_df$cnt,") ")

    #last updated INC
    last_updated_temp_INC<-sqldf("select INC, Date_time from All_data order by date_time_raw desc limit 1")
    last_updated_temp_INC<-sqldf("select INC  from last_updated_temp_INC")
    final_data_summary$last_updated_temp_INC<-last_updated_temp_INC

    #last updated team
    last_updated_team<-sqldf("select Team, Date_time from All_data order by date_time_raw desc limit 1")
    last_updated_team<-sqldf("select Team  from last_updated_team")
    final_data_summary$last_updated_team<-last_updated_team

    #last updated user
    last_updated_temp_user<-sqldf("select User, Date_time from All_data order by date_time_raw desc limit 1")
    last_updated_temp_user<-sqldf("select User from last_updated_temp_user ")
    prefix<- sub("@.*", " ", last_updated_temp_user)
    first_name<- sub("\\..*", "", prefix)
    last_name<- sub(".*\\.", "", prefix)
    first_name<- paste(toupper(substr(first_name, 1, 1)), substr(first_name, 2, nchar(first_name)), sep="")
    last_name<- paste(toupper(substr(last_name, 1, 1)), substr(last_name, 2, nchar(last_name)), sep="")
    last_updated_temp_user<- paste(first_name, last_name, sep = " ", collapse = NULL)
    final_data_summary$last_updated_temp_user<-last_updated_temp_user


    #last updated date
    last_updated_temp_date<-sqldf("select max(date_time) from All_data")
    last_updated_temp_date<-as.character(last_updated_temp_date)
    last_updated_temp_date<- as.Date(last_updated_temp_date, format =  '%Y%m%d')
    final_data_summary$last_updated_temp_date<-last_updated_temp_date

    #latest incident details
    latest_INC_test<- sqldf("select INC, Team, Status, Date_time, User, min(Date_time) as Start_date, Closed_dttm from All_data group by INC order by date_time_raw desc limit 10")
    latest_INC_test$Start_date<-as.Date(latest_INC_test$Start_date,"%Y%m%d")
    latest_INC_test$End_date<-ifelse(is.na(latest_INC_test$Closed_dttm),format(Sys.Date(),"%Y%m%d"),substr(latest_INC_test$Closed_dttm,1,8))
    latest_INC_test$End_date<-as.Date(latest_INC_test$End_date,"%Y%m%d")
    latest_INC_test$Days<-difftime(latest_INC_test$End_date,latest_INC_test$Start_date,  units = "days")+1
    latest_INC_test$Status <- as.character(latest_INC_test$Status)
    latest_INC_test$Status[is.na(latest_INC_test$Status)] <- "Open"
    final_data_summary$latest_INC_test<-latest_INC_test

    #open/close/all inc view
    All_data_view<-sqldf(paste0("select INC,Site,Business_area,Process,Status,substr(Closed_dttm,1,8) as Closed_dttm,Closed_by from crt_data1 where Is_current=1"))
    All_data_view<-All_data_view %>%
      group_by(INC) %>%
      mutate(Site = paste0(Site, collapse = "-"),Business_area = paste0(Business_area, collapse = "-"), Process=paste0(Process, collapse = "-"),Status,Closed_dttm,Closed_by)  %>%
      select(INC,Site,Business_area,Process,Status,Closed_dttm,Closed_by)  %>%
      unique()
    final_data_summary$All_data_view<-All_data_view



    paste0(final_data_summary$count_total)
  })

  #open incidents
  output$open_incidents <- renderText({
    paste0(final_data_summary$count_open)
  })

  #closed incidents
  output$closed_incidents <- renderText({
    paste0(final_data_summary$count_closed)
  })

  #most impacted site
  output$most_impacted_site <- renderText({
    paste0(final_data_summary$most_impacted_site)
  })

  ###Summary last updates####
  
  #last updated incident number
  output$last_updated_temp_INC <- renderText({
    paste0(final_data_summary$last_updated_temp_INC)
  })
  
  #last updated Team
  output$last_updated_team <- renderText({
    paste0(final_data_summary$last_updated_team)
  })
  
  #Last user who updated
  output$last_updated_temp_user <- renderText({
    paste0(final_data_summary$last_updated_temp_user)
  })
  
  #last updated date
  output$last_updated_dates <- renderText({
    paste0(final_data_summary$last_updated_temp_date)
  })
  

  
  
  



  # #involvementtest
  updateProgressBar(session = session, id = "crt_invol", value = length(unique(loadData_crt_site()$INC))*100/length(unique(loadData_crt_site()$INC)))
  updateProgressBar(session = session, id = "sit_rep_invol", value = length(unique(loadData_site_rep()$INC))*100/length(unique(loadData_crt_site()$INC)))
  updateProgressBar(session = session, id = "site_invol", value = count_imt_involvement()*100/length(unique(loadData_crt_site()$INC)))
  updateProgressBar(session = session, id = "rp_invol", value = count_rp_involvement()*100/length(unique(loadData_crt_site()$INC)))
  updateProgressBar(session = session, id = "nr_invol", value = count_nr_involvement()*100/length(unique(loadData_crt_site()$INC)))


  ###summary Monthly trends ####
  output$d<-renderPlotly({
    req(input$Site_mod_inc)

    crt_data<-loadData_crt_site()
    
    if(input$Site_mod_inc== "All Sites") {
     
      crt_data<-sqldf("select distinct INC , substr(Date_time,1,8) as Date_time_crt  from crt_data where length(Date_time)>1 and is_current=1")
      crt_data<-sqldf("select INC ,min(Date_time_crt) as Date_time_crt from crt_data group by INC")
      crt_data<-sqldf("select distinct Date_time_crt, count(INC) as cnt from crt_data group by Date_time_crt")
      crt_data$Date_time_crt<-as.Date(crt_data$Date_time_crt,"%Y%m%d")
      
      crt_data=crt_data %>% mutate(text=paste("Date: ", Date_time_crt  , "\n" , "Number of incidents: ", cnt))
      
      p<-ggplot(crt_data, aes(x=Date_time_crt,y=cnt)) +
        geom_segment(aes(x=Date_time_crt,xend=Date_time_crt,y=0,yend=cnt),col="#32a8a6",size=0.5) +
        geom_point(aes(text=text),size=6,col='#32a8a6') + 
        labs(x="Dates", y="") +
        theme(
          axis.line.y=element_blank(),
          # axis.text.x=element_blank(),
          axis.text.y=element_blank(),
          axis.ticks.y=element_blank(),
          # axis.title.x=element_blank(),
          axis.title.y=element_blank(),
          legend.position="none",
          panel.background=element_blank(),
          # panel.border=element_blank(),
          panel.grid.major=element_blank(),
          panel.grid.minor=element_blank(),
          plot.background=element_blank()
        ) +
        theme(axis.line.x = element_line(color="black", size = 0.25))
      
      ggplotly(p, tooltip = "text",height=350)

      }
        
    #site-wise ggplot
    else{
      crt_data<-sqldf(paste0("select distinct INC , substr(Date_time,1,8) as Date_time_crt  from crt_data where Site= '",input$Site_mod_inc,"' and length(Date_time)>1 and is_current=1"))
      crt_data<-sqldf("select INC ,min(Date_time_crt) as Date_time_crt from crt_data group by INC")
      crt_data<-sqldf("select distinct Date_time_crt, count(INC) as cnt from crt_data group by Date_time_crt")
      crt_data$Date_time_crt<-as.Date(crt_data$Date_time_crt,"%Y%m%d")
      
      crt_data=crt_data %>% mutate(text=paste("Date: ", Date_time_crt  , "\n" , "Number of incidents: ", cnt))
      
      if(nrow(crt_data)>0){
      p<-ggplot(crt_data, aes(x=Date_time_crt,y=cnt)) +
        geom_segment(aes(x=Date_time_crt,xend=Date_time_crt,y=0,yend=cnt),col="#32a8a6",size=0.5) +
        geom_point(aes(text=text),size=6,col='#32a8a6') + 
        labs(x="Dates", y="") +
        theme(
          axis.line.y=element_blank(),
          # axis.text.x=element_blank(),
          axis.text.y=element_blank(),
          axis.ticks.y=element_blank(),
          # axis.title.x=element_blank(),
          axis.title.y=element_blank(),
          legend.position="none",
          panel.background=element_blank(),
          # panel.border=element_blank(),
          panel.grid.major=element_blank(),
          panel.grid.minor=element_blank(),
          plot.background=element_blank()
        ) +
        theme(axis.line.x = element_line(color="black", size = 0.25))
      ggplotly(p, tooltip = "text",height=350)
      
      }}
  })
  
  #site inc count with monthly graph
  output$site_inc_count <- renderText({
    crt_data<-loadData_crt_site()
    if(input$Site_mod_inc!= "All Sites") {
    crt_data<-sqldf(paste0("select distinct INC , substr(Date_time,1,8) as Date_time_crt  from crt_data where Site= '",input$Site_mod_inc,"' and length(Date_time)>1 and is_current=1"))
    crt_data<-sqldf("select count(INC) as cnt from crt_data")
   paste0(crt_data$cnt, ifelse(crt_data$cnt==1," Incident"," Incidents"))}
  })
  
  
  
  
  ##Latest Incident Details
  output$latest_inc_det<-DT::renderDataTable({
    DT= final_data_summary$latest_INC_test
   
    DT<-sqldf("select INC, Team, Status ,Days,  User  from DT ", method = "name__class")

    # DT<- datatable(DT,options = list(dom = 't',scrollX=TRUE),rownames = FALSE) %>% formatStyle(
    #   'Status',
    #   backgroundColor = styleEqual(c('Open','Closed'), c('green', 'red')), Color='white')

    DT[["Status"]]<-
      paste0('
                <div class="btn-group" role="group" aria-label="Basic example">
                <button type="button" ',ifelse(DT$Status == "Open",'class="btn btn-success btn-sm modify"id=modify_crt_','class="btn btn-danger btn-sm modify"id=modify_crt_'),1:nrow(DT),'>',DT$Status,'</button>
                </div>
                ')
    DT<-DT %>% select(Status,everything())
    DT<-sqldf("select INC, Team, Status ,Days,  User  from DT ", method = "name__class")

    datatable(DT,options = list(dom = 't',scrollX=TRUE,columnDefs = list(list(className = 'dt-center', targets = "_all"))),rownames = FALSE,
              escape=F)
    
  }
  )



  #### Summary Time Line #######
  
  
  #incident dropdown timeline
  observeEvent(input$Refresh_btn_timeline,{
    updateSelectInput(session,inputId = "inc_time",label="Enter incident number:",
                      choices=c("",unique(crt_data$Data$INC)),selected="")
  })
  
  observeEvent(input$inc_time,{
       req(input$inc_time)
    output$timeline<-renderTimevis({
      req(input$inc_time)
      
      crt_data2<-loadData_crt_site()
      crt_data_ops2<-loadData_crt_ops()
      crt_data_comms2<-loadData_crt_comms()
      sit_reps_data2<-loadData_site_rep()
      imt_data2<-loadData_site_imt()
      nr_data2<-loadData_site_nr()
      
      rp_data2_s4<-loadData_site_rp_step4()
      rp_data2_s5<-loadData_site_rp_step5()
      rp_data2_s6<-loadData_site_rp_step6()
      rp_data2_s7<-loadData_site_rp_step7()
      
      test_crt_last_up_timeline<-sqldf("select INC, Date_time as date_time_raw, substr(Date_time,1,8) as Date_time, User,Closed_dttm  from crt_data2 where length(Date_time)>1 ")
      test_crt_last_update_timeline<-sqldf("select * , 'CRT' as Team from test_crt_last_up_timeline")
      
      closed_data<-crt_data2 %>% filter(!(is.na(Closed_dttm)))
      
      test_close_last_up_timeline<-sqldf("select INC, Closed_dttm as date_time_raw, substr(Closed_dttm,1,8) as Date_time, Closed_by as User,Closed_dttm  from closed_data where length(Date_time)>1 ")
      test_close_last_up_timeline<-sqldf("select * , 'Close' as Team from test_close_last_up_timeline")
      
      test_crt_ops_last_up_timeline<-sqldf("select INC as INC, Date_time as date_time_raw, substr(Date_time,1,8) as Date_time, User,Closed_dttm  from crt_data_ops2 where length(Date_time)>1 ")
      test_crt_ops_last_update_timeline<-sqldf("select * , 'CRT' as Team from test_crt_ops_last_up_timeline")
      
      test_crt_comms_last_up_timeline<-sqldf("select INC as INC, Date_time as date_time_raw, substr(Date_time,1,8) as Date_time, User,Closed_dttm  from crt_data_comms2 where length(Date_time)>1 ")
      test_crt_comms_last_update_timeline<-sqldf("select * , 'CRT' as Team from test_crt_comms_last_up_timeline")
      
      test_sit_rep_last_up_timeline<-sqldf("select INC_sit_rep as INC, Date_time_si as date_time_raw, substr(Date_time_si,1,8) as Date_time, User,Closed_dttm  from sit_reps_data2 where length(Date_time_si)>1 ")
      test_sit_rep_last_update_timeline<-sqldf("select * , 'Sit Rep' as Team from test_sit_rep_last_up_timeline")
      
      test_imt_last_up_timeline<-sqldf("select INC as INC, Date_time_imt as date_time_raw, substr(Date_time_imt,1,8) as Date_time, User,Closed_dttm  from imt_data2 where length(Date_time_imt)>1  ")
      test_imt_last_update_timeline<-sqldf("select * , 'IMT' as Team from test_imt_last_up_timeline")
      
      test_nr_last_up_timeline<-sqldf("select INC as INC, Date_time_nr as date_time_raw, substr(Date_time_nr,1,8) as Date_time, User,Closed_dttm  from nr_data2 where length(Date_time_nr)>1 ")
      test_nr_last_update_timeline<-sqldf("select * , 'NR' as Team from test_nr_last_up_timeline")
      
      test_rp_s4_last_up_timeline<-sqldf("select INC_rp as INC, Date_time_step4 as date_time_raw, substr(Date_time_step4,1,8) as Date_time, User,Closed_dttm  from rp_data2_s4 where length(Date_time_step4)>1 ")
      test_rp_s4_last_update_timeline<-sqldf("select * , 'RP' as Team from test_rp_s4_last_up_timeline")
      
      test_rp_s5_last_up_timeline<-sqldf("select INC_rp as INC, Date_time_step5 as date_time_raw, substr(Date_time_step5,1,8) as Date_time, User,Closed_dttm  from rp_data2_s5 where length(Date_time_step5)>1 ")
      test_rp_s5_last_update_timeline<-sqldf("select * , 'RP' as Team from test_rp_s5_last_up_timeline")
      
      test_rp_s6_last_up_timeline<-sqldf("select INC_rp as INC, Date_time_step6 as date_time_raw, substr(Date_time_step6,1,8) as Date_time, User,Closed_dttm  from rp_data2_s6 where length(Date_time_step6)>1 ")
      test_rp_s6_last_update_timeline<-sqldf("select * , 'RP' as Team from test_rp_s6_last_up_timeline")
      
      test_rp_s7_last_up_timeline<-sqldf("select INC_rp as INC, Date_time_step7 as date_time_raw, substr(Date_time_step7,1,8) as Date_time, User,Closed_dttm  from rp_data2_s7 where length(Date_time_step7)>1 ")
      test_rp_s7_last_update_timeline<-sqldf("select * , 'RP' as Team from test_rp_s7_last_up_timeline")
      
      All_data_timeline<-rbind.data.frame( test_crt_last_update_timeline, test_imt_last_update_timeline,test_close_last_up_timeline, test_nr_last_update_timeline, test_sit_rep_last_update_timeline,test_crt_ops_last_update_timeline,test_crt_comms_last_update_timeline,
                                           test_rp_s4_last_update_timeline,test_rp_s5_last_update_timeline,test_rp_s6_last_update_timeline,test_rp_s7_last_update_timeline)
      
      timeline_table<-All_data_timeline
      timeline_table$Date_time<-as.Date(timeline_table$Date_time,"%Y%m%d")
      timeline_table<-unique(timeline_table)
      timeline_table<-sqldf("select * from timeline_table order by INC")
      

      
      
      timeline_table<-sqldf(paste0("select a.* from timeline_table as a where a.INC= '", input$inc_time,"'"))
      timeline_table<-sqldf("select INC, Team, Date_time as Start_date, lead(Date_time) over (partition by INC order by date_time_raw, Date_time) as End_date from timeline_table")
      timeline_table<-unique(timeline_table)
      df<-timeline_table
      df$End_date[nrow(df)] = Sys.Date()
      i<-1
      j<-1
      z<-dim(df)[1]
      while(i < z)
      {
        if(df$Team[j+1]== df$Team[j])
        {
          df$End_date[j]= df$End_date[j+1]
          df<- df[-(j+1),]
        }
        else
        { j <- j+1}
        i<-i+1
      }
      timeline_table<-df
      timeline_table<-timeline_table %>%
        mutate(End_date=ifelse(Start_date==End_date,NA, End_date))
      timeline_table$Start_date<-as.Date.numeric(timeline_table$Start_date,'1970-01-01')
      timeline_table$End_date<-as.Date.numeric(timeline_table$End_date,'1970-01-01')
      timeline_table<-sqldf("select Team as content, start_date as start, End_date as end from timeline_table ")
      timeline_table$start<-as.Date.numeric(timeline_table$start,'1970-01-01')
      timeline_table$end<-as.Date.numeric(timeline_table$end,'1970-01-01')
      for (i in 1:nrow(timeline_table)){
        if(timeline_table$content[i]=="Close"){timeline_table$end[i]=timeline_table$start[i]+1}
      }
    timevis(timeline_table)
    })
  })
  
  ####### Summary open/closed incidents details #####
  output$open_close_inc_det<-DT::renderDataTable({
    All_data_view<-final_data_summary$All_data_view
    
    
    if (input$open_or_closed_inc=='Closed'){
      All_data_view<-sqldf(paste0("select INC,Site,Business_area,Process,Status,Closed_dttm as Closed_Date,Closed_by
                                from All_data_view where Status='Closed'"))
    }
    else if (input$open_or_closed_inc=='Open'){
      All_data_view<-sqldf(paste0("select INC,Site,Business_area,Process,Status,Closed_dttm as Closed_Date,Closed_by
                                from All_data_view where Status IS NULL"))}
    else
      {All_data_view<-sqldf(paste0("select INC,Site,Business_area,Process,Status,Closed_dttm as Closed_Date,Closed_by
                                from All_data_view"))}
    datatable(All_data_view,rownames = FALSE,escape=F)})
  
  
  
  
} #End of server code

#Define mandatory fields
fieldsMandatory <- c("Site","Bus_Ar","pro_Ar","desc","eng_team","People","cust_cont","systems","facilities","vuln_cust","comm_req","operations_invok","operational_call")
fieldsMandatory_crt_add <- c("Site_add","Bus_Ar_add","pro_Ar_add","desc_add","eng_team_add","People_add","cust_cont_add","systems_add","facilities_add","vuln_cust_add")

fieldsMandatory_amend_site <- c("desc_amend","Teams_amend","People_amend","cust_cont_amend","systems_amend","facilities_amend","Vulnerable_customers_amend")
fieldsMandatory_sit_rep <- c("enter_date_sit","inc_site_rep","site_rep_ChairPerson_","site_rep_summary_","site_rep_updates_","Site_sit_rep","site_rep_owner1","site_rep_action1","site_rep_summary1","site_rep_updates1")


fieldsMandatory_rp_step4 <- c("Site_rp_s4","Business_area_rp_s4","Process_rp_s4","Priority_rating_rp_s4","Team_name_rp_s4","ivr_messaging_rp","ivr_msg_details","online_messaging_rp",
                              "online_msg_details","social_media_rp","site_rp_actions_s4")

fieldsMandatory_rp_step5 <- c("Site_rp_s5","Business_area_rp_s5","Process_rp_s5","Priority_rating_rp_s5","Team_name_rp_s5","line_closure_rp","lines_closed_rp","calls_diverted_from_rp",
                              "calls_diverted_to_rp","site_rp_actions_s5")


fieldsMandatory_rp_step6 <- c("Site_rp_s6","Business_area_rp_s6","Process_rp_s6","Priority_rating_rp_s6","Team_name_rp_s6","Area_impacted_rp","location_impacted_rp","fte_impacted_rp",
                              "issue_rp","site_rp_actions_s6")


fieldsMandatory_rp_step7 <- c("Site_rp_s7","Business_area_rp_s7","Process_rp_s7","Priority_rating_rp_s7","Team_name_rp_s7","Area_impacted_rp1","location_impacted_rp1","fte_impacted_rp1",
                              "issue_rp1","site_rp_actions_s7")



fieldsMandatory_site_imt<- c("Who_is_impacted","Estimated_volume_of_users_impacted","Timescales_for_recovery","Root_cause","IMT","Comms","Site_continuity","Description")
fieldsMandatory_site_nr<- c("Action_required","Sungard_required","Escalation_required","Comments")
#### Save the entered details
fieldsAll <- c("Site","Bus_Ar","pro_Ar","desc","eng_team","People","cust_cont","systems","facilities","vuln_cust","comm_req","operations_invok","operational_call")
data_dir<-file.path("Data")


# Run the application 
shinyApp(ui = ui, server = server)


