-------------------------------------------------------------------------------------------
VBA- quick guide
-------------------------------------------------------------------------------------------

1. Attach userform to button in main module----------------------

Sub ShowForm()
Rev_per_HC_Report.Show
End Sub

2. Select file dialog box-----------------------------

BaseFile = Application.GetOpenFilename _
(Title:="Please select Revenue per Headcount Report", _
FileFilter:="Excel Files *.xlsx (*.xlsx),")

3. Message box-------------------------------

MsgBox "No file selected. Please select the file.", vbExclamation, "Sorry!"

4. Open & close workbook---------------------

Dim wbk_hc As Workbook
Set wbk_hc = Workbooks.Open(HC)
wbk_hc.Close False

5. Last row/col-----------------------

last_row_dump = wbk_dump.Sheets("Sheet1").Cells(Rows.Count, 1).End(xlUp).Row
last_col_base_details = wbk_base.Sheets("Details").Cells(4, 2).End(xlToRight).Column

or

last_col=wbk_base.Sheets("Details").Cells(1, Columns.Count).End(xlToLeft).Column

6. copy and paste----------------------

wbk_dump.Sheets("Sheet1").Range("I2:I" & last_row_dump).Copy
wbk_ref.Sheets("Process Rev").Cells(2, 1).PasteSpecial Paste:=xlPasteValues

or,	bpo_budget.Range("C" & next_row_cons) = this_sht.Range("B2")

7. Remove duplicates---------------------------

wbk_ref.Sheets("Process Rev").Range("A1:B" & last_row_dump).RemoveDuplicates Columns:=Array(1, 2), Header:=xlYes

8. Get file name from path------------------------

HCFileName = Dir(HC)

9. Check box in userform----------------------

If Update_last_month_checkbox.Value = True Then
Else
End if

10. select address--------------------------

rnge1 = Cells(row, col).Address()

11. Filter with check conditions---------------------------

wbk_ref.Sheets("Client Rev").Range("a1:" & rnge7).AutoFilter Field:=6, Criteria1:=Array( _
    "new_entry", "="), Operator:=xlFilterValues
last_row_test = wbk_ref.Sheets("Client Rev").Cells(Rows.Count, 1).End(xlUp).Row 'last_row_test
If last_row_test > 1 Then
wbk_ref.Sheets("Client Rev").Range("a3:a" & last_row_ref_client_rev).SpecialCells(xlCellTypeVisible).Copy
wbk_base.Sheets("Details").Cells(last_row_base_details + 1, 1).PasteSpecial Paste:=xlPasteValues
End If
wbk_ref.Sheets("Client Rev").Range("a1").AutoFilter

12. Writing Formula in a range---------------------

wbk_ref.Sheets("Process Rev").Range("c2:c" & last_row_ref_process_rev).Formula = "=SUMIFS('[" & DumpFileName & "]Sheet1'!$Z$2:$Z$" & last_row_dump & ",'[" & DumpFileName & "]Sheet1'!$I$2:$I$" & last_row_dump & ",A2)"

13. Faster calculation---------------------------

Application.ScreenUpdating = False/True
Application.DisplayAlerts = False/True
Application.Calculation = xlCalculationManual/xlCalculationAutomatic

14. Worksheets-----------------------------

Dim master_process As Worksheet
Set master_process = master.Sheets("Process Master")

15. Open read only files------------------------

Dim master As Workbook
Set master = Workbooks.Open(Filename:=MasterFile, ReadOnly:=True)

16. Getting workbook path--------------------

Dim folder_dump_file As String
folder_dump_file = Application.ActiveWorkbook.Path

17. Clear contents------------------------------

report_fin.Sheets("Summary").Range("a3:ck10000").ClearContents

18. Sorting---------------------------------

Range("A3:CK" & last_row_report_fin_new).Select
Selection.Sort Key1:=Range("A3"), Order1:=xlAscending, Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom

19. Deleting files------------------------

Kill (folder_dump_file & "\" & "Headcount_Report_temp.xlsx")

20. Adding workbooks---------------------

Set ws_pivot = Worksheets.Add
ActiveSheet.Move After:=Sheets(ActiveWorkbook.Sheets.Count)
ActiveSheet.Name = "Test"

21. Pivot Table----------------------

'Creating Pivot cache
last_row_summary = Sheets("Summary").Cells(Rows.Count, 1).End(xlUp).Row 'last_row_summary
rnge14 = Cells(last_row_summary, 89).Address()
Set data_pivot = Sheets("Summary").Range("a2:" & rnge14)
Set pc = ActiveWorkbook.PivotCaches.Create(xlDatabase, data_pivot)

'Creating Pivot table
Set pt = pc.CreatePivotTable(ws_pivot.Range("B3"))
'Setting Fields
With pt
'set row fields
With .PivotFields("LOB")
.Orientation = xlRowField
.Position = 1
End With
With .PivotFields("Category")
.Orientation = xlRowField
.Position = 2
End With
'set data field
yr = Array("16", "17", "18", "19", "20")
For y = 0 To 4
.AddDataField .PivotFields("Jan'" & yr(y)), "Jan " & yr(y), xlSum
.AddDataField .PivotFields("Feb'" & yr(y)), "Feb " & yr(y), xlSum
.AddDataField .PivotFields("Mar'" & yr(y)), "Mar " & yr(y), xlSum
.AddDataField .PivotFields("Apr'" & yr(y)), "Apr " & yr(y), xlSum
.AddDataField .PivotFields("May'" & yr(y)), "May " & yr(y), xlSum
.AddDataField .PivotFields("Jun'" & yr(y)), "Jun " & yr(y), xlSum
.AddDataField .PivotFields("Jul'" & yr(y)), "Jul " & yr(y), xlSum
.AddDataField .PivotFields("Aug'" & yr(y)), "Aug " & yr(y), xlSum
.AddDataField .PivotFields("Sep'" & yr(y)), "Sep " & yr(y), xlSum
.AddDataField .PivotFields("Oct'" & yr(y)), "Oct " & yr(y), xlSum
.AddDataField .PivotFields("Nov'" & yr(y)), "Nov " & yr(y), xlSum
.AddDataField .PivotFields("Dec'" & yr(y)), "Dec " & yr(y), xlSum
Next
End With

22. Closing userform---------------------

Unload me

23. Select folder dialog box-------------------

With Application.FileDialog(msoFileDialogFolderPicker)
        .AllowMultiSelect = False
        If .Show <> -1 Then
        DumpFolder = "Blank"
        Else
        DumpFolder = .SelectedItems(1)
        End If
End With

24. Progress bar----------------------

Sub FractionComplete(percent_progress As Integer)
With UserFormProgress
    .LabelCaption.Caption = percent_progress & "% Complete"
    .LabelProgress.Width = percent_progress * 4 ' given width=400
End With
DoEvents
End Sub



UserFormProgress.LabelProgress.Width = 0 'progress indicator
UserFormProgress.Show
FractionComplete (0) 'percentage completed



FractionComplete (5)


FractionComplete (100) '100% complete
Unload UserFormProgress

25. Array-------------------------------

Dim sheets_reprt As Variant
sheets_reprt = Array("RPM", "DA", "DS", "IQR", "Summary")

26. Error handling---------------------------

On Error GoTo Err_dump_file_absent
-------------------
Err_dump_file_absent:

27. Deleting old file if present----------------

Dim old_final_emp As String
old_final_emp = DumpFolder & "Headcount_Report_by_clients.xlsx"
If Dir(old_final_emp) <> "" Then
    Kill old_final_emp
End If

28. Looping through all files in a folder------------------

myPath = FolderName
If Right(myPath, 1) <> "\" Then myPath = myPath & "\"
myFile = Dir(myPath & "*.xls*")
Do While Len(myFile) > 0
Set wbk = Workbooks.Open(myPath & myFile)
.
.
wbk.Close True
myFile = Dir
Loop

29. Delete rows which don't satisfy conditions--------------

Sheets("Consolidated Data").Range(Cells(4, 1), Cells(r, 119)).AutoFilter Field:=3, Criteria1:=Array( _
        "0", "Process Names", "Process Name", "Transaction Based Pricing", "="), Operator:=xlFilterValues
Range(Cells(5, 10), Cells(r, 10)).SpecialCells(xlCellTypeVisible).EntireRow.Delete

30. Using sheets of current workbook--------------------

Dim bpo_budget As Worksheet
Set bpo_budget = ThisWorkbook.Sheets("BPO Budget Dump")

31. For loop----------------------------------------------

For counter = 0 To sht_count
sht_list(counter) = wbk.Worksheets(sht_indx).Name
sht_indx = sht_indx + 1
Next counter

32. Column chart------------------------------------------

Function col_cht(lft, tp, src, titl As Variant)
'column charts function- vertical, ncr, region, category
Dim new_cht As Object
For x = 0 To 4
Set new_cht = ActiveSheet.ChartObjects.Add(Left:=lft(x), Width:=360, Top:=tp(x), Height:=216)
With new_cht
.Chart.SetSourceData Source:=Worksheets("Data").range(src(x))
.Chart.Type = xlColumn
.Chart.SetElement (msoElementLegendBottom)
.Chart.SetElement (msoElementPrimaryValueGridLinesNone)
.Chart.SetElement (msoElementDataLabelOutSideEnd)
.Chart.SetElement (msoElementPrimaryValueAxisNone)
.Chart.SeriesCollection(1).DataLabels.NumberFormat = "0.0,,;0.0,,;"
.Chart.SeriesCollection(1).DataLabels.Orientation = xlUpward
.Chart.SeriesCollection(2).DataLabels.NumberFormat = "0.0,,;0.0,,;"
.Chart.SeriesCollection(2).DataLabels.Orientation = xlUpward
.Chart.SeriesCollection(3).DataLabels.NumberFormat = "0.0,,;0.0,,;"
.Chart.SeriesCollection(3).DataLabels.Orientation = xlUpward
.Chart.HasTitle = True
.Chart.ChartTitle.Text = titl(x)
.Chart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(79, 129, 189)
.Chart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(228, 108, 10)
.Chart.SeriesCollection(3).Format.Fill.ForeColor.RGB = RGB(127, 127, 127)
.Chart.ChartGroups(1).Overlap = -25
End With
Next x
End Function

33. Line chart---------------------------------------------

Function lin_cht(lft, tp, src, titl As Variant)
'line charts function- mom, qoq
Dim new_cht As Object
For x = 0 To 1
Set new_cht = ActiveSheet.ChartObjects.Add(Left:=lft(x), Width:=360, Top:=tp(x), Height:=216)
With new_cht
.Chart.SetSourceData Source:=Worksheets("Data").range(src(x))
.Chart.Type = xlLine
.Chart.SetElement (msoElementLegendBottom)
.Chart.SetElement (msoElementPrimaryValueGridLinesNone)
.Chart.SetElement (msoElementDataLabelTop)
.Chart.SetElement (msoElementPrimaryValueAxisNone)
.Chart.SeriesCollection(1).DataLabels.NumberFormat = "0.0,,;0.0,,;"
.Chart.SeriesCollection(1).DataLabels.Position = xlLabelPositionBelow
.Chart.SeriesCollection(2).DataLabels.NumberFormat = "0.0,,;0.0,,;"
.Chart.SeriesCollection(2).DataLabels.Position = xlLabelPositionTop
.Chart.HasTitle = True
.Chart.ChartTitle.Text = titl(x)
.Chart.SeriesCollection(1).Format.Fill.ForeColor.RGB = RGB(79, 129, 189)
.Chart.SeriesCollection(2).Format.Fill.ForeColor.RGB = RGB(228, 108, 10)
End With
Next x
End Function

34. Delete all charts in a sheet--------------------------

Dim cht_old As Object
For Each cht_old In ActiveSheet.ChartObjects
cht_old.Delete
Next

35. Select case-------------------------------------

chart_no = Sheets("Dashboard").range("ba2")
Select Case chart_no
Case 1  'vertical view
    lft = Array(20, 520, 20, 520, 20)
    tp = Array(100, 100, 350, 350, 600)
    src = Array("k216:n223", "a216:d223", "a226:d233", "f216:i223", "f226:i233")
    titl = Array("FY' 17", "Q1' 17", "Q2' 17", "Q3' 17", "Q4' 17")
    Call col_cht(lft, tp, src, titl)

Case 2  'ncr view
    lft = Array(20, 520, 20, 520, 20)
    tp = Array(100, 100, 350, 350, 600)
    src = Array("k236:n243", "a236:d243", "a246:d253", "f236:i243", "f246:i253")
    titl = Array("FY' 17", "Q1' 17", "Q2' 17", "Q3' 17", "Q4' 17")
    Call col_cht(lft, tp, src, titl)
End Select

36. Functions- Declaration--------------------------------

Function lin_cht(lft, tp, src, titl As Variant)
.
.
.
End Function

37. Functions- Calling-----------------------------------

Call col_cht(lft, tp, src, titl)

38. Worksheet formatting- border/color------------------

Dim con_rev As Worksheet
Set con_rev = ThisWorkbook.Sheets(mysheets(x))
con_rev.Range("A5:XFD1048576").Interior.Color = RGB(255, 255, 255)
con_rev.Range("A5:XFD1048576").Borders(xlEdgeLeft).LineStyle = xlNone
con_rev.Range("A5:XFD1048576").Borders(xlEdgeTop).LineStyle = xlNone
con_rev.Range("A5:XFD1048576").Borders(xlEdgeRight).LineStyle = xlNone
con_rev.Range("A5:XFD1048576").Borders(xlEdgeBottom).LineStyle = xlNone
con_rev.Range("A5:XFD1048576").Borders(xlInsideVertical).LineStyle = xlNone
con_rev.Range("A5:XFD1048576").Borders(xlInsideHorizontal).LineStyle = xlNone
con_rev.Range("A5:XFD1048576").Borders(xlDiagonalUp).LineStyle = xlNone
con_rev.Range("A5:XFD1048576").Borders(xlDiagonalDown).LineStyle = xlNone

39. protect activesheet-----------------------------------------

ActiveSheet.Protect Password:=""

ActiveSheet.Unprotect Password:=""

40. Protect all the sheets of the active workbook-----------------

Dim WS_Count As Integer
Dim I As Integer
WS_Count = ActiveWorkbook.Worksheets.Count
For I = 1 To WS_Count
Worksheets(I).Protect Password:=""

Next I





41. unhiding entire rows and columns in a sheet--------------------

Columns.EntireColumn.Hidden = False
Rows.EntireRow.Hidden = False





42. change data links in all sheets--------------------------------

Dim Links As Variant
Links = ActiveWorkbook.LinkSources(Type:=xlLinkTypeExcelLinks)
For i = 1 To UBound(Links)
ActiveWorkbook.ChangeLink _
    Name:=Links(i), _
    NewName:="Consolidated Rev Forecast.xlsb", _
    Type:=xlExcelLinks
Next i






43. Autofilter operators

FIND BLANKS-----------------------------------------------

ThisWorkbook.Sheets("Clients").Range("a1:e86").AutoFilter Field:=5, Criteria1:=Array( _
    "="), Operator:=xlAnd
Cells(1, 5).AutoFilter

FIND "Invalid_client_name", NOT BLANKS---------------------

ThisWorkbook.Sheets("Clients").Range("a1:e86").AutoFilter Field:=5, Criteria1:=Array( _
    "Invalid_client_name"), Operator:=xlAnd
Cells(1, 5).AutoFilter

FIND "Invalid_client_name" + BLANKS---------------------

ThisWorkbook.Sheets("Clients").Range("a1:e86").AutoFilter Field:=5, Criteria1:=Array( _
    "Invalid_client_name", "="), Operator:=xlFilterValues
Cells(1, 5).AutoFilter

DOES NOT EQUAL------------------------------------------

ThisWorkbook.Sheets("Clients").Range("a1:e86").AutoFilter Field:=5, Criteria1:=Array( _
    "<>1011"), Operator:=xlAnd
Cells(1, 5).AutoFilter






44. using multiple consitions inside sumifs----------------

=SUM(SUMIFS(Y:Y,AK:AK,{"Jan-18","Feb-18","Mar-18"}))





45. saving workbook--------------------------

SAVE AT SAME LOCATION-------
report_fin.Save

SAVING AT SPECIFIC LOCATION--------
report_fin.SaveAs fileName:=folder_base_file & "\" & "Headcount_Report_Consulting.xlsx"





46. closing workbook-------------------------

SAVE CHANGES-------------
report_fin.Close True

DO NOT SAVE CHANGES----------
report_fin.Close False





47. Disable update links while opening a workbook--------------------

Dim rev_dump As Workbook
Set rev_dump = Workbooks.Open(DumpFile, UpdateLinks:=0) 'rev_dump




48. autofill on the cells in the specific range-------------------------


Sheets("P&L").Range("n15:n82").AutoFill Destination:=Worksheets("P&L").Range("n15:t82"), Type:=xlFillDefault





49.macro triggers when drop down list changes-------------

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)

If Range("c9").Value = "Percentage" Then
Range("H8:N16").NumberFormat = "0""%"""
Else
Range("H8:N16").NumberFormat = "general"
End If

End Sub




50.changing color of a range------------------------

'target is a range
'colorindex 5 is blue
target.font.colorindex=5



51. uppercase----------------------------------------

target.value=ucase(target.value)



52.paste special-------------------------------------

report_fin.Sheets("Snapshot").Cells(lr_ref + 3, 4).PasteSpecial Paste:=xlPasteValues
report_fin.Sheets("Snapshot").Cells(lr_ref + 3, 4).PasteSpecial Paste:=xlPasteFormats
report_fin.Sheets("Snapshot").Cells(lr_ref + 3, 4).PasteSpecial Paste:=xlPasteFormulas



53.clear clipboard---------------------------------

Application.CutCopyMode = False



54. clear all---------------------------------------

'equal to deleting values, formats & formula

Sheets("sheet1").Range("f5:n20").Clear



55. delete range-----------------------------------

Range("B2:D10").Delete Shift:=xlToLeft

Range("B2:D10").Delete Shift:=xlToUp 

Range("B2:D10").EntireRow.Delete 

Range("B2:D10").EntireColumn.Delete 



56.Print preview---------------------------------------------

Sub Print_Dashboard()
    'ActiveWindow.View = xlPageBreakPreview
    total_title = Sheets("Use").Range("BF29").Value
    last_col = 17
    
    If total_title > 6 Then
    last_col = 11 + total_title    
    End If
    
    last_row = Sheets("Dashboard").Cells(1001, 3).End(xlUp).Row + 8    
    last_cell = Cells(last_row, last_col).Address(1, 1)    
    ActiveSheet.PageSetup.PrintArea = "$A$1:" & last_cell
        
    'ActiveWindow.View = xlNormalView    
    ActiveSheet.PrintPreview    
End Sub

57. wait for x seconds-----------------------

Application.Wait (Now + TimeValue("0:00:02"))

58. Updating status bar--------------------

Application.StatusBar = "Please be Patient,File is being Updated"

59. drop down in a cell-------------------

With Range("D4").Validation
 .Delete
 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
 Operator:=xlBetween, Formula1:="=Use!C1:C" & lRow

.ShowInput = True
 .ShowError = True
.IgnoreBlank = True
 .InCellDropdown = True
 End With

60.lock cells-----------------------------

ActiveWorkbook.Sheets("XYZ").Range("a1:c8").Locked= True
Activesheet.Protect Password="xx"

61. clear all filters--------------------------------------

ActiveSheet.AutoFilter.ShowAllData

62. set print page height automatic-----------------------

    Application.PrintCommunication = False
    
    With Sheets("Dashboard").PageSetup
        .PrintArea = "$A$1:" & last_cell
        .CenterHorizontally = True
        .CenterVertically = False
        .LeftMargin = Application.InchesToPoints(0)
        .RightMargin = Application.InchesToPoints(0)
        .TopMargin = Application.InchesToPoints(0)
        .BottomMargin = Application.InchesToPoints(0)
        .HeaderMargin = Application.InchesToPoints(0)
        .FooterMargin = Application.InchesToPoints(0)
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = 0
        .PrintTitleRows = "$1:$12"
    End With
    
    Application.PrintCommunication = True

ActiveWindow.View = xlPageBreakPreview
ActiveSheet.ResetAllPageBreaks
ActiveSheet.PrintPreview

63. conditional formatting----------------------------

Dim rg As Range
Dim cond1 As FormatCondition, cond2 As FormatCondition
Set rg = Range(Cells(33 + k2, 8), Cells(32 + 2 * k2, 8))
rg.FormatConditions.Delete
Set cond1 = rg.FormatConditions.Add(xlCellValue, xlLess, "=0")
Set cond2 = rg.FormatConditions.Add(xlCellValue, xlGreater, "=0")

With cond1
.Interior.Color = vbGreen
.Font.Color = vbBlack
End With

With cond2
.Interior.Color = vbRed
.Font.Color = vbWhite
End With

64.









-------------------------------------------------------------------------------------------------------------
VBS Guide
-------------------------------------------------------------------------------------------------------------
1. convert xlsx to xlsb all files in a folder

Dim fso: set fso = CreateObject("Scripting.FileSystemObject")
' directory in which this script is currently running
CurrentDirectory = fso.GetAbsolutePathName(".")
Set folder = fso.GetFolder(CurrentDirectory)
For each file In folder.Files
If fso.GetExtensionName(file) = "xlsx" Then
		pathOut = fso.BuildPath(CurrentDirectory, fso.GetBaseName(file)+".xlsb")
		Dim oExcel
		Set oExcel = CreateObject("Excel.Application")
		Dim oBook
		Set oBook = oExcel.Workbooks.Open(file)
		oBook.SaveAs pathOut, 50
		oBook.Close False
		oExcel.Quit
End If
Next

2. convert xlsb to xlsx all files in a folder

Dim fso: set fso = CreateObject("Scripting.FileSystemObject")
' directory in which this script is currently running
CurrentDirectory = fso.GetAbsolutePathName(".")
Set folder = fso.GetFolder(CurrentDirectory)
For each file In folder.Files
If fso.GetExtensionName(file) = "xlsb" Then
		pathOut = fso.BuildPath(CurrentDirectory, fso.GetBaseName(file)+".xlsx")
		Dim oExcel
		Set oExcel = CreateObject("Excel.Application")
		Dim oBook
		Set oBook = oExcel.Workbooks.Open(file)
		oBook.SaveAs pathOut, 51
		oBook.Close False
		oExcel.Quit
End If
Next

3. open and save all excel files in a folder

Dim fso: set fso = CreateObject("Scripting.FileSystemObject")
' directory in which this script is currently running
CurrentDirectory = fso.GetAbsolutePathName(".")
Set folder = fso.GetFolder(CurrentDirectory)
For each file In folder.Files
If fso.GetExtensionName(file) = "xlsx" Then
		pathOut = fso.BuildPath(CurrentDirectory, fso.GetBaseName(file)+".xlsx")
		Dim oExcel
		Set oExcel = CreateObject("Excel.Application")
		oExcel.DisplayAlerts = False
		Dim oBook
		Set oBook = oExcel.Workbooks.Open(file)
		oBook.SaveAs pathOut, 51
		oBook.Close False
		oExcel.Quit
End If
Next

4. 





-----------------------------------------------------------------------------------------------------------------
Python guide
-----------------------------------------------------------------------------------------------------------------
